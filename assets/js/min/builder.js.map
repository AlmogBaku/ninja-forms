{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","models/app/settingModel.js","models/app/settingCollection.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","models/app/mergeTagLookupCollection.js","views/app/drawer/mergeTag.js","views/app/drawer/mergeTagList.js","views/app/drawer/mergeTagGroup.js","views/app/drawer/mergeTagGroupList.js","views/app/drawer/mergeTagFilter.js","views/app/drawer/mergeTagBox.js","controllers/app/mergeTagBox.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","controllers/app/getNewSettingGroupCollection.js","controllers/app/settingMedia.js","models/app/typeModel.js","models/app/typeCollection.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/fieldItem.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","view","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","click a","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","renderClasses","classes","currentDomain","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","viewChanges","click .publish","click .viewChanges","clickPublish","clickViewChanges","changeModel","effect","times","click .nf-mobile-menu","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","click #nf-logo","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formData","formSettings","formTitleView","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","viewHeight","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","click .nf-publish","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","drawer","contentView","headerView","footerView","empty","click .nf-toggle-drawer","clickToggleDrawer","clickTag","active","mergeTagItemView","fieldCollection","updateFields","set","Backbone","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","useMergeTags","_","each","remove","include","models","sectionModel","add","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTags","mergeTagsClone","clone","click .nf-open-drawer","click .nf-change-domain","click .nf-close-drawer","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","controller","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","closedPos","width","keys","key","getPreventClose","clearFilter","blurFilter","keyup .nf-filter","input .nf-filter","focus input","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","click .dashicons-dismiss","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","zIndex","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","click .nf-item","keydown .nf-item","mousedown .nf-item","clickFieldType","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","icon","renderType","savedField","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","click .toggle","clickToggleGroup","renderLabel","label","groupLabel","renderArrowDir","display","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","title","renderTypeNicename","domainID","scroll","clickAddAction","open","image","section","renderStyle","actionTypeButtonView","renderNicename","slug","actionTypeCollectionView","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","filteredInstalled","filteredAvailable","click .undoSingle","undoSingle","viewChangesItem","click .undoChanges","clickUndoChanges","settingErrorView","error","renderOnChange","renderError","refresh","drawerOpened","drawerClosed","setting","unescape","silent","onBeforeRender","escape","next","jBox","maxWidth","theme","closeOnClick","mask","input","autoNumeric","aSep","thousandsSeparator","aDec","decimalPoint","currency","currencySymbol","currencySymbols","aSign","text","format","console","log","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","renderMergeTags","hide_merge_tags","renderPlaceholder","change .setting","keyup .setting","click .setting","click .extra","changeSetting","keyUpSetting","clickSetting","itemSettingView","formName","formSubmit","titleSettingModel","addSubmitSettingModel","submitButtons","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","typeModel","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","cancel","scrollSensitivity","item","dropping","hide","renderAddButton","button","click .nf-button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","unset","x","y","outside","onCreated","setContent","attach","displayName","saved","realType","renderSavedStar","star","actionCollection","mouseover .nf-item-control","click .nf-edit-settings","singletap .nf-edit-settings","click .nf-delete","click .nf-duplicate","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","change input","click","maybeClickEdit","changeToggle","renderToggle","settingName","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectType","objectDomain","order","fieldType","parentType","updateFieldKey","changedAttributes","keyModel","fieldModel","parseInt","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","nfi18n","domainFormFields","Esc","Ctrl+Shift+n","Ctrl+Shift+a","Ctrl+Shift+s","Alt+Ctrl+t","up","down","Shift+return","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","Ctrl+Shift+f","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","stringify","fields","field","parent_id","deleted_fields","actions","deleted_actions","autoClose","form","exception","pluck","isNumeric","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","appDomains","preview","publish","changeCollection","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","undoAll","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","reExp","toString","newUrl","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","document","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","attr","changedAttr","after","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","optionModel","cloneModelDeep","attributes","clonedCollection","newModel","getSettingChildView","settingChildView","object","maybePreventUI","updateKey","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","clickDuplicate","tmpID","tagSectionCollection","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","replaceFieldKey","initMergeTags","mergeTagsView","jBoxes","closeOnEsc","maxHeight","onOpen","prev","onClose","tagModel","currentValue","currentPos","caret","newPos","substr","summernote","calcTag","getFieldKeyFormatCalc","fieldID","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","newKey","oldTag","oldKey","_previousAttributes","oldVal","re","RegExp","newVal","insertTag","mergeTagView","sectionFilter","searchFilter","filter","child","term","toLowerCase","removeActive","onClick","updateTags","setActive","siblings","mergeTagGroupView","keyup input","updateFilter","event","firstFilteredTag","sections","MergeTagModel","MergeTagLookupCollection","MergeTagView","MergeTagListView","MergeTagGroupView","MergeTagGroupListView","MergeTagFilterView","MergeTagBoxLayout","old","afterAppStart","beforeRenderSetting","beforeDrawerClose","$this","hasClass","closest","autocomplete","$overlayElement","bind","selector","focusCallback","keyupCallback","layout","tagCollection","mergeTagListView","mergeTagGroupListView","getRegion","rteEditor","posY","outerHeight","repeaterRow","scrollLeft","posX","$input","str","caretPos","patt","match","exec","string","childNode","childNodes","node","nodeValue","innerHTML","range","createRange","sel","getSelection","setStart","collapse","removeAllRanges","addRange","dataID","so","mergetags","mergetag","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","linkButton","mediaButton","toolbar","codemirror","lineNumbers","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","onFocus","onKeydown","onKeyup","linkMenu","replaceWith","class","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","textEl","urlEl","isNewWindowEl","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","contains","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","Radio","actionModel","lastChanged","oldValue","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","form_id","isNaN","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","mobileDefaults","desktopDefaults","openNotice","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","SettingCollection","settingGroupModel","SettingGroupCollection","getNewSettingGroupCollection","option","typeSectionModel","TypeCollection","SectionCollection","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","style","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","search","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","found","alias","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","insertedAt","fieldWidth","dragFieldID","dragModel","oldPos","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","changeErrors","size","errorsFound","opt","listOptionModel","addOption","renderErrors","ErrorView","columns","parentView","hasErrors","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","findByIndex","getColumns","renderOptions","column","selected","listOptionView","listEmptyView","listOptionCollection","optionCollection","handle","forcePlaceholderSize","importLink","closeButton","clickImport","renderHeaders","col","renderFieldsetClasses","currency_symbol","click .nf-add-new","clickAddOption","textarea","trimLeft","trimRight","lines","isArray","line","row","slugify","separator","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","optionView","triggerDataModel","modelData","new","default","newOrder","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","select","confirm","insertField","productFields","getProductFields","addMask","newFieldKey","updateLabel","d","Date","valueOf","setError","keyExists","testKey","startWiggle","stopWiggle","initWiggle","ClassyWiggle","degrees","delay","updateField","modified","modelClone","fieldData","created_at","formID","newType","newTypeDefaults","settingDefaults","typeCollection","typeSections","addDatepicker","pikadayResponsive","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","dropActionType","type_slug","actionTypeModel","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","group","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calcs","calculations","targetCalc","selfRef","futureCalc","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ItemControls","MergeTags","MergeTagsBox","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","SettingMedia","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","doingShortcut","touch","renderRequired","required","getFieldID","renderIcon","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","NinjaForms","Application","Renderer","onStart","evaluate","interpolate","variable","ninjaForms"],"mappings":"CAAA,WCUA,GAAAA,GAAAC,EAAAC,GACA,SAAAC,GAUA,QAAAC,GAAAC,EAAAC,GACA,MAAAC,GAAAC,KAAAH,EAAAC,GAWA,QAAAG,GAAAC,EAAAC,GACA,GAAAC,GAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAZ,GAAAA,EAAAa,MAAA,KACAC,EAAAC,EAAAD,IACAE,EAAAF,GAAAA,EAAA,QAGA,IAAAf,GAAA,MAAAA,EAAAkB,OAAA,GAIA,GAAAjB,EAAA,CAgBA,IAfAD,EAAAA,EAAAc,MAAA,KACAR,EAAAN,EAAAmB,OAAA,EAGAH,EAAAI,cAAAC,EAAAC,KAAAtB,EAAAM,MACAN,EAAAM,GAAAN,EAAAM,GAAAiB,QAAAF,EAAA,KAOArB,EAAAa,EAAAW,MAAA,EAAAX,EAAAM,OAAA,GAAAM,OAAAzB,GAGAU,EAAA,EAAAA,EAAAV,EAAAmB,OAAAT,GAAA,EAEA,GADAE,EAAAZ,EAAAU,GACA,MAAAE,EACAZ,EAAA0B,OAAAhB,EAAA,GACAA,GAAA,MACA,IAAA,OAAAE,EAAA,CACA,GAAA,IAAAF,IAAA,OAAAV,EAAA,IAAA,OAAAA,EAAA,IAOA,KACAU,GAAA,IACAV,EAAA0B,OAAAhB,EAAA,EAAA,GACAA,GAAA,GAMAV,EAAAA,EAAA2B,KAAA,SACA,KAAA3B,EAAA4B,QAAA,QAGA5B,EAAAA,EAAA6B,UAAA,GAKA,KAAAhB,GAAAI,IAAAF,EAAA,CAGA,IAFAb,EAAAF,EAAAc,MAAA,KAEAJ,EAAAR,EAAAiB,OAAAT,EAAA,EAAAA,GAAA,EAAA,CAGA,GAFAP,EAAAD,EAAAsB,MAAA,EAAAd,GAAAiB,KAAA,KAEAd,EAGA,IAAAF,EAAAE,EAAAM,OAAAR,EAAA,EAAAA,GAAA,EAKA,GAJAP,EAAAW,EAAAF,EAAAW,MAAA,EAAAb,GAAAgB,KAAA,MAIAvB,IACAA,EAAAA,EAAAD,IACA,CAEAE,EAAAD,EACAG,EAAAG,CACA,OAMA,GAAAL,EACA,OAMAG,GAAAS,GAAAA,EAAAd,KACAK,EAAAS,EAAAd,GACAM,EAAAC,IAIAL,GAAAG,IACAH,EAAAG,EACAD,EAAAE,GAGAJ,IACAH,EAAAwB,OAAA,EAAAnB,EAAAF,GACAL,EAAAE,EAAAyB,KAAA,MAIA,MAAA3B,GAGA,QAAA8B,GAAAC,EAAAC,GACA,MAAA,YAIA,GAAAC,GAAAC,EAAApC,KAAAqC,UAAA,EAQA,OAHA,gBAAAF,GAAA,IAAA,IAAAA,EAAAd,QACAc,EAAAG,KAAA,MAEAC,EAAAC,MAAA7C,EAAAwC,EAAAR,QAAAM,EAAAC,MAIA,QAAAO,GAAAR,GACA,MAAA,UAAA/B,GACA,MAAAD,GAAAC,EAAA+B,IAIA,QAAAS,GAAAC,GACA,MAAA,UAAAC,GACAC,EAAAF,GAAAC,GAIA,QAAAE,GAAA5C,GACA,GAAAN,EAAAmD,EAAA7C,GAAA,CACA,GAAAiC,GAAAY,EAAA7C,SACA6C,GAAA7C,GACA8C,EAAA9C,IAAA,EACA+C,EAAAT,MAAA7C,EAAAwC,GAGA,IAAAvC,EAAAiD,EAAA3C,KAAAN,EAAAoD,EAAA9C,GACA,KAAA,IAAAgD,OAAA,MAAAhD,EAEA,OAAA2C,GAAA3C,GAMA,QAAAiD,GAAAjD,GACA,GAAAkD,GACAC,EAAAnD,EAAAA,EAAA4B,QAAA,MAAA,CAKA,OAJAuB,IAAA,IACAD,EAAAlD,EAAA6B,UAAA,EAAAsB,GACAnD,EAAAA,EAAA6B,UAAAsB,EAAA,EAAAnD,EAAAmB,UAEA+B,EAAAlD,GA8CA,QAAAoD,GAAApD,GACA,MAAA,YACA,MAAAgB,IAAAA,EAAAA,QAAAA,EAAAA,OAAAhB,QA1OA,GAAA+C,GAAAV,EAAAgB,EAAAC,EACAX,KACAE,KACA7B,KACA8B,KACAjD,EAAA0D,OAAAC,UAAAC,eACAvB,KAAAV,MACAH,EAAA,OA2LAgC,GAAA,SAAArD,EAAA+B,GACA,GAAA2B,GACAC,EAAAV,EAAAjD,GACAkD,EAAAS,EAAA,EA2BA,OAzBA3D,GAAA2D,EAAA,GAEAT,IACAA,EAAAnD,EAAAmD,EAAAnB,GACA2B,EAAAd,EAAAM,IAIAA,EAEAlD,EADA0D,GAAAA,EAAA3D,UACA2D,EAAA3D,UAAAC,EAAAuC,EAAAR,IAEAhC,EAAAC,EAAA+B,IAGA/B,EAAAD,EAAAC,EAAA+B,GACA4B,EAAAV,EAAAjD,GACAkD,EAAAS,EAAA,GACA3D,EAAA2D,EAAA,GACAT,IACAQ,EAAAd,EAAAM,MAMAU,EAAAV,EAAAA,EAAA,IAAAlD,EAAAA,EACA6D,EAAA7D,EACA8D,GAAAZ,EACAa,EAAAL,IAUAJ,GACA/D,QAAA,SAAAS,GACA,MAAA8B,GAAA9B,IAEAgE,QAAA,SAAAhE,GACA,GAAAiE,GAAAtB,EAAA3C,EACA,OAAA,mBAAAiE,GACAA,EAEAtB,EAAA3C,OAGAkE,OAAA,SAAAlE,GACA,OACAmE,GAAAnE,EACAoE,IAAA,GACAJ,QAAArB,EAAA3C,GACAgB,OAAAoC,EAAApD,MAKA+C,EAAA,SAAA/C,EAAAqE,EAAAC,EAAAvC,GACA,GAAAwC,GAAA9B,EAAA+B,EAAAzD,EAAAL,EAGA+D,EAFAxC,KACAyC,QAAAJ,EAOA,IAHAvC,EAAAA,GAAA/B,EAGA,cAAA0E,GAAA,aAAAA,EAAA,CAKA,IADAL,GAAAA,EAAAlD,QAAAmD,EAAAnD,QAAA,UAAA,UAAA,UAAAkD,EACA3D,EAAA,EAAAA,EAAA2D,EAAAlD,OAAAT,GAAA,EAKA,GAJAK,EAAAsC,EAAAgB,EAAA3D,GAAAqB,GACAU,EAAA1B,EAAA6C,EAGA,YAAAnB,EACAR,EAAAvB,GAAA4C,EAAA/D,QAAAS,OACA,IAAA,YAAAyC,EAEAR,EAAAvB,GAAA4C,EAAAU,QAAAhE,GACAyE,GAAA,MACA,IAAA,WAAAhC,EAEA8B,EAAAtC,EAAAvB,GAAA4C,EAAAY,OAAAlE,OACA,IAAAN,EAAAiD,EAAAF,IACA/C,EAAAmD,EAAAJ,IACA/C,EAAAoD,EAAAL,GACAR,EAAAvB,GAAAkC,EAAAH,OACA,CAAA,IAAA1B,EAAAgD,EAIA,KAAA,IAAAf,OAAAhD,EAAA,YAAAyC,EAHA1B,GAAAgD,EAAAY,KAAA5D,EAAA8C,EAAA/B,EAAAC,GAAA,GAAAS,EAAAC,OACAR,EAAAvB,GAAAiC,EAAAF,GAMA+B,EAAAF,EAAAA,EAAAhC,MAAAK,EAAA3C,GAAAiC,GAAA2C,OAEA5E,IAIAuE,GAAAA,EAAAP,UAAAvE,GACA8E,EAAAP,UAAArB,EAAA3C,GACA2C,EAAA3C,GAAAuE,EAAAP,QACAQ,IAAA/E,GAAAgF,IAEA9B,EAAA3C,GAAAwE,QAGAxE,KAGA2C,EAAA3C,GAAAsE,IAIAhF,EAAAC,EAAA8C,EAAA,SAAAgC,EAAAC,EAAAvC,EAAAC,EAAA6C,GACA,GAAA,gBAAAR,GACA,MAAAf,GAAAe,GAEAf,EAAAe,GAAAC,GAMA1B,EAAAS,EAAAgB,EAAAC,GAAAV,EACA,KAAAS,EAAA3C,OAAA,CAMA,GAJAV,EAAAqD,EACArD,EAAAqD,MACAhC,EAAArB,EAAAqD,KAAArD,EAAAsD,WAEAA,EACA,MAGAA,GAAA5C,QAGA2C,EAAAC,EACAA,EAAAvC,EACAA,EAAA,MAEAsC,EAAA5E,EA6BA,MAxBA6E,GAAAA,GAAA,aAIA,kBAAAvC,KACAA,EAAAC,EACAA,EAAA6C,GAIA7C,EACAe,EAAAtD,EAAA4E,EAAAC,EAAAvC,GAQA+C,WAAA,WACA/B,EAAAtD,EAAA4E,EAAAC,EAAAvC,IACA,GAGAM,GAOAA,EAAArB,OAAA,SAAA+D,GACA,MAAA1C,GAAA0C,IAMAzF,EAAA0F,SAAArC,EAEAnD,EAAA,SAAAQ,EAAAqE,EAAAC,GACA,GAAA,gBAAAtE,GACA,KAAA,IAAAgD,OAAA,4DAIAqB,GAAA3C,SAIA4C,EAAAD,EACAA,MAGA3E,EAAAiD,EAAA3C,IAAAN,EAAAmD,EAAA7C,KACA6C,EAAA7C,IAAAA,EAAAqE,EAAAC,KAIA9E,EAAAyF,KACAC,QAAA,MAIA1F,EAAA,gBAAA,cCvaAA,EAAA,wBAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,yBAEAC,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAI,QAEAJ,KAAAK,MAAAC,GAAA,SAAAN,KAAAI,OAAAJ,OASAO,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAIAI,QACAC,UAAA,gBAYAC,aAAA,SAAAvC,GACA2B,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QASAW,gBAAA,WACA,OAOAC,gBAAA,WACA,MAAAjB,MAAAkB,UACA,0BAAAlB,KAAAkB,UAAA,YAEA,IASAC,cAAA,WACA,GAAAC,GAAApB,KAAAoB,QACAC,EAAAnB,EAAAC,QAAA,OAAAmB,QAAA,oBAIA,OAHAD,GAAAE,IAAA,OAAAvB,KAAAvB,KACA2C,GAAA,WAEAA,GAQAI,UAAA,WACA,GAAA,IAAAxB,KAAAyB,IAAA,CACA,GAAAC,GAAAxB,EAAAC,QAAA,OAAAmB,QAAA,gBACA,OAAAtB,MAAAyB,IAAAC,EAAAH,IAAA,MAEA,MAAA,KASAI,aAAA,WACA,MAAA,IAAA3B,KAAAyB,IACA,SAEA,SAUAG,eAAA,WACA,MAAA5B,MAAA6B,SACA,WAEA,OAQA,OAAApC,KC3HA3F,EAAA,kBAAA,sBAAA,SAAAgI,GACA,GAAArC,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACAmC,UAAAF,EAQAG,OAAA,WACAzC,OAAAQ,KAAAkC,IAAAC,KAAA,WAAAzB,WAIA,OAAAjB,KChBA3F,EAAA,2BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,OACAC,SAAA,oCAEAC,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAAI,OAAAJ,MACAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAAI,OAAAJ,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAAoC,WAAApC,OASAgB,gBAAA,WACA,GAAAqB,GAAArC,IACA,QAQAsC,cAAA,WAMA,GALAD,EAAAE,aACAvC,KAAAuC,aAAA,gBAAAF,EAAAE,aAAA,iBAEAvC,KAAAuC,aAAA,GAEArC,EAAAC,QAAA,OAAAmB,QAAA,cAAA,WACA,GAAAxB,GAAAI,EAAAC,QAAA,OAAAmB,QAAA,eAAA,2CAEA,IAAAxB,GAAAI,EAAAC,QAAA,OAAAmB,QAAA,eAAA,qCAEA,OAAAxB,GAAAE,OASAwC,cAAA,WACA,MAAAtC,GAAAC,QAAA,OAAAmB,QAAA,cAAA,SACA,WAEA,IASAmB,kBAAA,WACA,GAAAvC,EAAAC,QAAA,OAAAmB,QAAA,cAAA,SAIA,MAAA,EAHA,IAAAoB,GAAAxC,EAAAC,QAAA,OAAAmB,QAAA,eAAA,mCACA,OAAAoB,GAAA1C,SAQAiC,OAAA,WACAzC,OAAAQ,KAAAkC,IAAAC,KAAA,aAQAvB,QACA+B,iBAAA,eACAC,qBAAA,oBAWAC,aAAA,SAAAtE,GACA2B,EAAAC,QAAA,OAAAY,QAAA,gBAAAxC,IAWAuE,iBAAA,SAAAvE,GACA2B,EAAAC,QAAA,OAAAY,QAAA,oBAAAxC,IAGA6D,WAAA,SAAAW,GACAvD,OAAAQ,KAAAkC,IAAAC,KAAA,qBAAAa,OAAA,UAAAC,MAAA,GAAA,OAKA,OAAAxD,KCrHA3F,EAAA,gCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,OACAC,SAAA,8BAEAC,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAAI,OAAAJ,OASAgB,gBAAA,WAEA,OAOAwB,cAAA,WACA,MAAAtC,GAAAC,QAAA,OAAAmB,QAAA,cAAA,SACA,WAEA,MAUAV,QACAsC,wBAAA,mBAWAC,gBAAA,SAAA5E,GACA,GAAA6E,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBACA9B,QAAA4D,GAAAC,YAAA,oBAIA,OAAA5D,KCzDA3F,EAAA,oBAAA,iBAAA,wBAAA,8BAAA,SAAAwJ,EAAAC,EAAAC,GACA,GAAA/D,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,sBAEA4D,SAEAC,KAAA,eAEAC,QAAA,kBACAC,iBAAA,0BASAtD,SAAA,WAEA,GAAAuD,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,uBAEAtB,MAAA2D,KAAAI,KAAA,GAAAT,IAAAU,WAAAF,KACA9D,KAAA4D,QAAAG,KAAA,GAAAR,IACAvD,KAAA6D,iBAAAE,KAAA,GAAAP,KAGA5C,QACAqD,iBAAA,aAGAC,UAAA,SAAA3F,MAMA,OAAAkB,KCtCA3F,EAAA,yBAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,uBAGA,OAAAL,KCFA3F,EAAA,2BAAA,mBAAA,uBAAA,SAAAqK,EAAAC,GAEA,GAAA3E,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,kBAEA4D,SACAW,IAAA,iBACAC,UAAA,qBACAC,OAAA,sBAGAxE,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAwE,kBAGAvC,OAAA,WACAjC,KAAAqE,IAAAN,KAAA,GAAAI,GAEA,IAAAM,GAAAvE,EAAAC,QAAA,OAAAmB,QAAA,iBACAoD,EAAAD,EAAAlD,IAAA,YAEAoD,EAAAzE,EAAAC,QAAA,SAAAmB,QAAA,gBACAtB,MAAAsE,UAAAP,KAAA,GAAAY,IAAAtE,MAAAqE,KAEA1E,KAAAwE,mBAGAA,gBAAA,WACA,GAAAnD,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACAsD,EAAAvD,EAAAE,IAAA,oBAAAnH,KAAAiH,EACArB,MAAAuE,OAAAR,KAAAa,KAIA,OAAAnF,KClCA3F,EAAA,oBAAA,WAEA,GAAA2F,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,gBACA+E,UAAA,eACAC,WAAA,EAEAC,aAAA,EACAC,YAAA,EAEAtB,SACAuB,WAAA,uBACAC,KAAA,gBACAC,YAAA,yBAGApF,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAI,QACAF,EAAAC,QAAA,OAAAiF,MAAA,aAAApF,KAAAqF,UAAArF,MAKAR,OAAA8F,QAAAhF,GAAA,UAAAiF,QAAAvF,MAAAA,KAAAwF,mBACAxF,KAAAC,SAAAC,EAAAC,QAAA,UAAA,cAAAH,KAAAyF,wBACAzF,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAA0F,qBACA1F,KAAAC,SAAAC,EAAAC,QAAA,UAAA,eAAAH,KAAAyF,wBACAzF,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAA0F,qBAKAxF,EAAAC,QAAA,OAAAiF,MAAA,iBAAApF,KAAA2F,cAAA3F,OAGAiC,OAAA,WACA/B,EAAAC,QAAA,QAAAY,QAAA,YAAAf,OAGAO,SAAA,WACA,GAAAc,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACAsE,EAAAvE,EAAAE,IAAA,sBAAAnH,KAAAiH,EACArB,MAAAkF,KAAAnB,KAAA6B,EAEA,IAAAC,GAAAxE,EAAAE,IAAA,qBAAAnH,KAAAiH,EACArB,MAAAiF,WAAAlB,KAAA8B,EAEA,IAAAC,GAAAzE,EAAAE,IAAA,sBAAAnH,KAAAiH,EACArB,MAAAmF,YAAApB,KAAA+B,GAEA5F,EAAAC,QAAA,QAAAY,QAAA,gBAGAsE,UAAA,WACA,MAAA7F,QAAAQ,KAAAkC,IAAA6D,UAGAC,SAAA,WACAhG,KAAAiG,uBAGAC,gBAAA,WACA1G,OAAA8F,QAAAa,IAAA,SAAAnG,KAAAoG,SAGAH,oBAAA,WACAjG,KAAAqG,aAAArG,KAAAiF,WAAA/C,IACAlC,KAAAqG,aAAArG,KAAAmF,YAAAjD,IACAlC,KAAA0F,oBAAA1F,OAGAwF,kBAAA,SAAAjH,GACA,GAAAgH,GAAA,EAAAhH,EAAA+H,KAAAf,QAAAvF,KAEAuG,EAAAhB,EAAAN,WAAA/C,GACAsE,EAAAjB,EAAAJ,YAAAjD,EAEAqD,GAAAc,aAAAE,EAAAhB,GACAA,EAAAc,aAAAG,EAAAjB,GAEAA,EAAAE,uBAAAF,GAKAkB,aAAAlB,EAAAT,WAIAS,EAAAT,UAAA1F,WAAAmG,EAAAG,oBAAA,IAAAH,IAGAc,aAAA,SAAAnE,EAAAqD,GACA,GAAAmB,GAAAlH,OAAA0C,GAAAyE,SAAAD,IACAE,EAAApH,OAAA8F,QAAAuB,SACAA,EAAAD,EAAAF,CACAlH,QAAA0C,GAAA2E,OAAAA,IAGAnB,oBAAA,SAAAH,GACAA,EAAAA,GAAAvF,IAEA,IAAAgF,GAAAxF,OAAA+F,EAAAN,WAAA/C,IAAAyE,SACAG,EAAA9B,EAAA0B,IACAK,EAAA/B,EAAAgC,IAEAxH,QAAA+F,EAAAN,WAAA/C,IAAA+E,KAAAC,SAAA,QAAAF,KAAAD,EAAAL,IAAAI,GAAA,IAAA9B,GAAAxF,OAAA+F,EAAAN,WAAA/C,IAAAyE,SAEA5B,EAAAvF,OAAA+F,EAAAJ,YAAAjD,IAAAyE,SACAQ,EAAApC,EAAA2B,IACAU,EAAArC,EAAAiC,IAEAxH,QAAA+F,EAAAJ,YAAAjD,IAAA+E,KAAAC,SAAA,QAAAF,KAAAI,EAAAV,IAAAS,KAGA1B,uBAAA,SAAAF,GACAA,EAAAA,GAAAvF,IAEA,IAGAqH,IAHA7H,OAAA+F,EAAAN,WAAA/C,IAAAyE,SACAnH,OAAA+F,EAAAJ,YAAAjD,IAAAyE,SAEAnH,OAAA,YAAA6H,YAEA7H,QAAA+F,EAAAN,WAAA/C,IAAA+E,KAAAC,SAAA,WAAAF,KAAA,EAAAN,IAAAW,IACA7H,OAAA+F,EAAAJ,YAAAjD,IAAA+E,KAAAC,SAAA,WAAAR,IAAAW,EAAAC,MAAA,EAAAN,KAAA,UAGArB,cAAA,WACA3F,KAAAwF,sBAKA,OAAA/F,KC3IA3F,EAAA,8BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,4BAQAS,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAIAI,QACAC,UAAA,gBAYAC,aAAA,SAAAvC,GACA2B,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QASAW,gBAAA,WACA,OAOAC,gBAAA,WACA,MAAAjB,MAAAuH,eACA,0BAAAvH,KAAAuH,eAAA,YAEA,IASApG,cAAA,WACA,GAAAC,GAAApB,KAAAoB,QACAC,EAAAnB,EAAAC,QAAA,OAAAmB,QAAA,oBAIA,OAHAD,GAAAE,IAAA,OAAAvB,KAAAvB,KACA2C,GAAA,WAEAA,GAQAI,UAAA,WACA,GAAA,IAAAxB,KAAAyB,IAAA,CACA,GAAAC,GAAAxB,EAAAC,QAAA,OAAAmB,QAAA,gBACA,OAAAtB,MAAAyB,IAAAC,EAAAH,IAAA,MAEA,MAAA,KASAI,aAAA,WACA,MAAA,IAAA3B,KAAAyB,IACA,SAEA,SAUAG,eAAA,WACA,MAAA5B,MAAA6B,SACA,WAEA,OAOA,OAAApC,KCnHA3F,EAAA,wBAAA,4BAAA,SAAA0N,GACA,GAAA/H,GAAAC,WAAA+H,cAAA7H,QACAC,QAAA,MACAC,SAAA,uBACAkC,UAAAwF,EAEAzH,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAAI,OAAAJ,OAGA0H,WAAA,SAAAC,EAAA3F,GACAxC,OAAAmI,EAAAzF,IAAAC,KAAA,cAAAyF,OAAA5F,EAAAE,KAGAlB,gBAAA,WACA,OAOAwB,cAAA,WACA,MAAAtC,GAAAC,QAAA,OAAAmB,QAAA,cAAA,SACA,WAEA,MAMAV,QACAiH,oBAAA,gBAWAhF,aAAA,SAAAtE,GACA2B,EAAAC,QAAA,OAAAY,QAAA,gBAAAxC,EACA,IAAA6E,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBACA9B,QAAA4D,GAAAC,YAAA,oBAIA,OAAA5D,KCnDA3F,EAAA,mCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,kBAGA,OAAAL,KCPA3F,EAAA,oBAAA,iCAAA,SAAAgO,GAEA,GAAArI,GAAAC,WAAA+D,WAAA7D,QACAE,SAAA,kBAEA4D,SACAqE,OAAA,oBACAC,QAAA,qBACAC,OAAA,qBAGAlI,WAAA,WACAG,EAAAC,QAAA,OAAAiF,MAAA,eAAApF,KAAAkI,MAAAlI,MACAE,EAAAC,QAAA,UAAAiF,MAAA,qBAAApF,KAAAmI,YAAAnI,MACAE,EAAAC,QAAA,UAAAiF,MAAA,sBAAApF,KAAAoI,aAAApI,OAGAiC,OAAA,WACA/B,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAQ,KAAAkC,IAAA6D,SAAAsC,oBAIAF,YAAA,SAAAG,EAAAhC,GACA,GAAAiC,GAAArI,EAAAC,QAAA,OAAAmB,QAAA,aAAAgH,GACAE,EAAAD,EAAAhH,IAAA,kBAAAnH,KAAAmO,EAAAjC,GACAmC,EAAAF,EAAAhH,IAAA,iBAAAnH,KAAAmO,EAAAjC,GACAoC,EAAAH,EAAAhH,IAAA,iBAAAnH,KAAAmO,EAAAjC,EAEAtG,MAAA+H,OAAAhE,KAAA0E,GACAzI,KAAAgI,QAAAjE,KAAAyE,GACAxI,KAAAiI,OAAAlE,KAAA2E,IAIAN,aAAA,WACApI,KAAA+H,OAAAY,QACA3I,KAAAgI,QAAAW,QACA3I,KAAAiI,OAAAU,SAGAT,MAAA,WACA,MAAA1I,QAAAQ,KAAAkC,IAAA6D,UAGAnF,QACAgI,0BAAA,qBAGAC,kBAAA,WACA3I,EAAAC,QAAA,OAAAY,QAAA,4BAKA,OAAAtB,KCvDA3F,EAAA,mCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,KAEAC,SAAA,2BAEAoG,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,gBAAAnG,KAAAI,SAGAL,WAAA,WACAC,KAAAK,MAAAC,GAAA,gBAAAN,KAAAI,OAAAJ,OAGAY,QACAC,UAAA,YAGAiI,SAAA,SAAAvK,GACA2B,EAAAC,QAAA,aAAAY,QAAA,iBAAAxC,EAAAyB,KAAAK,QAGAW,gBAAA,WACA,OACAG,cAAA,WACA,GAAAnB,KAAA+I,OACA,MAAA,aAOA,OAAAtJ,KCjCA3F,EAAA,qCAAA,iCAAA,SAAAkP,GACA,GAAAvJ,GAAAC,WAAA+H,cAAA7H,QACAC,QAAA,MACAmC,UAAAgH,EACAlJ,SAAA,8BAEAC,WAAA,WACAC,KAAAgE,WAAAhE,KAAAK,MAAAkB,IAAA,QACAvB,KAAAK,MAAAC,GAAA,SAAAN,KAAAI,OAAAJ,MACA,UAAAA,KAAAK,MAAAkB,IAAA,OAMA2E,gBAAA,WAEA,GADAlG,KAAAK,MAAA8F,IAAA,SAAAnG,KAAAI,QACA,UAAAJ,KAAAK,MAAAkB,IAAA,MAAA,CACA,GAAA0H,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBACA2H,GAAA9C,IAAA,MAAAnG,KAAAkJ,aAAAlJ,QAIA0H,WAAA,SAAAC,EAAA3F,GACAxC,OAAAmI,EAAAzF,IAAAC,KAAA,eAAAyF,OAAA5F,EAAAE,KAGAgH,aAAA,WACA,GAAAD,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBACAtB,MAAAK,MAAA8I,IAAA,OAAAF,KAIA,OAAAxJ,KCjCA3F,EAAA,8BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACAP,QAAA,EACAQ,SAAA,IAIA,OAAAlJ,KCRAvG,EAAA,iCAAA,4BAAA,SAAA0P,GACA,GAAAxF,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAmJ,GAEA,OAAAxF,KCJAlK,EAAA,qCAAA,oCAAA,iCAAA,SAAA4P,EAAAC,GACA,GAAAlK,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACAC,SAAA,8BACAkC,UAAA0H,EAEA3J,WAAA,WACAG,EAAAC,QAAA,aAAAiF,MAAA,WAAApF,KAAA4J,iBAAA5J,OAGA6J,SAAA,SAAAC,GACA,GAAAC,GAAA7J,EAAAC,QAAA,aAAAmB,QAAA,kBACA0I,EAAAD,EAAAE,OAAAC,eAAA,GACAlK,MAAAgE,WAAA,GAAA2F,GAAAK,EACA,IAAA3H,GAAArC,KACAmK,EAAAL,EAAAvI,IAAA,iBACA,iBAAA4I,KACA,mBAAAA,GAAAZ,SACAa,EAAAC,KAAAF,EAAAZ,QAAA,SAAAA,GACAlH,EAAA2B,WAAAsG,OAAAf,KAIA,mBAAAY,GAAAI,SACAH,EAAAC,KAAAN,EAAAS,OAAA,SAAAC,IACA,GAAAN,EAAAI,QAAArO,QAAAuO,EAAAlJ,IAAA,QAEAc,EAAA2B,WAAA0G,IAAAD,MAMAzK,KAAAI,UAGAwJ,iBAAA,WACA,MAAA5J,QAIA,OAAAP,KCnCA3F,EAAA,qBAAA,0BAAA,iBAAA,uBAAA,mBAAA,qCAAA,SAAA2O,EAAAkC,EAAAC,EAAAC,EAAAC,GACA,GAAArL,GAAAC,WAAA+D,WAAA7D,QACAE,SAAA,mBACAoC,GAAA,cAEAwB,SACAqE,OAAA,aACA1K,KAAA,WACA0N,WAAA,kBACAxC,OAAA,aACAyC,iBAAA,uBAGAjL,WAAA,WAEAG,EAAAC,QAAA,OAAAiF,MAAA,gBAAApF,KAAAiL,aAAAjL,MAEAE,EAAAC,QAAA,OAAAiF,MAAA,kBAAApF,KAAAkL,eAAAlL,MAEAA,KAAAI,QACA,IAAA+K,GAAAjL,EAAAC,QAAA,aAAAmB,QAAA,kBACA8J,EAAAD,EAAAE,OACArL,MAAAgL,iBAAAjH,KAAA,GAAA+G,IAAA9G,WAAAoH,KAEApL,KAAA+H,OAAAhE,KAAA,GAAA0E,IAEAzI,KAAA3C,KAAA0G,KAAA,GAAA4G,GAEA,IAAA7G,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,uBACAtB,MAAA+K,WAAAhH,KAAA,GAAA6G,IAAA5G,WAAAF,KAEA9D,KAAAuI,OAAAxE,KAAA,GAAA8G,KAKAtK,SAAA,aAIA0K,aAAA,WACA,MAAAjL,MAAAkC,IAGAgJ,eAAA,WACA,MAAAlL,OAIAY,QACA0K,wBAAA,aACAC,0BAAA,eACAC,yBAAA,eAWAC,WAAA,SAAAlN,GACA2B,EAAAC,QAAA,OAAAY,QAAA,mBAAAxC,IASAmN,YAAA,WACAxL,EAAAC,QAAA,OAAAY,QAAA,sBAUA4K,aAAA,SAAApN,GACA2B,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,KAKA,OAAAkB,KCvGA3F,EAAA,4BAAA,WACA,MAAA4F,YAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,WAAA,SAAAH,KAAA4L,cAGAA,YAAA,SAAAvL,EAAAwL,GAEA,GAAA5L,GAAAI,EAAAkB,IAAA,UAAAuK,MAGA9L,MAAAC,SAAAC,EAAAC,QAAA,gBAAAF,GAAA,iBAAAD,KAAA+L,eACA/L,KAAAC,SAAAC,EAAAC,QAAA,iBAAAF,GAAA,iBAAAD,KAAA+L,eAEA/L,KAAAC,SAAAC,EAAAC,QAAA,gBAAAE,EAAAkB,IAAA,SAAA,cAAAvB,KAAAgM,YAEA3L,EAAAJ,SAAAC,EAAAC,QAAA,kBAAA,aAAAH,KAAAiM,UAAA5L,GAGAH,EAAAC,QAAA,kBAAAY,QAAA,aAAA8K,IAGAG,WAAA,SAAAzN,EAAAuL,EAAA+B,EAAAK,GACA1M,OAAAjB,EAAA4N,YAAAC,SAAA,QACAlM,EAAAC,QAAA,kBAAAY,QAAA,aAAA8K,IAGAE,cAAA,SAAAF,EAAA/B,GACA5J,EAAAC,QAAA,kBAAAY,QAAA,aAAA8K,IAGAI,UAAA,SAAAJ,GAEA,GAAAQ,GAAArM,KAAAuB,IAAA,UAEA+E,GACAgG,YAAAT,EAAAtK,IAAA8K,EAAAP,QACAS,OAAAF,EAAAE,OACAC,SAAAH,EAAA,SAAAA,EAAAG,SAAAC,QAAAC,WAIArK,EAAArC,IACAR,QAAAmN,KAAAC,QAAAtG,EAAA,SAAAuG,GACA,GAAAA,GAAAC,KAAAC,MAAAF,EAEA,YAAAxK,EAAAd,IAAA,SACAsK,EAAA1C,IAAA9G,EAAAd,IAAA,QAAAsL,EAAA7P,OAGA,UAAAqF,EAAAd,IAAA,UACAc,EAAA8G,IAAA,UAAA0D,EAAAG,SACA3K,EAAAtB,QAAA,oBC7CAjH,EAAA,4BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,mBAAAH,KAAAkN,iBACAlN,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAA0L,aACA1L,KAAAC,SAAAC,EAAAC,QAAA,OAAA,yBAAAH,KAAAmN,kBAGAjN,EAAAC,QAAA,OAAAiF,MAAA,cAAApF,KAAAyL,WAAAzL,MACAE,EAAAC,QAAA,OAAAiF,MAAA,eAAApF,KAAA0L,YAAA1L,MAMAE,EAAAC,QAAA,UAAAiF,MAAA,qBAAApF,KAAAoN,mBAAApN,MAGAE,EAAAC,QAAA,UAAAiF,MAAA,gBAAApF,KAAAqN,aAAArN,MAEAE,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAAsN,YAAAtN,MAEAE,EAAAC,QAAA,UAAAiF,MAAA,mBAAApF,KAAAuN,kBAAAvN,MAMAA,KAAAwN,mBAMAxN,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAyN,gBAQA/B,YAAA,WAEA,GAAAgC,GAAAxN,EAAAC,QAAA,OAAAmB,QAAA,oBACA,KAAAoM,GAAA1N,KAAAuN,oBACA,OAAA,CAIArN,GAAAC,QAAA,UAAAuN,EAAAnM,IAAA,OAAAR,QAAA,sBAKAb,EAAAC,QAAA,UAAAY,QAAA,sBACAb,EAAAC,QAAA,UAAAY,QAAA,gBAGAb,EAAAC,QAAA,UAAAmB,QAAA,sBAGA,IAAA8B,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBACA9B,QAAA4D,GAAAgJ,SAAA,oBAAAuB,YAAA,oBACAnO,OAAA4D,GAAAuK,YAAA,eAGA,IAAAC,GAAA5N,KAAAoN,qBAGAS,EAAA3N,EAAAC,QAAA,OAAAmB,QAAA,eACA9B,QAAAqO,GAAA5G,KAAAK,MAAAsG,GAGA,IAAAvL,GAAArC,IAUAA,MAAA8N,oBAAAC,YAAA,WACAH,GAAApO,OAAAqO,GAAA5G,IAAA,WACA+G,cAAA3L,EAAAyL,qBACA5N,EAAAC,QAAA,OAAAmB,QAAA,wBAAA,GACApB,EAAAC,QAAA,UAAAY,QAAA,YAGA,MASAmM,gBAAA,SAAA3O,GACA,GAAA+J,GAAA9I,OAAAjB,EAAA0P,QAAA3H,KAAA,WACAtG,MAAAyL,WAAAnD,IAWAmD,WAAA,SAAAnD,EAAAhC,GACA,GAAAtG,KAAAuN,oBACA,OAAA,CAWA,IAPAjH,EAAAA,MAOA,mBAAAA,GAAAjG,MAAA,CACA,GAAAgB,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACA4M,EAAA7M,EAAAE,IAAA,KACArB,GAAAC,QAAA+N,GAAA5M,QAAA,oBACAgF,EAAAjG,MAAA8I,IAAA,cAAA,GACAnJ,KAAA6L,UAAAvF,EAAAjG,MAIAH,EAAAC,QAAA,UAAAmB,QAAA,qBAAAgH,EAAAhC,GACApG,EAAAC,QAAA,UAAAY,QAAA,cAGA,IAAAqC,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBACA9B,QAAA4D,GAAAgJ,SAAA,oBAAAuB,YAAA,mBAGA,IAAAE,GAAA3N,EAAAC,QAAA,OAAAmB,QAAA,eACA9B,QAAAqO,GAAA5G,KAAAK,MAAA,OAGA,IAAAjF,GAAArC,IAWAA,MAAAmO,UAAA,EAEAnO,KAAAoO,mBAAAL,YAAA,WACA,OAAAvO,OAAAqO,GAAA5G,IAAA,WACA+G,cAAA3L,EAAA+L,oBACA/L,EAAA8L,WACA9L,EAAAgM,cACAhM,EAAA8L,UAAA,EACAjO,EAAAC,QAAA,OAAAmB,QAAA,uBAAAgH,GACA9I,OAAAqO,GAAAxG,UAAA,GACAnH,EAAAC,QAAA,UAAAY,QAAA,aAGA,MAQAoM,iBAAA,WAEA,GAAAU,GAAA3N,EAAAC,QAAA,OAAAmB,QAAA,eAEA9B,QAAAqO,GAAAxK,YAAA,qBAQAgL,YAAA,WAEA,GAAAC,GAAApO,EAAAC,QAAA,UAAAmB,QAAA,eAEA9B,QAAA8O,GAAAC,SAaAnB,mBAAA,WACA,GAAAhK,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,iBACAkN,EAAAhP,OAAA4D,GAAAqL,QAAA,GACA,OAAA,IAAAD,EAAA,MASAjB,kBAAA,WACA,MAAA,IAAA1P,OAAA6Q,KAAA1O,KAAAwN,iBAAA/R,QAcA4R,aAAA,SAAAsB,GACA3O,KAAAwN,gBAAAmB,IAAA,EAKA3O,KAAA6L,UAAA1C,IAAA,kBAAA,IAUAmE,YAAA,SAAAqB,SACA3O,MAAAwN,gBAAAmB,GAIA3O,KAAAuN,qBAEAvN,KAAA6L,UAAA1C,IAAA,kBAAA,IAUAsE,cAAA,WACAO,cAAAhO,KAAAoO,qBAGAQ,gBAAA,WACA,MAAA5O,MAAAwN,kBAIA,OAAAP,KCpRAnT,EAAA,oCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,iCAEAC,WAAA,WACAC,KAAAK,OAEAL,KAAAK,MAAAC,GAAA,wBAAAN,KAAAI,OAAAJ,OAUAO,SAAA,WAEAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,KAEAN,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAA6O,YAAA7O,MACAE,EAAAC,QAAA,UAAAiF,MAAA,cAAApF,KAAA8O,WAAA9O,MACAE,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAAkI,MAAAlI,OAGAkG,gBAAA,WACAlG,KAAAK,OACAL,KAAAK,MAAA8F,IAAA,wBAAAnG,KAAAI,SAIAQ,QACAmO,mBAAA,oBACAC,mBAAA,eACAC,cAAA,YAWAC,aAAA,SAAA3Q,GACA,GAAAmP,GAAAxN,EAAAC,QAAA,OAAAmB,QAAA,oBACApB,GAAAC,QAAA,UAAAuN,EAAAnM,IAAA,OAAAR,QAAA,gBAAAxC,EAAA0P,OAAAjR,MAAAuB,IAUA4Q,kBAAA,SAAA5Q,GACA,IAAAA,EAAA6Q,UACA7Q,EAAA8Q,WAAA,EACArP,KAAAkP,aAAA3Q,KAYAsQ,YAAA,WACA,GAAAP,GAAA9O,OAAAQ,KAAAkC,IAAAC,KAAA,aACA,KAAA3C,OAAA8P,KAAAhB,EAAAiB,SACAjB,EAAAiB,IAAA,IACAjB,EAAAvN,QAAA,SACAuN,EAAAC,UAUAO,WAAA,WACAtP,OAAAQ,KAAAkC,IAAAC,KAAA,cAAAqN,QASAtH,MAAA,WACA,MAAA1I,QAAAQ,KAAAkC,IAAAC,KAAA,eAGAsN,SAAA,WACAvP,EAAAC,QAAA,UAAAY,QAAA,mBAGAC,gBAAA,WACA,OACAY,eAAA,WAEA,MAAA5B,MAAA0P,eACA,WAEA,OAOA,OAAAjQ,KC7HA3F,EAAA,oCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,kBAGA,OAAAL,KAEA3F,EAAA,0BAAA,iCAAA,kCAAA,SAAA6V,EAAAC,GCfA,GAAAvP,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACAuG,cAAA,SAAAvJ,GACA,MAAA,IAAAqJ,GAAArJ,IAGAwJ,cAAA,SAAAxJ,GACA,MAAA,IAAAsJ,GAAAtJ,MAKA,OAAAjG,KCLAvG,EAAA,+BAAA,0BAAA,SAAAiW,GACA,GAAA/L,GAAAoF,SAAAK,WAAA7J,QACAS,MAAA0P,GAEA,OAAA/L,KAEAlK,EAAA,qCAAA,WCbA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,+BAEAS,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAGAI,QACAoP,2BAAA,qBAGAC,kBAAA,SAAA/N,GACAhC,EAAAC,QAAA,mBAAAY,QAAA,0BAAAmB,EAAAlC,KAAAK,SAIA,OAAAZ,KAGA3F,EAAA,sCAAA,WCtBA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,sCAEAS,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,OAIA,OAAAf,KAEA3F,EAAA,yCAAA,kCAAA,oCAAA,SAAAoW,EAAAC,GCbA,GAAA1Q,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACAmC,UAAAkO,EACAE,UAAAD,EAEAE,YAAA,0BAEAtQ,WAAA,WACAG,EAAAC,QAAA,OAAAiF,MAAA,qBAAApF,KAAAsQ,kBAAAtQ,OAGAiC,OAAA,WAEAjC,KAAAQ,IAAAhB,OAAAQ,KAAAkC,IAAA6D,SACAvG,OAAAQ,KAAAQ,KAAA2B,KAAA,cAAAzB,SACAV,KAAAW,WAAAX,KAAAQ,IAIAhB,QAAAQ,KAAAkC,IAAAqO,UACAC,YAAA,wCACAC,OAAA,QACAC,UAAA,UACAC,KAAA,SAAApS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,oBAAAxC,EAAAqS,IAGAC,IAAA,SAAAtS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,mBAAA6P,IAGAE,QAAA,SAAAvS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,uBAAA6P,IAGAG,OAAA,SAAAxS,EAAAqS,GACA1Q,EAAAC,QAAA,UAAAmB,QAAA,iBAGA0P,MAAA,SAAAzS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,qBAAA6P,IAIAK,KAAA,SAAA1S,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,oBAAA6P,MAIApR,OAAAQ,KAAAkC,IAAA6D,SAAAmL,WACAC,QAAA,GACAC,kBAAA,2BACAC,SAAA,WACAC,kBAAA,EACAC,MAAA,EAAA,GACAb,UAAA,UAEAD,OAAA,SAAAlS,GACA,GAAAkQ,GAAAjP,OAAAjB,EAAA0P,QAAAlI,SAAA0I,QACA5H,EAAArH,OAAAjB,EAAA0P,QAAAlI,SAAAc,SACA2K,EAAAhS,OAAAjB,EAAA0P,QAAAlI,SAAAsF,QACArE,EAAAyH,EAAA,EACA/H,EAAAG,EAAA,CAGA,OAFArH,QAAAQ,MAAAkR,UAAA,SAAA,YAAAxK,IAAAA,EAAAM,KAAAA,IACAxH,OAAAgS,GAAAC,OAAA,KACAD,GAGAR,MAAA,SAAAzS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,yBAAAf,KAAA4Q,IAEAK,KAAA,SAAA1S,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,wBAAAf,KAAA4Q,OAKAN,kBAAA,WACA,MAAA9Q,QAAAQ,KAAAkC,KAGAwP,WAAA,WACAlS,OAAAQ,KAAAkC,IAAAkK,SAAApM,KAAAqQ,cAGAsB,cAAA,WACA3R,KAAA4R,mBACApS,OAAAQ,KAAAkC,IAAAyL,YAAA3N,KAAAqQ,cAGAuB,gBAAA,WACA,MAAA,IAAA5R,KAAAgE,WAAAvI,SAKA,OAAAgE,KCzFA3F,EAAA,gCAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,UAGA,OAAAS,KCJAvG,EAAA,mCAAA,8BAAA,SAAA+X,GACA,GAAA7N,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAwR,EACAC,WAAA,SAEA,OAAA9N,KAEAlK,EAAA,qCAAA,WCdA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,qCAEAC,WAAA,WACAqK,EAAA2H,QAAA/R,KAAA,UACAE,EAAAC,QAAA,UAAAiF,MAAA,kBAAApF,KAAAgS,eAAAhS,OAGAO,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,KAEAR,KAAAiS,UAAA,CACA,IAAA5P,GAAArC,IAIAE,GAAAC,QAAA,OAAAmB,QAAA,eACA9B,OAAAQ,KAAAkC,IAAAC,KAAA,+BAAA+O,WACAC,QAAA,GACAT,UAAA,UACAU,kBAAA,2BACAE,kBAAA,EACAC,MAAA,EAAA,GACAF,SAAA,cAEAZ,OAAA,SAAAlS,GACA,GAAAkQ,GAAAjP,OAAAjB,EAAA0P,QAAAlI,SAAA0I,QACA5H,EAAArH,OAAAjB,EAAA0P,QAAAlI,SAAAc,SACA2K,EAAAhS,OAAAjB,EAAA0P,QAAAlI,SAAAsF,QACArE,EAAAyH,EAAA,EACA/H,EAAAG,EAAA,CAGA,OAFArH,QAAAQ,MAAAkR,UAAA,SAAA,YAAAxK,IAAAA,EAAAM,KAAAA,IACAxH,OAAAgS,GAAAC,OAAA,KACAD,GAGAR,MAAA,SAAAzS,EAAAqS,GACAvO,EAAA4P,UAAA,EACA/R,EAAAC,QAAA,mBAAAY,QAAA,iBAAAf,KAAA4Q,IAGAK,KAAA,SAAA1S,EAAAqS,GACAvO,EAAA4P,UAAA,EACA/R,EAAAC,QAAA,mBAAAY,QAAA,gBAAAf,KAAA4Q,IAGAsB,KAAA,SAAA3T,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAY,QAAA,YAAAf,KAAA4Q,EAAArS,MAGA4T,mBAEA3S,OAAAQ,KAAAkC,IAAAC,KAAA,YAAAoM,MAAA,WACA/O,OAAAQ,MAAAoM,SAAA,YACAoD,KAAA,WACAhQ,OAAAQ,MAAA2N,YAAA,cAKA/M,QACAwR,iBAAA,iBACAC,mBAAA,sBACAC,qBAAA,sBAGAC,eAAA,SAAAhU,GACAyB,KAAAiS,UACA/R,EAAAC,QAAA,UAAAY,QAAA,kBAAAxC,IAIAiU,mBAAA,SAAAjU,GACAiB,OAAAjB,EAAA0P,QAAA7B,SAAA,WACAhN,WAAA,WACAI,OAAAjB,EAAA0P,QAAAN,YAAA,YACA,OAGA8E,oBAAA,SAAAlU,GACA,IAAAA,EAAA6Q,UACApP,KAAAuS,eAAAhU,GACA2B,EAAAC,QAAA,UAAAmB,QAAA,kBAIAN,gBAAA,WACA,OACA0R,iBAAA,WACA,GAAAC,GAAA,GACAtQ,EAAArC,IAQA,OAPAoK,GAAAC,KAAArK,KAAA4S,WAAA,SAAAnU,GACA,GAAAoU,GAAA3S,EAAAC,QAAA,UAAAmB,QAAA,WAAA7C,GACAqU,EAAAD,EAAAtR,IAAA,YACAwR,EAAAF,EAAAtR,IAAA,QACAyR,EAAA9S,EAAAC,QAAA,OAAAmB,QAAA,eAAA,oCACAqR,IAAAK,GAAAvU,GAAAA,EAAAqU,SAAAA,EAAAC,KAAAA,EAAAF,KAAAA,EAAAI,WAAA5Q,EAAA4Q,eAEAN,GAGAM,WAAA,WACA,MAAAjT,MAAA6S,KAAAtR,IAAA,cACA,WAEA,MAMAyQ,eAAA,WACA,MAAAhS,MAAAkC,KAIA,OAAAzC,KAGA3F,EAAA,6CAAA,mCAAA,SAAAoZ,GC1HA,GAAAzT,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACAmC,UAAAkR,EAEAjR,OAAA,WACAzC,OAAAQ,KAAAkC,IAAAC,KAAA,gBAAAzB,SACAR,EAAAC,QAAA,UAAAmB,QAAA,sBAIA,OAAA7B,KAEA3F,EAAA,gCAAA,wCAAA,kCAAA,6CAAA,SAAAqZ,EAAAC,EAAAC,GCXA,GAAA5T,GAAAC,WAAA+D,WAAA7D,QACAE,SAAA,oCAEA4D,SACA4P,QAAA,mCACAC,QAAA,qBACAC,UAAA,wBAGAzT,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,oBAAAH,KAAAyT,kBACAzT,KAAAC,SAAAC,EAAAC,QAAA,UAAA,eAAAH,KAAA0T,uBAEA1T,KAAA2T,gBAAAzT,EAAAC,QAAA,UAAAmB,QAAA,mBACAtB,KAAA4T,kBAAA5T,KAAA2T,gBAEA3T,KAAA6T,2BAAA3T,EAAAC,QAAA,UAAAmB,QAAA,oBACAtB,KAAA8T,oBAAA9T,KAAA6T,4BAIA5R,OAAA,WACA,GAAA8R,GAAA7T,EAAAC,QAAA,UAAAmB,QAAA,cACAtB,MAAAsT,QAAAvP,KAAA,GAAAoP,IAAAnP,WAAA+P,KAEA/T,KAAAuT,QAAAxP,KAAA,GAAAsP,IAAArP,WAAAhE,KAAA4T,qBACA5T,KAAAwT,UAAAzP,KAAA,GAAAsP,IAAArP,WAAAhE,KAAA8T,wBAGA5L,MAAA,WACA,MAAA1I,QAAAQ,KAAAkC,IAAA6D,UAGA0N,iBAAA,SAAAO,GACAhU,KAAAuT,QAAAU,QACAjU,KAAAwT,UAAAS,QACAjU,KAAAgU,0BAAAA,EACAhU,KAAAuT,QAAAxP,KAAA,GAAAsP,IAAArP,WAAAhE,KAAAgU,8BAGAN,sBAAA,WACA1T,KAAAuT,QAAAxP,KAAA,GAAAsP,IAAArP,WAAAhE,KAAA2T,mBACA3T,KAAAwT,UAAAzP,KAAA,GAAAsP,IAAArP,WAAAhE,KAAA6T,gCAKA,OAAApU,KAEA3F,EAAA,4CAAA,WClDA,GAAA2F,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MAEAE,WAAA,SAAAuG,GACAtG,KAAAkU,kBAAArI,UAAAvF,EAAAuF,YAGAsI,aAAA,SAAA9T,GACA,MAAAH,GAAAC,QAAA,OAAAmB,QAAA,uBAAAjB,KAIA,OAAAZ,KAEA3F,EAAA,qCAAA,0CAAA,SAAAsa,GCdA,GAAA3U,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,mDAEA4D,SACA2Q,SAAA,sBAGAtU,WAAA,SAAAuG,GACAtG,KAAAK,MAAAC,GAAA,SAAAN,KAAAI,OAAAJ,MACAA,KAAA6L,UAAAvF,EAAAuF,WAGA3F,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,SAAAnG,KAAAI,SAGAG,SAAA,WACAP,KAAAK,MAAAkB,IAAA,WACAvB,KAAAqU,SAAAtQ,KAAA,GAAAqQ,IAAApQ,WAAAhE,KAAAK,MAAAkB,IAAA,YAAAsK,UAAA7L,KAAA6L,aAEA7L,KAAAqU,SAAA1L,QAGAzI,EAAAC,QAAA,UAAAY,QAAA,sBAAAf,OAGAY,QACA0T,gBAAA,oBAGAC,iBAAA,SAAAhW,GACA2B,EAAAC,QAAA,UAAAY,QAAA,2BAAAxC,EAAAyB,KAAAK,QAGAW,gBAAA,WACA,OACAwT,YAAA,WACA,GAAA,IAAAxU,KAAAyU,MAAA,CACA,GAAAC,GAAAxU,EAAAC,QAAA,OAAAmB,QAAA,eAAA,mDACA,OAAAoT,GAAA1U,MAEA,MAAA,IAIA2U,eAAA,WACA,MAAA3U,MAAA4U,QACA,OAEA,YAOA,OAAAnV,KAEA3F,EAAA,+CAAA,qCAAA,SAAA+a,GC3DA,GAAApV,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACAmC,UAAA6S,EAEA9U,WAAA,SAAAuG,GACAtG,KAAAkU,kBAAArI,UAAAvF,EAAAuF,aAIA,OAAApM,KAEA3F,EAAA,iCAAA,+CAAA,SAAAgb,GCXA,GAAArV,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,wCAEA4D,SACAqR,aAAA,oBACAC,cAAA,sBAGAjV,WAAA,SAAAuG,GACAtG,KAAA6L,UAAAvF,EAAAjG,MACAL,KAAAiV,gBAAA3O,EAAA2O,iBAGA1U,SAAA,WACA,GAAAc,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACA4T,EAAA7T,EAAAE,IAAA,wBAAAnH,KAAAiH,GAAAhB,MAAAL,KAAAK,OAEAL,MAAA+U,aAAAhR,KAAAmR,GACAlV,KAAAgV,cAAAjR,KAAA,GAAA+Q,IAAA9Q,WAAAhE,KAAAiV,gBAAApJ,UAAA7L,KAAA6L,cAGA7K,gBAAA,WACA,OACAmU,iBAAA,WACA,GAAA,mBAAAnV,MAAA6S,KAAA,CACA,GAAAuC,GAAAlV,EAAAC,QAAA,OAAAmB,QAAA,eAAA,8CACA,OAAA8T,GAAApV,MAEA,MAAA,IAIAqV,mBAAA,WACA,GAAAhU,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACAgU,EAAAjU,EAAAE,IAAA,MACAsR,EAAA3S,EAAAC,QAAAmV,GAAAhU,QAAA,WAAAtB,KAAA6S,KACA,OAAAA,GAAAtR,IAAA,gBAMA,OAAA9B,KClCA3F,EAAA,yCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC;AACAC,QAAA,MACAC,SAAA,uCAEAC,WAAA,WACAC,KAAAK,OAEAL,KAAAK,MAAAC,GAAA,wBAAAN,KAAAI,OAAAJ,OAIAkG,gBAAA,WACAlG,KAAAK,OACAL,KAAAK,MAAA8F,IAAA,wBAAAnG,KAAAI,SAIAY,gBAAA,WACA,OACAY,eAAA,WAEA,MAAA5B,MAAA0P,eACA,WAEA,OAOA,OAAAjQ,KChCA3F,EAAA,qCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,qCAEAS,SAAA,WAOA,GANAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,KAEAhB,OAAAQ,KAAAkC,IAAAiQ,mBAEA,aAAAnS,KAAAK,MAAAkB,IAAA,WAAA,CACA,GAAAc,GAAArC,IACAR,QAAAQ,KAAAkC,IAAAgP,WACAC,QAAA,GACAT,UAAA,YACA6E,QAAA,EACA9E,OAAA,QAEAO,MAAA,SAAAzS,EAAAqS,GACAvO,EAAA4P,UAAA,EACA/R,EAAAC,QAAA,oBAAAY,QAAA,iBAAAf,KAAA4Q,IAGAK,KAAA,SAAA1S,EAAAqS,GACAvO,EAAA4P,UAAA,EACA/R,EAAAC,QAAA,oBAAAY,QAAA,gBAAAf,KAAA4Q,QAQAhQ,QACAwR,iBAAA,kBAGAoD,eAAA,SAAAjX,GACAyB,KAAAiS,WACA,aAAAjS,KAAAK,MAAAkB,IAAA,WACArB,EAAAC,QAAA,WAAAY,QAAA,kBAAAf,KAAAK,OAEAiF,OAAAmQ,KAAAzV,KAAAK,MAAAkB,IAAA,QAAA,YAKAP,gBAAA,WACA,OACAG,cAAA,WACA,GAAAC,GAAA,SAQA,OAPA,IAAA5B,OAAA8P,KAAAtP,KAAA0V,SACAtU,GAAA,eAGA,aAAApB,KAAA2V,UACAvU,GAAA,mBAEAA,GAGAwU,YAAA,WACA,MAAA,IAAApW,OAAA8P,KAAAtP,KAAA0V,OACA,gCAAA1V,KAAA0V,MAAA,MAEA,OAOA,OAAAjW,KAEA3F,EAAA,uCAAA,mCAAA,SAAA+b,GCrFA,GAAApW,GAAAC,WAAA+H,cAAA7H,QACAE,SAAA,sCACAkC,UAAA6T,EAEA7U,gBAAA,WACA,GAAAqB,GAAArC,IACA,QACA8V,eAAA,WACA,MAAAzT,GAAA2B,WAAA8O,UAGA3R,cAAA,WACA,MAAAkB,GAAA2B,WAAA+R,QAKArO,WAAA,SAAAC,EAAA3F,GACAxC,OAAAmI,EAAAzF,IAAAC,KAAA,iBAAAyF,OAAA5F,EAAAE,MAIA,OAAAzC,KCbA3F,EAAA,kCAAA,uCAAA,SAAAkc,GAEA,GAAAvW,GAAAC,WAAA+D,WAAA7D,QACAE,SAAA,qCAEA4D,SACA6P,QAAA,qBACAC,UAAA,wBAGAzT,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,qBAAAH,KAAAiW,mBACAjW,KAAAC,SAAAC,EAAAC,QAAA,UAAA,eAAAH,KAAAkW,wBAEAlW,KAAAmW,iBAAAjW,EAAAC,QAAA,WAAAmB,QAAA,wBACAtB,KAAA4T,kBAAA5T,KAAAmW,iBAEAnW,KAAAoW,iBAAAlW,EAAAC,QAAA,WAAAmB,QAAA,wBACAtB,KAAA8T,oBAAA9T,KAAAoW,kBAGAnU,OAAA,WACAjC,KAAAuT,QAAAxP,KAAA,GAAAiS,IAAAhS,WAAAhE,KAAA4T,qBACA5T,KAAAwT,UAAAzP,KAAA,GAAAiS,IAAAhS,WAAAhE,KAAA8T,wBAGA5L,MAAA,WACA,MAAA1I,QAAAQ,KAAAkC,IAAA6D,UAGAkQ,kBAAA,SAAAI,EAAAC,GACAtW,KAAAuT,QAAAU,QACAjU,KAAAwT,UAAAS,QACAjU,KAAAuT,QAAAxP,KAAA,GAAAiS,IAAAhS,WAAAqS,KACArW,KAAAwT,UAAAzP,KAAA,GAAAiS,IAAAhS,WAAAsS,MAIAJ,uBAAA,WACAlW,KAAAuT,QAAAxP,KAAA,GAAAiS,IAAAhS,WAAAhE,KAAAmW,oBACAnW,KAAAwT,UAAAzP,KAAA,GAAAiS,IAAAhS,WAAAhE,KAAAoW,sBAKA,OAAA3W,KC/CA3F,EAAA,6CAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,4CAEAC,WAAA,WACAC,KAAAK,MAAAC,GAAA,kBAAAN,KAAAI,OAAAJ,OAGAkG,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,kBAAAnG,KAAAI,SASAG,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAGAI,QACA2V,oBAAA,cAGAC,WAAA,SAAAjY,GACA2B,EAAAC,QAAA,UAAAY,QAAA,mBAAAf,KAAAK,SAIA,OAAAZ,KClCA3F,EAAA,uCAAA,2CAAA,SAAA2c,GACA,GAAAhX,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,QACAgF,UAAA,aACA7C,UAAAyU,GAGA,OAAAhX,KCPA3F,EAAA,wCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,sCAEAc,QACA8V,qBAAA,oBAGAC,iBAAA,SAAApY,GACA2B,EAAAC,QAAA,UAAAY,QAAA,uBAIA,OAAAtB,KCdA3F,EAAA,mCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,+BAGA,OAAAL,KAEA3F,EAAA,gCAAA,oCAAA,iCAAA,SAAAgR,EAAA8L,GCfA,GAAAnX,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,6BAEA4D,SACAmT,MAAA,qBAGA9W,WAAA,SAAAuG,GACAtG,KAAA6L,UAAAvF,EAAAuF,SAMA,IAAAiL,GAAA,mBAAA5W,GAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAD,QAAA,mBAAApB,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAD,QAAA,iBAEAwV,IACA9W,KAAA6L,UAAAvL,GAAA,UAAAN,KAAAK,MAAAkB,IAAA,QAAAvB,KAAAI,OAAAJ,MAGAA,KAAAK,MAAAC,GAAA,eAAAN,KAAA+W,YAAA/W,KAEA,IAAArB,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAAvL,GAAA,UAAAhG,EAAA0F,KAAAI,OAAAJ,KAKA,IAAAqM,GAAArM,KAAAK,MAAAkB,IAAA,SACA,IAAA8K,EAAA,CAEA,GAAA,mBAAAA,GAAA2K,SAAA3K,EAAA2K,QAAA,CAEA,GAAAvC,GAAAzU,KAAAK,MAAAkB,IAAA,QACAvB,MAAAK,MAAA8I,IAAA,QAAAsL,EAAA,0EAGAvU,EAAAC,QAAA,WAAAY,QAAA,SAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAA,KAAAK,MAAAC,GAAA,WAAAN,KAAAI,OAAAJ,MAMAA,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAiX,cAKAjX,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAkX,eAGAhR,gBAAA,WACAlG,KAAA6L,UAAA1F,IAAA,UAAAnG,KAAAK,MAAAkB,IAAA,QAAAvB,KAAAI,QACAJ,KAAAK,MAAA8F,IAAA,eAAAnG,KAAA+W,YAEA,IAAApY,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAA1F,IAAA,UAAA7L,EAAA0F,KAAAI,OAkBA,IAbAJ,KAAAK,MAAAkB,IAAA,WACAvB,KAAAK,MAAA8F,IAAA,WAAAnG,KAAAI,OAAAJ,MAMAE,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,kBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,kBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MAKA,WAAAA,KAAAK,MAAAkB,IAAA,QAAA,CACA,GAAA4V,GAAAnX,KAAAK,MAAAkB,IAAA,QACAvE,EAAAgD,KAAA6L,UAAAtK,IAAA4V,EACAnX,MAAA6L,UAAA1C,IAAAgO,EAAA/M,EAAAgN,SAAApa,IAAAqa,QAAA,MAKAC,eAAA,WAIA,GAAA,WAAAtX,KAAAK,MAAAkB,IAAA,QAAA,CACA,GAAA4V,GAAAnX,KAAAK,MAAAkB,IAAA,QACAvE,EAAAgD,KAAA6L,UAAAtK,IAAA4V,EACAnX,MAAA6L,UAAA1C,IAAAgO,EAAA/M,EAAAmN,OAAAva,IAAAqa,QAAA,IAGAnX,EAAAC,QAAA,OAAAY,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,WACA3L,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAO,SAAA,WACAP,KAAA8K,sBAAA,CAMA5K,GAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MAEAR,OAAAQ,KAAAkC,IAAAC,KAAA,YAAAkI,KAAA,WACA,GAAArC,GAAAxI,OAAAQ,MAAAwX,KAAA,gBACAhY,QAAAQ,MAAAyX,KAAA,WACAzP,QAAAA,EACA0P,SAAA,IACAC,MAAA,gBACA5W,QAAA,QACA6W,cAAA,MAIA5X,KAAAK,MAAAkB,IAAA,mBACArB,EAAAC,QAAA,aAAAmB,QAAA,OAAAtB,KAMA,IAAA6X,GAAA7X,KAAAK,MAAAkB,IAAA,OAEA,IAAA,mBAAAsW,GAAA,CAEA,GAAAC,GAAAtY,OAAAQ,KAAAQ,KAAA2B,KAAA,QAEA,QAAA0V,EAAAhF,MACA,IAAA,UACAiF,EAAAC,aACAC,KAAAC,mBACAC,KAAAC,cAEA,MACA,KAAA,WAEA,GAAAC,GAAAlY,EAAAC,QAAA,YAAAmB,QAAA,cAAA,YACA+W,EAAA5L,QAAA6L,gBAAAF,IAAA,EAEAN,GAAAC,aACAQ,MAAA/Y,OAAA,WAAAmT,KAAA0F,GAAAG,OACAR,KAAAC,mBACAC,KAAAC,cAEA,MACA,KAAA,SACAN,EAAAY,QAAAX,EAAAD,KAAAA,EAAAY,OACA,MACA,SAEAC,QAAAC,IAAA,yBAAAd,EAAAhF,KAAA,wBAIA7S,KAAA+W,eAGA9U,OAAA,WAIA/B,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,eAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,eAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAgG,SAAA,WAIA9F,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGA+W,YAAA,WACA/W,KAAAK,MAAAkB,IAAA,UACA/B,OAAAQ,KAAAkC,IAAAC,KAAA,eAAAiK,SAAA,YACApM,KAAA6W,MAAA9S,KAAA,GAAA6S,IAAAvW,MAAAL,KAAAK,WAEAb,OAAAQ,KAAAkC,IAAAC,KAAA,eAAAwL,YAAA,YACA3N,KAAA6W,MAAAlO,UAIA3H,gBAAA,WACA,GAAAqB,GAAArC,IACA,QAEA4Y,cAAA,WACA,GAAA5Y,KAAArB,KACA,IAAA,GAAArE,KAAA0F,MAAArB,KACA,GAAAqB,KAAArB,KAAAZ,eAAAzD,IACA+H,EAAAwJ,UAAAtK,IAAAjH,IAAA0F,KAAArB,KAAArE,GACA,MAAA,uBAKA,OAAA,IAGAue,cAAA,WACA,mBAAAxW,GAAAwJ,UAAAtK,IAAAvB,KAAA1F,MACA0F,KAAAhD,MAAAqF,EAAAwJ,UAAAtK,IAAAvB,KAAA1F,MACA,mBAAA0F,MAAAhD,QACAgD,KAAAhD,MAAA,GAEA,IAAAma,GAAAjX,EAAAC,QAAA,OAAAmB,QAAA,eAAA,yBAAAtB,KAAA6S,KACA,OAAAsE,GAAAnX,OAGA8Y,mBAAA,WACA,GAAA1X,GAAA,EAQA,OAPApB,MAAA+Y,iBACA3X,GAAA,mBAEA,OAAApB,KAAA6S,OACAzR,GAAA,QAGAA,GAGAD,cAAA,WACA,GAAAC,GAAA,aAWA,OATAA,IADA,mBAAApB,MAAAyO,MACA,MAAAzO,KAAAyO,MAEA,eAGAzO,KAAA6W,QACAzV,GAAA,aAGAA,GAGA4X,cAAA,WACA,MAAAhZ,MAAAiZ,KACA,mIAAAjZ,KAAAiZ,KAAA,SAEA,IAIAC,gBAAA,WACA,MAAAlZ,MAAA+Y,iBAAA/Y,KAAAmZ,gBACA,iEAEA,IAIAC,kBAAA,WACA,MAAApZ,MAAAwQ,YACA,gBAAAxQ,KAAAwQ,YAAA,IAEA,MAMA5P,QACAyY,kBAAA,gBACAC,iBAAA,eACAC,iBAAA,eACAC,eAAA,cAGAC,cAAA,SAAAlb,GACA2B,EAAAC,QAAA,OAAAY,QAAA,iBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,YAGA6N,aAAA,SAAAnb,GACA2B,EAAAC,QAAA,OAAAY,QAAA,gBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,WACA3L,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,gBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,YAGA8N,aAAA,SAAApb,GACA2B,EAAAC,QAAA,OAAAY,QAAA,gBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,WACA3L,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,gBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAgM,WAAA,SAAAzN,GACA2B,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,cAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,cAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,cAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAiX,aAAA,WACA/W,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,gBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAkX,aAAA,WACAhX,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,gBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,QAIA,OAAAP,KChTA3F,EAAA,mCAAA,gCAAA,SAAA8f,GACA,GAAAna,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,mCAEA4D,SACAmW,SAAA,iBACAC,WAAA,oBAGAvZ,SAAA,WACA,GAAAwZ,GAAA7Z,EAAAC,QAAA,YAAAmB,QAAA,mBAAA,SACA0Y,EAAA9Z,EAAAC,QAAA,YAAAmB,QAAA,mBAAA,cACAuK,EAAA3L,EAAAC,QAAA,YAAAmB,QAAA,eACAtB,MAAA6Z,SAAA9V,KAAA,GAAA6V,IAAAvZ,MAAA0Z,EAAAlO,UAAAA,IAIA,IAAA5C,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,kBACA2Y,EAAAhR,EAAAiR,WAAArH,KAAA,UACA,oBAAAoH,GACAja,KAAA8Z,WAAA/V,KAAA,GAAA6V,IAAAvZ,MAAA2Z,EAAAnO,UAAAA,KAEAA,EAAA1C,IAAA,aAAA,IAIAvI,QACA+B,iBAAA,gBAGAE,aAAA,SAAAtE,GACA2B,EAAAC,QAAA,OAAAY,QAAA,uBAAAxC,KAIA,OAAAkB,KCpCA3F,EAAA,oCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,mCAGA,OAAAL,KCJA3F,EAAA,gCACA,8BACA,+BACA,gCACA,sCACA,iCACA,sCACA,qCACA,kCACA,kCACA,SACAqgB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAA3N,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAgE,WAAA,GAAAmW,KAEA1b,GAAA,WAEAoc,eAAA,SAAAvU,GACA,MAAA,IAAA8T,GAAA9T,MAIA7H,GAAA,YAEAoc,eAAA,SAAAvU,GACA,MAAA,IAAAiU,GAAAjU,MAIA7H,GAAA,eAKAoR,cAAA,SAAAvJ,GAMA,GAAA,mBAAAA,GAAAwU,UACA,GAAArb,GAAAS,EAAAC,QAAAmG,EAAAwU,UAAAvZ,IAAA,OAAAD,QAAA,yBAAAgZ,MAEA,IAAA7a,GAAA6a,CAEA,OAAA,IAAA7a,GAAA6G,IAGAuU,eAAA,SAAAvU,GACA,MAAA,IAAA+T,GAAA/T,MAIA7H,GAAA,cAGAoR,cAAA,SAAAvJ,GACA,MAAA,IAAAmU,GAAAnU,IAGAuU,eAAA,SAAAvU,GACA,MAAA,IAAAkU,GAAAlU,MAIA7H,GAAA,UAGAoR,cAAA,SAAAvJ,GACA,MAAA,IAAAqU,GAAArU,IAGAuU,eAAA,SAAAvU,GACA,MAAA,IAAAoU,GAAApU,OAMApG,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA+a,oBAAA/a,MAEAE,EAAAC,QAAA,OAAAiF,MAAA,aAAApF,KAAAgb,UAAAhb,OAGA+a,oBAAA,WACA,MAAA/a,MAAAgE,YAGAgX,UAAA,SAAAvc,GACA,MAAAuB,MAAAgE,WAAAzC,IAAA9C,KAKA,OAAAwO,KC5GAnT,EAAA,2CAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,sDAEAkB,gBAAA,WACA,OACAqU,mBAAA,WACA,GAAAhU,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACAgU,EAAAjU,EAAAE,IAAA,MACAsR,EAAA3S,EAAAC,QAAAmV,GAAAhU,QAAA,WAAAtB,KAAA6S,KACA,OAAA,mBAAAA,GACAA,EAAAtR,IAAA,YAEA,OAOA,OAAA9B,KCrBA3F,EAAA,qBAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,kBAGA,OAAAL,KCNA3F,EAAA,0BAAA,wCAAA,mBAAA,SAAAmhB,EAAAC,GACA,GAAA7a,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACApI,UAAA,GACAE,QAAA,GACA2H,QAAA,EACAtH,IAAA,GACA0Z,SAAA,EACAtZ,UAAA,EAEAuZ,qBAAA,SAAA9U,GACA,MAAA,IAAA2U,GAAA3U,IAGA+U,4BAAA,SAAA/U,GACA,MAAA,IAAA2U,GAAA3U,IAGAgV,kBAAA,SAAAhV,GAIA,MAAA,IAAA4U,IAGAK,mBAAA,SAAAjV,GAIA,MAAA,IAAA4U,MAKA,OAAA7a,KClCAvG,EAAA,+BAAA,0BAAA,SAAA0hB,GACA,GAAAxX,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAmb,GAEA,OAAAxX,KAEAlK,EAAA,4BAAA,WCbA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,8BAGA,OAAAL,KAEA3F,EAAA,6CAAA,WCPA,GAAA2F,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,MACA4b,eAAA,EAEAtH,aAAA,WACA,MAAAjU,GAAAC,QAAA,SAAAmB,QAAA,kBAGAoa,aAAA,WACA,MAAAxb,GAAAC,QAAA,SAAAmB,QAAA,yBAGAvB,WAAA,WACAG,EAAAC,QAAA,UAAAiF,MAAA,iBAAApF,KAAA2b,cAAA3b,MACAE,EAAAC,QAAA,UAAAiF,MAAA,gBAAApF,KAAA4b,aAAA5b,MACAE,EAAAC,QAAA,UAAAiF,MAAA,mBAAApF,KAAA6b,gBAAA7b,OAGAO,SAAA,WACA,GAAAP,KAAAgE,WAAAwG,OAAA/O,OAAA,EAAA,CACA+D,OAAAQ,KAAAkC,IAAAkK,SAAA,2BAAAA,SAAA,qBAWApM,MAAA4b,eAGA1b,EAAAC,QAAA,OAAAY,QAAA,wBAAAf,OAGA2b,cAAA,WACA,MAAA3b,MAAAkC,IAGA0Z,aAAA,WACA,GAAA1b,EAAAC,QAAA,OAAAmB,QAAA,mBAMA9B,OAAAQ,KAAAkC,IAAAqO,UAEAE,OAAA,QACAqL,OAAA,oBACAtL,YAAA,iCACAW,QAAA,IACAI,MAAA,EAAA,GAEAF,SAAA,WACA0K,kBAAA,GAEAjL,QAAA,SAAAvS,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,yBAAAsP,IAGAD,KAAA,SAAApS,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,sBAAAsP,IAGAC,IAAA,SAAAtS,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,qBAAAsP,IAGAI,MAAA,SAAAzS,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,uBAAAsP,IAGAG,OAAA,SAAAxS,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,wBAAAsP,EAAA5Q,OAGAiR,KAAA,SAAA1S,EAAAqS,GACAA,EAAAoL,KAAAC,UACA/b,EAAAC,QAAA,OAAAmB,QAAA,sBAAAsP,OAKAiL,gBAAA,WACArc,OAAAQ,KAAAkC,IAAAqO,SAAA,YAGAmB,WAAA,SAAA1P,GACA9B,EAAAC,QAAA,UAAAmB,QAAA,gBACAU,EAAAxB,IAAA0b,OAAAnY,KAAA,QACA7D,EAAAC,QAAA,UAAAmB,QAAA,cAAA,MAMA,OAAA7B,KAGA3F,EAAA,uCAAA,WC3GA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,2BAEAC,WAAA,WACAC,KAAAK,MAAAC,GAAA,yBAAAN,KAAAmc,gBAAAnc,OAGAO,SAAA,WACAP,KAAAmc,mBAGAA,gBAAA,WACA,GAAAnc,KAAAK,MAAAkB,IAAA,mBACA,GAAA6a,GAAAlc,EAAAC,QAAA,OAAAmB,QAAA,eAAA,wCAEA,IAAA8a,GAAAlc,EAAAC,QAAA,OAAAmB,QAAA,eAAA,kCAEA9B,QAAAQ,KAAAkC,IAAAC,KAAA,eAAAwQ,KAAAyJ,EAAApc,QAGAkG,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,yBAAAnG,KAAAI,SAGAQ,QACAyb,mBAAA,sBAGAC,mBAAA,SAAA/d,GACA2B,EAAAC,QAAA,UAAAY,QAAA,sBAAAxC,EAAAyB,KAAAK,SAIA,OAAAZ,KC3BA3F,EAAA,qCAAA,qCAAA,SAAAyiB,GACA,GAAA9c,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAC,SAAA,qDAEAC,WAAA,WACAC,KAAAK,MAAAC,GAAA,eAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,eAAAN,KAAAwc,kBAAAxc,OAGA0D,SACA+Y,SAAA,uBAGAvW,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,eAAAnG,KAAAI,QACAJ,KAAA0c,aAAAC,UACA3c,KAAAK,MAAAuc,MAAA,QAAAvF,QAAA,KAGA9W,SAAA,WACAP,KAAAwc,mBACA,IAAAna,GAAArC,IACAA,MAAA0c,aAAA,GAAAjF,MAAA,WACA1W,QAAA,QACAqU,MAAA,sBACAlO,UACA2V,EAAA,OACAC,EAAA,UAEAC,QAAA,IACAnF,aAAA,OAEAoF,UAAA,WACAhd,KAAAid,WAAAzd,OAAA6C,EAAAH,IAAAC,KAAA,2BAGAnC,KAAA0c,aAAAQ,OAAA1d,OAAAQ,KAAAkC,IAAAC,KAAA,eACAnC,KAAAK,MAAA8I,IAAA,OAAAnJ,KAAA0c,cAAArF,QAAA,KAGAmF,kBAAA,WACAxc,KAAAyc,UACAzc,KAAAyc,SAAA1Y,KAAA,GAAAwY,IAAAlc,MAAAL,KAAAK,UAIAW,gBAAA,WACA,OACAqU,mBAAA,WACA,GAAAhU,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACAgU,EAAAjU,EAAAE,IAAA,MACAsR,EAAA3S,EAAAC,QAAAmV,GAAAhU,QAAA,WAAAtB,KAAA6S,MACAsK,EAAAtK,EAAAtR,IAAA,WAEA,IAAAvB,KAAAod,MAAA,CACA,GAAAC,GAAAnd,EAAAC,QAAAmV,GAAAhU,QAAA,WAAAuR,EAAAtR,IAAA,QACA4b,IAAA,MAAAE,EAAA9b,IAAA,YAEA,MAAA4b,IAGAG,gBAAA,WACA,GAAAtd,KAAAod,MACA,GAAAG,GAAA,aAEA,IAAAA,GAAA,OAEA,OAAA,yCAAAA,EAAA,gBAMA,OAAA9d,KCxEA3F,EAAA,8BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,+BAEAC,WAAA,WACA,GAAAyd,GAAAtd,EAAAC,QAAA,WAAAmB,QAAA,iBACAtB,MAAAC,SAAAud,EAAA,MAAAxd,KAAAI,QACAJ,KAAAC,SAAAud,EAAA,SAAAxd,KAAAI,SAGAG,SAAA,WACA,GAAAid,GAAAtd,EAAAC,QAAA,WAAAmB,QAAA,iBACA,IAAAkc,EAAAhT,OAAA/O,OACA+D,OAAAQ,KAAAkC,IAAAga,OAEA1c,OAAAQ,KAAAkC,IAAA6B,SAKA,OAAAtE,KCrBA3F,EAAA,6BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,+BAGA,OAAAL,KCRA3F,EAAA,4BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,yBAEAC,WAAA,aAWAQ,SAAA,WAKAP,KAAAqB,cAAAnB,EAAAC,QAAA,OAAAmB,QAAA,sBAGAV,QACA6c,6BAAA,uBACAC,0BAAA,YACAC,8BAAA,gBACAC,mBAAA,cACAC,sBAAA,uBAGAC,UAAA,SAAAvf,GACA2B,EAAAC,QAAA,OAAAmB,QAAA,cACApB,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QAIA0d,cAAA,SAAAxf,GACA2B,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QAGA2d,YAAA,SAAAzf,GACA2B,EAAAC,QAAA,OAAAY,QAAA,eAAAxC,EAAAyB,KAAAK,QAGA4d,oBAAA,SAAA1f,GACA2B,EAAAC,QAAA,OAAAY,QAAA,kBAAAxC,EAAAyB,KAAAK,QAGA6d,qBAAA,SAAA3f,GACA2B,EAAAC,QAAA,OAAAY,QAAA,wBAAAxC,EAAAyB,KAAAK,SAIA,OAAAZ,KCrDA3F,EAAA,4BAAA,0BAAA,SAAAqkB,GACA,GAAA1e,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,KACAC,SAAA,uBAEA4D,SACA0a,aAAA,qBAGAre,WAAA,WACAC,KAAAF,SAAAI,EAAAC,QAAA,WAAAmB,QAAA,2BAAAtB,KAAAF,SACAE,KAAAK,MAAAC,GAAA,eAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,oBAAAN,KAAAI,OAAAJ,MACAA,KAAAK,MAAAC,GAAA,gBAAAN,KAAAqe,gBAAAre,OAGAkG,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,eAAAnG,KAAAI,QACAJ,KAAAK,MAAA8F,IAAA,oBAAAnG,KAAAI,QACAJ,KAAAK,MAAA8F,IAAA,gBAAAnG,KAAAqe,kBAGA9d,SAAA,WACAP,KAAAK,MAAAkB,IAAA,cACA/B,OAAAQ,KAAAkC,IAAAkK,SAAA,UAEA5M,OAAAQ,KAAAkC,IAAAyL,YAAA,UAGA3N,KAAAqe,kBAEAre,KAAAoe,aAAAra,KAAA,GAAAoa,IAAA9d,MAAAL,KAAAK,UAGAge,gBAAA,WACA,GAAAre,KAAAK,MAAAkB,IAAA,UACA/B,OAAAQ,KAAAkC,IAAAkK,SAAA,eAEA5M,OAAAQ,KAAAkC,IAAAyL,YAAA,gBAIA/M,QACA0d,eAAA,eACAC,MAAA,kBAGAC,eAAA,SAAAjgB,GACA,MAAAiB,OAAAjB,EAAA0P,QAAAlI,SAAA7L,KAAA,YACAgG,EAAAC,QAAA,OAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QAIAoe,aAAA,SAAAlgB,GACA,GAAA4Y,GAAA3X,OAAAjB,EAAA0P,QAAA3H,KAAA,WACAwD,EAAA5J,EAAAC,QAAA,WAAAmB,QAAA,mBAAA6V,EACAuB,SAAAC,IAAA7O,GACA4O,QAAAC,IAAA3Y,KAAAK,OACAH,EAAAC,QAAA,OAAAmB,QAAA,iBAAA/C,EAAAuL,EAAA9J,KAAAK,OACAH,EAAAC,QAAA,OAAAmB,QAAA,cAGAN,gBAAA,WACA,OACA0d,aAAA,SAAAC,GACA3e,KAAA2e,YAAAA,GAAA,QACA,IAAAC,GAAA5e,KAAAyU,KACAzU,MAAAyU,MAAA,GACAzU,KAAAhD,MAAAgD,KAAAA,KAAA2e,aACA3e,KAAA1F,KAAA0F,KAAAvB,GAAA,IAAAuB,KAAA2e,WACA,IAAAhM,GAAAzS,EAAAC,QAAA,OAAAmB,QAAA,eAAA,+BAGA,OAFAqR,GAAAA,EAAA3S,MACAA,KAAAyU,MAAAmK,EACAjM,GAGA0C,mBAAA,WACA,GAAAxC,GAAA3S,EAAAC,QAAA,WAAAmB,QAAA,WAAAtB,KAAA6S,KACA,IAAA,mBAAAA,GAEA,MAAAA,GAAAtR,IAAA,aAGAyX,cAAA,WACA,MAAAhZ,MAAAiZ,KACA,mIAAAjZ,KAAAiZ,KAAA,SAEA,IAIAC,gBAAA,WACA,MAAAlZ,MAAA+Y,eACA,iEAEA,OAOA,OAAAtZ,KAGA3F,EAAA,oCAAA,WClHA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,sCAEAoG,gBAAA,WACA1G,OAAAQ,KAAAkC,IAAA6D,SAAAA,SAAA4H,YAAA,qBAIApN,SAAA,WACAP,KAAAQ,IAAAR,KAAAQ,IAAAC,WACAT,KAAAQ,IAAAE,SACAV,KAAAW,WAAAX,KAAAQ,MAGAyB,OAAA,WACAzC,OAAAQ,KAAAkC,IAAA6D,SAAAA,SAAAqG,SAAA,sBA+BA,OAAA3M,KCtCA3F,EAAA,6BAAA,2BAAA,kCAAA,SAAA+kB,EAAAzO,GACA,GAAA3Q,GAAAC,WAAA+H,cAAA7H,QACAE,SAAA,wBACAkC,UAAA6c,EACAzO,UAAAA,EAEArQ,WAAA,WACAC,KAAAF,SAAAI,EAAAC,QAAA,WAAAmB,QAAA,4BAAAtB,KAAAF,UAGAS,SAAA,WACAf,OAAAQ,KAAAkC,IAAA4c,WACAC,OAAA,4BACA1O,YAAA,sBACA2O,WAAA,qBACAC,KAAA,SAAA1gB,EAAAqS,GACA1Q,EAAAC,QAAA,OAAAmB,QAAA,kBAAA/C,EAAAqS,OAKAlJ,WAAA,SAAAC,EAAA3F,GACA,mBAAA9B,GAAAC,QAAA,WAAAmB,QAAA,WAAAU,EAAA3B,MAAAkB,IAAA,UAEA/B,OAAAmI,EAAAzF,IAAAC,KAAA,SAAAyF,OAAA5F,EAAAE,MAIA,OAAAzC,KAGA3F,EAAA,+BAAA,WCxCA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,iCAGA,OAAAL,KAEA3F,EAAA,8BAAA,WCPA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,gCAGA,OAAAL,KAEA3F,EAAA,gCAAA,WCPA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAC,SAAA,6BAEAoG,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,oBAAAnG,KAAAkf,oBAGAnf,WAAA,WACAC,KAAAK,MAAAC,GAAA,oBAAAN,KAAAkf,kBAAAlf,OAGAY,QACA2d,MAAA,aAGAT,UAAA,SAAAvf,GACA2B,EAAAC,QAAA,YAAAY,QAAA,aAAAxC,EAAAyB,KAAAK,QAGAW,gBAAA,WACA,OACAG,cAAA,WACA,GAAAC,GAAA,mBAAApB,KAAAvB,EAIA,OAHAuB,MAAAmf,aACA/d,GAAA,WAEAA,KAKA8d,kBAAA,WACAlf,KAAAK,MAAAkB,IAAA,cACA/B,OAAAQ,KAAAkC,IAAAC,KAAA,oBAAAiK,SAAA,UAEA5M,OAAAQ,KAAAkC,IAAAC,KAAA,oBAAAwL,YAAA,YAKA,OAAAlO,KAEA3F,EAAA,8BAAA,8BAAA,SAAAslB,GC3CA,GAAA3f,GAAAC,WAAAqC,eAAAnC,QACAoC,UAAAod,GAIA,OAAA3f,KCEA3F,EAAA,8BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA+V,WAAA,QACAC,aAAA,SACAH,YAAA,EACAI,MAAA,KAGAxf,WAAA,WACA,GAAA,mBAAAC,MAAAuB,IAAA,QAAA,CAGAvB,KAAAM,GAAA,SAAAN,KAAAyZ,cAAAzZ,KAGA,IAAAwf,GAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAtB,KAAAuB,IAAA,SACAke,EAAAD,EAAAje,IAAA,aAGA6I,GAAAC,KAAAmV,EAAAje,IAAA,mBAAA,SAAAgO,EAAAZ,GACA,mBAAA3O,MAAAuB,IAAAoN,IACA3O,KAAAmJ,IAAAwF,EAAAY,GAAA8H,QAAA,KAEArX,MAKA,SAAAwf,EAAAje,IAAA,YACAvB,KAAAmJ,IAAA,OAAAqW,EAAAje,IAAA,SAYArB,EAAAC,QAAA,UAAAY,QAAA,kBAAAf,MACAE,EAAAC,QAAA,UAAAsf,GAAA1e,QAAA,kBAAAf,MACAE,EAAAC,QAAA,UAAAH,KAAAuB,IAAA,SAAAR,QAAA,kBAAAf,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,sBAAAH,KAAA0f,kBAUAjG,cAAA,SAAApZ,EAAA2M,GACA9M,EAAAC,QAAA,gBAAAiK,EAAAsE,KAAArO,EAAAsf,qBAAA,IAAA5e,QAAA,iBAAAf,KAAAgN,EAAAlD,cACA5J,EAAAC,QAAA,UAAAY,QAAA,iBAAAf,KAAAgN,EAAAlD,cACA5J,EAAAC,QAAA,OAAAY,QAAA,iBAAAf,KAAAgN,EAAAlD,eAGA4V,eAAA,SAAAE,EAAA9V,GACA5J,EAAAC,QAAA,OAAAY,QAAA,mBAAAf,KAAA4f,EAAA9V,KAIA,OAAAzJ,KChEAvG,EAAA,iCAAA,4BAAA,SAAA+lB,GACA,GAAA7b,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAwf,EACA/N,WAAA,SAAAzR,GACA,MAAAyf,UAAAzf,EAAAkB,IAAA,WAEAwe,OAAA,EAEAhgB,WAAA,WACAC,KAAAM,GAAA,MAAAN,KAAAggB,SAAAhgB,MACAA,KAAAM,GAAA,SAAAN,KAAAigB,YAAAjgB,MAEAA,KAAAC,SAAAD,KAAA,YAAAA,KAAAkgB,aACAlgB,KAAAC,SAAAD,KAAA,eAAAA,KAAAmgB,gBACAngB,KAAAC,SAAAD,KAAA,eAAAA,KAAAogB,qBACApgB,KAAAqgB,WAUAL,SAAA,SAAA3f,GACAL,KAAAqgB,OAAA3jB,KAAA2D,EAAAkB,IAAA,QASA0e,YAAA,SAAA5f,GACAL,KAAAsgB,WAAAtgB,KAAAsgB,eACAtgB,KAAAsgB,WAAAjgB,EAAAkB,IAAA,OAAAlB,EAAAkB,IAAA,OAGA2e,YAAA,SAAA7f,GACAL,KAAA0K,IAAArK,IAGA8f,eAAA,SAAA9f,GACA,GAAA,GAAAL,KAAAvE,OACA,GAAA8jB,GAAA,MAEA,IAAAA,GAAAvf,KAAAugB,GAAAvgB,KAAAvE,OAAA,GAAA8F,IAAA,SAAA,CAGAlB,GAAA8I,IAAA,QAAAoW,GAAAlI,QAAA,IACArX,KAAA0K,IAAArK,IAGA+f,oBAAA,SAAA/f,GACAL,KAAAsK,OAAAjK,IAGAmgB,YAAA,SAAAX,GACA,OAAA,GAAA7f,KAAA9D,QAAA2jB,KAGA,OAAA7b,KCxDAlK,EAAA,gCAEA,8BAEA,yBACA,0CACA,oCAEA,2BACA,0BACA,4BAEA,4BACA,2BACA,6BAEA,kBAEA,iCAEA,SACAgK,EACA2c,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/F,EACAgG,GAEA,GAAAjU,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAIAG,EAAAC,QAAA,eAAAmB,QAAA,iBAAAtB,KAAAmhB,uBAAA,GAAAnhB,MAKAE,EAAAC,QAAA,eAAAmB,QAAA,iBAAAtB,KAAAohB,uBAAA,GAAAphB,MAKAE,EAAAC,QAAA,sBAAAmB,QAAA,iBAAAtB,KAAAqhB,6BAAA,GAAArhB,MACAE,EAAAC,QAAA,sBAAAmB,QAAA,kBAAAtB,KAAAqhB,6BAAA,GAAArhB,MAGAA,KAAAgE,WAAA,GAAAF,KAEArF,GAAA,SACAqU,SAAAwO,OAAAC,iBACApG,SACAqG,IAAA,eACAC,eAAA,eACAC,eAAA,uBACAC,eAAA,wBACAC,aAAA,iBACAC,GAAA,eACAC,KAAA,iBACAC,eAAA,oBAEAxa,eAAA,iBAEAya,iBAAA,WACA,MAAA,IAAAvB,IAcAwB,mBAAA,SAAAje,GACA,GAAAke,GAAAhiB,EAAAC,QAAA,YAAAmB,QAAA,cAAA,kBAUA4gB,KACAA,EAAAhiB,EAAAC,QAAA,YAAAmB,QAAA,cAAA,qBAMA,IAAA6gB,GAAAjiB,EAAAC,QAAA,eAAAmB,QAAA,mBAKA8gB,EAAAhY,EAAAiY,QAAAF,EAAAjjB,QACAN,EAAAwL,EAAAkY,MAAAF,EACAF,GAAAtjB,EAAAsjB,EAAAhiB,EAAAC,QAAA,OAAAmB,QAAA,kBAAA,EAMA,IAAAihB,GAAAriB,EAAAC,QAAA,eAAAmB,QAAA,mBAKA8gB,EAAAhY,EAAAiY,QAAAE,EAAArjB,QACAN,EAAAwL,EAAAkY,MAAAF,EAIA,OAHAI,iBAAA5jB,IAEAsB,EAAAC,QAAA,YAAAmB,QAAA,iBAAA,kBAAA4gB,GAAA,GACA,GAAAM,kBAAAxe,WAAAke,KAGA9G,qBAAA,SAAA9U,GAIA,MAAA,UAAAA,EAAAjG,MAAAkB,IAAA,gBACA,GAAAof,GAAAra,GAEAtG,KAAAuB,IAAA,+BAAAnH,KAAA4F,KAAAsG,IAKAgV,kBAAA,SAAAhV,GAKA,GAAAmc,GAAAviB,EAAAC,QAAA,sBAAAmB,QAAA,mBAKA8gB,EAAAhY,EAAAiY,QAAAI,EAAAvjB,QACAN,EAAAwL,EAAAkY,MAAAF,EAGA,OAFAM,YAAA9jB,IAEA,GAAA8jB,aAGAnH,mBAAA,WAKA,GAAAkH,GAAAviB,EAAAC,QAAA,sBAAAmB,QAAA,oBAKA8gB,EAAAhY,EAAAiY,QAAAI,EAAAvjB,QACAN,EAAAwL,EAAAkY,MAAAF,EAGA,OAFAM,YAAA9jB,IAEA,GAAA8jB,eAKAjkB,GAAA,UACAqU,SAAAwO,OAAAqB,cACAxH,SACAqG,IAAA,eACAC,eAAA,gBACAmB,eAAA,sBACAjB,eAAA,wBACAC,aAAA,iBACAC,GAAA,eACAC,KAAA,iBACAC,eAAA,oBAEAxa,eAAA,qBAEAya,iBAAA,WACA,MAAA,IAAAnB,IAGAoB,mBAAA,WACA,GAAAje,GAAA9D,EAAAC,QAAA,WAAAmB,QAAA,iBACA,OAAA,IAAAwf,IAAA9c,WAAAA,OAIAvF,GAAA,WACAqU,SAAAwO,OAAAuB,eACA1H,SACAqG,IAAA,eACAoB,eAAA,sBACAlB,eAAA,uBACAE,aAAA,iBACAC,GAAA,eACAC,KAAA,iBACAC,eAAA,oBAEAxa,eAAA,0BAEAya,iBAAA,WACA,MAAA,IAAAhB,IAGAiB,mBAAA,WACA,GAAAje,GAAA9D,EAAAC,QAAA,YAAAmB,QAAA,qBACA,OAAA,IAAA2f,IAAAjd,WAAAA,OAIAvF,GAAA,UACAqU,SAAA,eACA1R,QAAA,UACAF,UAAA,uBACAqG,eAAA,uBACA9F,IAAAgL,QAAAqW,cAOA5iB,EAAAC,QAAA,OAAAY,QAAA,wBAAAf,KAAAgE,YAKA9D,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA+iB,oBAAA/iB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,kBAAApF,KAAAgjB,eAAAhjB,OAGA+iB,oBAAA,WACA,MAAA/iB,MAAAgE,YAGAgf,eAAA,SAAAvkB,GACA,MAAAuB,MAAAgE,WAAAzC,IAAA9C,IAGA0iB,uBAAA,SAAAe,GACA,MAAAxB,IAGAU,uBAAA,SAAAc,GACA,GAAAjZ,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,kBAIA6gB,EAAAjiB,EAAAC,QAAA,eAAAmB,QAAA,mBACA8gB,EAAAhY,EAAAiY,QAAAF,EAAAjjB,OAEA,IAAA,GAAAkjB,EAAA3mB,QAAA,mBAAAymB,KAAA,GAAAA,YAAA9Y,UAAAK,WAAA,MAAAR,EAMA,IAAAga,GAAA7Y,EAAA/O,IAAA6mB,EAAA,SAAAvT,GACA,MAAA1F,GAAAiR,WAAAvL,IAAAA,KACA3O,KAEA,OAAA,IAAAkhB,GAAA+B,IAGA5B,6BAAA,SAAAa,GACA,MAAAhH,KAKA,OAAAjO,KCpSAnT,EAAA,yBAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA4Z,SAAA,GAGAnjB,WAAA,WAEAC,KAAAM,GAAA,eAAAN,KAAAmjB,aAAAnjB,OAGAmjB,aAAA,WAEAjjB,EAAAC,QAAA,OAAAY,QAAA,eAAAf,KAAAuB,IAAA,YAIA,OAAAlB,KChBAvG,EAAA,wBAAA,uBAAA,SAAAspB,GACA,GAAAnW,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEA,GAAA+D,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,uBAEAtB,MAAAK,MAAA,GAAA+iB,IACA1V,eAAA,EACArM,cAAAyC,EAAAvC,IAAA,UACA8hB,OAAA,GAMA,IAAAC,GAAA,GAAA7W,QAAA6W,MACAtjB,MAAAK,MAAA8I,IAAA,SAAAma,GAKApjB,EAAAC,QAAA,OAAAiF,MAAA,YAAApF,KAAAujB,SAAAvjB,MAKAE,EAAAC,QAAA,OAAAiF,MAAA,WAAApF,KAAAwjB,QAAAxjB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,cAAApF,KAAAyjB,WAAAzjB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,oBAAApF,KAAA0jB,iBAAA1jB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,oBAAApF,KAAA2jB,iBAAA3jB,MACAE,EAAAC,QAAA,UAAAiF,MAAA,cAAApF,KAAA2jB,iBAAA3jB,MAKAE,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA4jB,oBAAA5jB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA6jB,oBAAA7jB,MACAE,EAAAC,QAAA,OAAAiF,MAAA,iBAAApF,KAAA+L,cAAA/L,OAIA4jB,oBAAA,SAAAvjB,GACAL,KAAA+L,cAAA,gBAAA1L,IAGA0L,cAAA,SAAAoL,EAAAna,GAEA,MADAgD,MAAAK,MAAA8I,IAAAgO,EAAAna,IACA,GAGAymB,WAAA,SAAAtM,GACA,MAAAnX,MAAAK,MAAAkB,IAAA4V,IAGAqM,QAAA,WACA,MAAAxjB,MAAAK,OAGAqjB,iBAAA,WACA,MAAA1jB,MAAAK,MAAAkB,IAAA,kBAGAsiB,oBAAA,SAAAvb,GAEA,MADAtI,MAAA+L,cAAA,gBAAAzD,IACA,GAGAqb,iBAAA,WACA,GAAAG,GAAA9jB,KAAAK,MAAAkB,IAAA,gBACA,OAAArB,GAAAC,QAAA,OAAAmB,QAAA,aAAAwiB,IAGAP,SAAA,WACA,MAAAvjB,MAAAK,MAAAkB,IAAA;GAMA,OAAA0L,KCjFAnT,EAAA,8CAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,2BAAAH,KAAA+jB,qBAWAA,mBAAA,SAAAxlB,EAAA8B,GACA,GAAAA,EAAAkB,IAAA,WAAA,CAIA,GAAAyiB,IAAA,CACA5Z,GAAAC,KAAAhK,EAAAkB,IAAA,YAAAiJ,OAAA,SAAA2M,GACAA,EAAA5V,IAAA,WACAyiB,GAAA,KAGAA,GACA3jB,EAAA8I,IAAA,WAAA,OAGA9I,GAAA8I,IAAA,WAAA,KAKA,OAAA8D,KCnCAnT,EAAA,8BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAikB,UAEA/jB,EAAAC,QAAA,OAAAiF,MAAA,YAAApF,KAAAikB,SAAAjkB,MAKAE,EAAAC,QAAA,eAAAmB,QAAA,iBAAAtB,KAAAkkB,kBAAA,GAAAlkB,OAWAikB,SAAA,SAAA1X,GAEA,GAAArM,EAAAC,QAAA,OAAAmB,QAAA,cAAA,SACA,OAAA,CAOA,IAHAiL,EAAAA,GAAA,UAGA,WAAAA,EACA,GAAA4X,GAAA,wBACA,IAAA,WAAA5X,EACA,GAAA4X,GAAA,cAGA,IAAAziB,GAAAxB,EAAAC,QAAA,OAAAmB,QAAA,gBAOA8I,GAAAC,KAAA3I,EAAAH,IAAA,UAAAiJ,OAAA,SAAAqV,EAAApiB,GACAoiB,EAAAjD,MAAA,QAAAvF,QAAA,KAUA,IAAA6K,GAAAhiB,EAAAC,QAAA,YAAAmB,QAAA,cAAA,kBASA4gB,KACAA,EAAAhiB,EAAAC,QAAA,YAAAmB,QAAA,cAAA,qBAGA,IAAA8iB,GAAAlkB,EAAAC,QAAA,eAAAmB,QAAA,mBAKA8gB,EAAAhY,EAAAiY,QAAA+B,EAAAllB,QACAN,EAAAwL,EAAAkY,MAAAF,EAMA,IAFAF,EAAAtjB,EAAAsjB,GAEA,WAAA3V,GAAA7K,EAAAH,IAAA,wBAAA,CACArB,EAAAC,QAAA,OAAAmB,QAAA,cAAA,UACA,IAAA8B,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBAEA,OADA9B,QAAA4D,GAAAgJ,SAAA,iBACA,EAIA,GAAA3H,GAAAvE,EAAAC,QAAA,OAAAmB,QAAA,iBAGAgF,EAAAwG,KAAAC,MAAAD,KAAAuX,UAAA5f,GACA6B,GAAA+N,SAAA6N,gBAAAA,CAMA,IAAA5B,GAAA7b,EAAAlD,IAAA,UAAA+e,UAcAlW,GAAAC,KAAA/D,EAAAge,OAAA,SAAAC,GACA,GAAA9lB,GAAA8lB,EAAA9lB,SAEA8lB,GAAA9lB,SACA8lB,GAAAC,SACA,IAAAnQ,KAEA,KAAA,GAAAna,KAAAqqB,GACAA,EAAAxmB,eAAA7D,KAEAma,EAAAna,GAAAqqB,EAAArqB,SAEAqqB,GAAArqB,GAIA,KAAA,GAAAid,KAAA9C,GACA,OAAAA,EAAA8C,UACA9C,GAAA8C,EAKAoN,GAAAlQ,SAAAA,EACAkQ,EAAA9lB,GAAAA,IAIA6H,EAAAme,eAAAnE,CAOA,IAAAA,GAAA7b,EAAAlD,IAAA,WAAA+e,UAcAlW,GAAAC,KAAA/D,EAAAoe,QAAA,SAAAnY,GACA,GAAA9N,GAAA8N,EAAA9N,SAEA8N,GAAA9N,SACA8N,GAAAiY,SACA,IAAAnQ,KAEA,KAAA,GAAAna,KAAAqS,GACAA,EAAAxO,eAAA7D,KAEAma,EAAAna,GAAAqS,EAAArS,SAEAqS,GAAArS,GAIAqS,GAAA8H,SAAAA,EACA9H,EAAA9N,GAAAA,IAIA6H,EAAAqe,gBAAArE,EAGAha,EAAAwG,KAAAuX,UAAA/d,GAEApG,EAAAC,QAAA,OAAAY,QAAA,kBAAAuF,GAEA,WAAAiG,IACArM,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,WAAA,GACApB,EAAAC,QAAA,OAAAY,QAAA,kBAGAb,EAAAC,QAAA,OAAAmB,QAAA,cACApB,EAAAC,QAAA,WAAAmB,QAAA,MAAA,aAAA,oCAAAsjB,WAAA,KAKAplB,OAAAmN,KAAAC,SAAAL,OAAA4X,EAAAU,KAAAve,EAAAkG,SAAAC,QAAAC,WAAA,SAAAG,GACA,IACAA,EAAAC,KAAAC,MAAAF,GACAA,EAAAN,OAAAA,EAEArM,EAAAC,QAAA,OAAAY,QAAA,oBAAA8L,IACA3M,EAAAC,QAAA,OAAAmB,QAAA,cAAA,WAAAiL,EAGA,MAAAuY,GACApM,QAAAC,IAAA,yBACAD,QAAAC,IAAAmM,OAMAZ,kBAAA,SAAAhC,GACA,MAAAA,GAAA6C,MAAA,SAKA,OAAA9X,KChOAnT,EAAA,0BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACAG,WAAA,WACAP,OAAAwlB,UAAAhlB,KAAAuB,IAAA,OAGAvB,KAAAmJ,IAAA,wBAAA,GAAAkO,QAAA,IAFArX,KAAAmJ,IAAA,wBAAA,GAAAkO,QAAA,MAOA,OAAAhX,KCVAvG,EAAA,4BAAA,wBAAA,SAAA4H,GACA,GAAAuL,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAK,MAAA,GAAAqB,IAAAjD,GAAAwmB,kBAAAxmB,KAEAuB,KAAAK,MAAA8I,IAAA,SAAAjJ,EAAAC,QAAA,UAAAmB,QAAA,mBAEAtB,KAAAK,MAAA8I,IAAA,UAAAjJ,EAAAC,QAAA,WAAAmB,QAAA,mBAEAtB,KAAAK,MAAA8I,IAAA,WAAAjJ,EAAAC,QAAA,YAAAmB,QAAA,iBAEApB,EAAAC,QAAA,OAAAiF,MAAA,gBAAApF,KAAAklB,aAAAllB,OASAklB,aAAA,WACA,MAAAllB,MAAAK,QAKA,OAAA4M,KC5BAnT,EAAA,iCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,qBAAAH,KAAAmlB,eAAAnlB,MACAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAolB,cAAAplB,MACAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAAqlB,sBAAArlB,OASAmlB,eAAA,WAEA,GAAAG,GAAAplB,EAAAC,QAAA,OAAAmB,QAAA,wBACAikB,EAAAD,EAAA/jB,IAAA,UAEAgkB,GAAApc,IAAA,YAAA,IAUAkc,sBAAA,SAAAhC,GAEA,GAAAiC,GAAAplB,EAAAC,QAAA,OAAAmB,QAAA,wBACAikB,EAAAD,EAAA/jB,IAAA,UAGA,IAAA8hB,EAGA,GAAAvQ,GAAA,mBAFA,IAAAA,GAAA,iBAKAyS,GAAApc,IAAA,WAAA2J,IAUAsS,cAAA,WAEA,GAAAE,GAAAplB,EAAAC,QAAA,OAAAmB,QAAA,wBACAikB,EAAAD,EAAA/jB,IAAA,UAEAgkB,GAAApc,IAAA,YAAA,KAKA,OAAA8D,KC5DAnT,EAAA,iCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,gBAAAH,KAAAwlB,SACAxlB,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAA0C,cAGA8iB,QAAA,WACAtlB,EAAAC,QAAA,OAAAmB,QAAA,YAAA,YAGAoB,YAAA,WACA,GAAA+iB,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,iBACApB,GAAAC,QAAA,OAAAmB,QAAA,cAAA,eAAA0C,WAAAyhB,MAKA,OAAAxY,KCpBAnT,EAAA,4BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACAzH,UAAA,IAIA,OAAAxB,KCPAvG,EAAA,+BAAA,0BAAA,SAAA0hB,GACA,GAAAxX,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAmb,EAEA1J,WAAA,SAAAzR,GACA,GAAA5B,GAAAqhB,SAAAzf,EAAAqlB,IAAA7pB,QAAA,IAAA,IACA,QAAA4C,IAGA,OAAAuF,KCTAlK,EAAA,gCAAA,8BAAA,0BAAA,SAAA2rB,EAAAE,GACA,GAAA1Y,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAgE,WAAA,GAAAyhB,GAEAvlB,EAAAC,QAAA,WAAAiF,MAAA,kBAAApF,KAAA4lB,eAAA5lB,MAEAE,EAAAC,QAAA,WAAAiF,MAAA,iBAAApF,KAAA6lB,cAAA7lB,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAA8lB,uBAGAF,eAAA,SAAArZ,EAAAlM,EAAA0lB,EAAAtR,EAAAnO,GACA,GAAAA,GAAA,mBAAAA,GAAAA,IACA,oBAAAmO,GAAAuR,WACAvR,EAAAuR,SAAA,gBAEA,IAAAjjB,GAAA,GAAA4iB,IACApZ,OAAAA,EACAlM,MAAAA,EACA0lB,QAAAA,EACAtR,MAAAA,EACAnO,KAAAA,GAGA,OADAtG,MAAAgE,WAAA0G,IAAA3H,GACAA,GAGA8iB,cAAA,WACA,MAAA7lB,MAAAgE,YAGA8hB,qBAAA,SAAAzC,GACAA,GACArjB,KAAAgE,WAAAiQ,UAMA,OAAAhH,KAEAnT,EAAA,iCAAA,WCjDA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,oBAAAH,KAAAimB,YAAAjmB,MACAA,KAAAC,SAAAC,EAAAC,QAAA,UAAA,mBAAAH,KAAAwW,WAAAxW,OAGAimB,YAAA,WACA,GAAAR,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,iBACAmkB,GAAAS,MACA,IAAA7jB,GAAArC,IACAoK,GAAAC,KAAAob,EAAAjb,OAAA,SAAA2b,GACA9jB,EAAAmU,WAAA2P,GAAA,KAEAV,EAAAxR,QAEA/T,EAAAC,QAAA,OAAAmB,QAAA,aACApB,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GACApB,EAAAC,QAAA,OAAAmB,QAAA,iBAGAkV,WAAA,SAAA2P,EAAAC,GACAlmB,EAAAC,QAAA,WAAAmB,QAAA,QAAA6kB,EAAA5kB,IAAA,UAAA4kB,EAAAC,KAKA,OAAAnZ,KCnBAnT,EAAA,qCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAAqmB,kBAGAA,gBAAA,SAAAxZ,GAEA,MAAA,YAAAA,EAAAN,SAKA,mBAAAM,GAAAvG,KAAAggB,UAGA,mBAAAzZ,GAAAvG,KAAAggB,QAAAhC,QACAla,EAAAC,KAAAwC,EAAAvG,KAAAggB,QAAAhC,OAAA,SAAAiC,EAAAC,GACA,GAAAjC,GAAArkB,EAAAC,QAAA,UAAAmB,QAAA,YAAAklB,EACAjC,IACAA,EAAApb,IAAA,KAAAod,KAMA,mBAAA1Z,GAAAvG,KAAAggB,QAAA5B,SACAta,EAAAC,KAAAwC,EAAAvG,KAAAggB,QAAA5B,QAAA,SAAA6B,EAAAC,GACA,GAAAja,GAAArM,EAAAC,QAAA,WAAAmB,QAAA,aAAAklB,EACAja,IACAA,EAAApD,IAAA,KAAAod,KAMA,mBAAA1Z,GAAAvG,KAAAggB,QAAAG,OACArc,EAAAC,KAAAwC,EAAAvG,KAAAggB,QAAAG,MAAA,SAAAF,EAAAC,GACA,GAAA9kB,GAAAxB,EAAAC,QAAA,OAAAmB,QAAA,gBACAI,GAAAyH,IAAA,KAAAod,GACAG,QAAAC,aAAA,GAAA,GAAA,sCAAAJ,MAKArmB,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,WAAA,GACApB,EAAAC,QAAA,OAAAY,QAAA,kBAGAb,EAAAC,QAAA,OAAAmB,QAAA,cACApB,EAAAC,QAAA,WAAAmB,QAAA,QAAA,cAGApB,EAAAC,QAAA,WAAAmB,QAAA,MAAA,YAAA,qBACApB,EAAAC,QAAA,OAAAY,QAAA,gBAAA8L,OAGA3M,GAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,MAKA,OAAA2L,KC7DAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,aAAAH,KAAA4mB,iBAEA1mB,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA4mB,gBAAA5mB,MAGAE,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA6mB,cAAA7mB,MAEAE,EAAAC,QAAA,OAAAiF,MAAA,sBAAApF,KAAA8mB,aAAA9mB,MAMAA,KAAA+mB,qBAGAH,gBAAA,SAAAroB,EAAA8B,GAIA,GAAAL,KAAAgnB,qBACA,OAAA,CAOA,IAAA,mBAAA3mB,GACA,GAAAiV,GAAA9V,OAAAjB,EAAA0P,QAAA3H,KAAA,UACAjG,EAAAH,EAAAC,QAAA,OAAAmB,QAAA,kBAAAgU,EAUA,IAPApV,EAAAC,QAAA,OAAAmB,QAAA,sBACApB,EAAAC,QAAA,OAAAmB,QAAA,gBAMA,GAAAjB,EAAAkB,IAAA,OAAA9F,OAAA,CACA,GAAAwrB,GAAA/mB,EAAAC,QAAA,OAAAmB,QAAA,aACApB,GAAAC,QAAA,OAAAmB,QAAA,uBAAAjB,GACAb,OAAAynB,GAAA5f,UAAA,GACAnH,EAAAC,QAAA,OAAAY,QAAA,uBAAAV,KAUA2mB,mBAAA,WACA,MAAA,IAAAnpB,OAAA6Q,KAAA1O,KAAA+mB,kBAAAtrB,QAcAorB,cAAA,SAAAlY,GACA3O,KAAA+mB,iBAAApY,IAAA,GAUAmY,aAAA,SAAAnY,SACA3O,MAAA+mB,iBAAApY,KAKA,OAAA1B,KC5FAnT,EAAA,+BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAknB,kBAGAA,gBAAA,WACA,GAAA7lB,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,oBACAolB,SAAAS,UAAA,KAAA,KAAA7hB,OAAA8hB,SAAAC,KAAA,WAAAhmB,EAAAE,IAAA,MACA,IAAA+lB,GAAA,cACA7lB,EAAA6D,OAAA8hB,SAAAG,WACAC,EAAA/lB,EAAA5F,QAAAyrB,EAAA,GACA5O,SAAAC,IAAA6O,KAKA,OAAAva,KCbAnT,EAAA,6BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,QAAA,cAAAH,KAAAynB,eACAznB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAynB,eACAznB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,sBAAAH,KAAAynB,eAGAznB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,eAAAH,KAAAkgB,aACAlgB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,gBAAAH,KAAA0nB,cAEA1nB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,sBAAAH,KAAA2nB,oBACA3nB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,uBAAAH,KAAA4nB,qBACA5nB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,wBAAAH,KAAA6nB,sBACA7nB,KAAAC,SAAAC,EAAAC,QAAA,WAAA,eAAAH,KAAA0L,cAGA+b,cAAA,WACA,GAAApmB,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,oBACA9B,QAAAsoB,UAAA3hB,IAAA,oBACA3G,OAAA,SAAA2G,IAAA,oBACA9E,EAAAE,IAAA,YACA/B,OAAA6K,KAAAhJ,EAAAE,IAAA,WAAA,SAAAwmB,EAAAC,GACAxoB,OAAAsoB,UAAAxnB,GAAA,0BAAA,KAAAynB,EAAA,SAAAxpB,GACA2B,EAAAC,QAAA,WAAAY,QAAAinB,EAAAzpB,KAEAiB,OAAA,SAAAc,GAAA,0BAAA,KAAAynB,EAAA,SAAAxpB,GACA2B,EAAAC,QAAA,WAAAY,QAAAinB,EAAAzpB,KAEAiB,OAAA,YAAAc,GAAA,0BAAA,KAAAynB,EAAA,SAAAxpB,GACA2B,EAAAC,QAAA,WAAAY,QAAAinB,EAAAzpB,QAMA2hB,YAAA,WACA,YAAAhgB,EAAAC,QAAA,OAAAmB,QAAA,qBACApB,EAAAC,QAAA,OAAAmB,QAAA,cAAA,YAEApB,EAAAC,QAAA,OAAAmB,QAAA,iBAKAomB,aAAA,WACA,aAAAxnB,EAAAC,QAAA,OAAAmB,QAAA,qBACApB,EAAAC,QAAA,OAAAmB,QAAA,cAAA,aAEApB,EAAAC,QAAA,OAAAmB,QAAA,iBAIAqmB,mBAAA,WACA,GAAA7jB,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,wBACA2mB,EAAAnkB,EAAAvC,IAAA,SACArB,GAAAC,QAAA,OAAAmB,QAAA,0BAAA2mB,IAGAL,oBAAA,WACA,GAAA9jB,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,wBACA4mB,EAAApkB,EAAAvC,IAAA,UACArB,GAAAC,QAAA,OAAAmB,QAAA,0BAAA4mB,IAGAL,qBAAA,WACA,GAAA/jB,GAAA5D,EAAAC,QAAA,OAAAmB,QAAA,wBACA6mB,EAAArkB,EAAAvC,IAAA,WACArB,GAAAC,QAAA,OAAAmB,QAAA,0BAAA6mB,IAGAzc,YAAA,WACAxL,EAAAC,QAAA,OAAAmB,QAAA,kBAKA,OAAA2L,KClFAnT,EAAA,gCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKAC,KAAAooB,kBACA,cAGApoB,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAAqoB,cAGAA,YAAA,SAAAhoB,GACA,IAAA,GAAAioB,KAAAjoB,GAAAsf,oBACA,GAAA4I,GAAAD,EACAE,EAAAnoB,EAAAsf,oBAAA2I,EAGApoB,GAAAC,QAAA,QAAAE,EAAAkB,IAAA,SAAAD,QAAA,oBAAAtB,KAAAooB,mBAAApoB,KAAAooB,gBAEA,QAAA,GAAApoB,KAAAooB,iBAAAlsB,QAAAosB,QAGApoB,GAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,KAKA,OAAA2L,KC9BAnT,EAAA,8BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAG,EAAAC,QAAA,WAAAiF,MAAA,qBAAApF,KAAAyoB,kBAAAzoB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,iBAAApF,KAAA0oB,cAAA1oB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,oBAAApF,KAAA2oB,iBAAA3oB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,uBAAApF,KAAA4oB,oBAAA5oB,MAEAE,EAAAC,QAAA,WAAAiF,MAAA,kBAAApF,KAAA6oB,eAAA7oB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,qBAAApF,KAAA8oB,kBAAA9oB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,wBAAApF,KAAA+oB,qBAAA/oB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,uBAAApF,KAAAgpB,oBAAAhpB,OAWAyoB,kBAAA,SAAAtC,EAAAC,GACA,GAAAvG,GAAAsG,EAAA5kB,IAAA,SACAwkB,EAAAI,EAAA5kB,IAAA,WACA+mB,EAAAvC,EAAAuC,KACAW,EAAAlD,EAAAkD,MACApJ,GAAA1W,IAAAmf,EAAAW,GACAjpB,KAAAkpB,kBAAA/C,EAAAC,IAYAsC,cAAA,SAAAvC,EAAAC,GACA,GAAA+C,GAAAhD,EAAA5kB,IAAA,SACAyC,EAAAmiB,EAAA5kB,IAAA,QAAAyC,UAMA,IAJA,mBAAAA,GAAAqc,cACArc,GAAAqc,OAAA8I,EAAA5nB,IAAA,QAGA6kB,EAAA,CACA,GAAAX,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAA8oB,GAEA/e,GAAAC,KAAA+e,EAAA,SAAA/oB,GACAA,IAAA8lB,GACAV,EAAAnb,OAAAjK,KAKA2D,EAAAsG,OAAA6e,GACAnpB,KAAAkpB,kBAAA/C,EAAAC,IAYAwC,oBAAA,SAAAzC,EAAAC,GACA,GAAA+C,GAAAhD,EAAA5kB,IAAA,SACA8nB,EAAAlD,EAAA5kB,IAAA,QAAAyC,UAEA,KAAAoiB,EAAA,CACA,GAAAX,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAA8oB,GAEA/e,GAAAC,KAAA+e,EAAA,SAAA/oB,GACAA,IAAA8lB,GACAV,EAAAnb,OAAAjK,KAKAgpB,EAAA/e,OAAA6e,GACAnpB,KAAAkpB,kBAAA/C,EAAAC,IAWAuC,iBAAA,SAAAxC,EAAAC,GACA,GAAAva,GAAAsa,EAAA5kB,IAAA,SACAyC,EAAAmiB,EAAA5kB,IAAA,QAAAyC,UAMA,IAJA9D,EAAAC,QAAA0L,EAAAtK,IAAA,iBAAAD,QAAA,MAAAuK,SAEA7H,GAAAsc,WAAAzU,EAAAtK,IAAA,QAEA6kB,EAAA,CACA,GAAAX,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAAwL,GAEAzB,GAAAC,KAAA+e,EAAA,SAAA/oB,GACAA,IAAA8lB,GACA9lB,EAAA8I,IAAA,YAAA,KAMAnF,EAAAjD,QAAA,QAAAiD,GAEAhE,KAAAkpB,kBAAA/C,EAAAC,IAWAyC,eAAA,SAAA1C,EAAAC,GACA,GAAA9f,GAAA6f,EAAA5kB,IAAA,QACA+iB,EAAAhe,EAAAge,OAEArb,EAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBACA8I,GAAAC,KAAAia,EAAA,SAAAvhB,GACA,GAAAkmB,GAAAlmB,EAAAkmB,OACApJ,EAAA9c,EAAA1C,KACAwf,GAAA1W,IAAA,QAAA8f,KAOAhgB,EAAAid,OACAlmB,KAAAkpB,kBAAA/C,EAAAC,IAGA0C,kBAAA,SAAA3C,EAAAC,GACA,GAAA/lB,GAAA8lB,EAAA5kB,IAAA,QAEA,KAAA6kB,EAAA,CACA,GAAAX,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAAA,GAEA+J,GAAAC,KAAA+e,EAAA,SAAArmB,GACAA,IAAAojB,GACAV,EAAAnb,OAAAvH,KAKA1C,EAAA2D,WAAAsG,OAAAjK,GACAL,KAAAkpB,kBAAA/C,EAAAC,IAGA2C,qBAAA,SAAA5C,EAAAC,GACA,GAAA/lB,GAAA8lB,EAAA5kB,IAAA,SACAyC,EAAAmiB,EAAA5kB,IAAA,QAAAyC,UAGA,IAFAA,EAAA0G,IAAArK,IAEA+lB,EAAA,CACA,GAAAX,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAAA,GAEA+J,GAAAC,KAAA+e,EAAA,SAAA/oB,GACAA,IAAA8lB,GACA9lB,EAAA8I,IAAA,YAAA,KAKAnJ,KAAAkpB,kBAAA/C,EAAAC,IAGA4C,oBAAA,SAAA7C,EAAAC,GACA,GAAA9f,GAAA6f,EAAA5kB,IAAA,QACAyC,EAAAsC,EAAAtC,WAEAslB,EAAAhjB,EAAAgjB,SAEAlf,GAAAC,KAAAif,EAAA,SAAAvmB,GACA,GAAAkmB,GAAAlmB,EAAAkmB,OACAM,EAAAxmB,EAAA1C,KACAkpB,GAAApgB,IAAA,QAAA8f,KAIAjlB,EAAAkiB,OACAlmB,KAAAkpB,kBAAA/C,EAAAC,IAWA8C,kBAAA,SAAA/C,EAAAC,GACA,GAAAA,GAAA,mBAAAA,IAAAA,CACA,KAAAA,EAAA,CAEAlmB,EAAAC,QAAA,OAAAmB,QAAA,YACA,IAAAmkB,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,iBACAmkB,GAAAnb,OAAA6b,GACA,GAAAV,EAAAhqB,SACAyE,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GACApB,EAAAC,QAAA,OAAAmB,QAAA,oBAOA,OAAA2L,KCrOAnT,EAAA,oCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAG,EAAAC,QAAA,OAAAiF,MAAA,kBAAApF,KAAAwpB,eAAAxpB,OAGAwpB,eAAA,SAAAnpB,GAEA,GAAAxE,KAEAuO,GAAAC,KAAAhK,EAAAopB,WAAA,SAAAla,EAAAZ,GACA,GAAAY,YAAAnG,UAAAK,WAAA,CACA,GAAAigB,GAAAxpB,EAAAC,QAAA,OAAAmB,QAAA,uBAAAiO,EACA1T,GAAA8S,GAAA+a,MACAna,aAAAnG,UAAAC,QACAxN,EAAA8S,GAAA3O,KAAAwpB,eAAAja,KAEAvP,KAGA,IAAA2pB,GAAAtpB,EAAAgL,OAMA,OAJAjB,GAAAC,KAAAxO,EAAA,SAAA0T,EAAAZ,GACAgb,EAAAxgB,IAAAwF,EAAAY,KAGAoa,IAIA,OAAA1c,KC3BAnT,EAAA,uCAAA,gCAAA,SAAA8f,GACA,GAAA3M,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAA4pB,oBAAA5pB,OAUA4pB,oBAAA,SAAAvpB,GAEA,GAAAwS,GAAAxS,EAAAkB,IAAA,QAEAsoB,EAAA3pB,EAAAC,QAAA0S,GAAAvR,QAAA,uBAAAjB,IAAAuZ,CAEA,OAAAiQ,KAKA,OAAA5c,KC5BAnT,EAAA,0CAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,OAAAiF,MAAA,iBAAApF,KAAAyZ,cAAAzZ,MAGAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAAyZ,cAAAzZ,OAYAyZ,cAAA,SAAAlb,EAAAuL,EAAA+B,EAAA7O,GACA,GAAA1C,GAAAwP,EAAAvI,IAAA,QACA0nB,EAAApd,EAAAtK,IAAAjH,GACA0C,EAAAA,GAAA,IACAA,KAEAA,EAAAkD,EAAAC,QAAA2J,EAAAvI,IAAA,SAAAD,QAAA,uBAAA/C,EAAAsN,EAAAvR,EAAAwP,IAGA,mBAAA9M,KACAA,EAAAwC,OAAAjB,EAAA0P,QAAAsB,OAIA1D,EAAA1C,IAAA7O,EAAA0C,GAAA8M,aAAAA,IACA5J,EAAAC,QAAA,WAAA7F,GAAAyG,QAAA,sBAAA8K,EAAA/B,EAEA,IAAA0e,GAAAxrB,EAEA+oB,GACAuC,KAAAhuB,EACA2uB,OAAAA,EACAT,MAAAA,GAGAnnB,EAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBAGAmT,GAFApT,EAAAE,IAAA,OAGAuoB,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,WAAArc,EAAAvI,IAAA,SAAA,SAAA0nB,EAAA,OAAAT,GAGAtoB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,gBAAAuK,EAAAka,EAAAtR,KAKA,OAAAxH,KAEAnT,EAAA,wCAAA,gCAAA,SAAA8f,GCnEA,GAAAna,GAAAC,WAAA+H,cAAA7H,QACAE,SAAA,6BACAkC,UAAA4X,EAEA7Z,WAAA,SAAAuG,GACAtG,KAAAgE,WAAAhE,KAAAK,MAAAkB,IAAA,YACAvB,KAAAkU,kBAAArI,UAAAvF,EAAAuF,WACA7L,KAAA6L,UAAAvF,EAAAuF,SACA,IAAAlN,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAAvL,GAAA,UAAAhG,EAAA0F,KAAAI,OAAAJ,KAIAA,MAAAK,MAAAC,GAAA,WAAAN,KAAAI,OAAAJ,OAGAkG,gBAAA,WACA,GAAAvH,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAA1F,IAAA,UAAA7L,EAAA0F,KAAAI,SAMAkX,eAAA,WACApX,EAAAC,QAAA,OAAAY,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,WACA3L,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,uBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAO,SAAA,WAIAL,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAgB,gBAAA,WACA,GAAAqB,GAAArC,IACA,QACA4Y,cAAA,WACA,GAAA5Y,KAAArB,KACA,IAAA,GAAArE,KAAA0F,MAAArB,KACA,GAAAqB,KAAArB,KAAAZ,eAAAzD,IACA+H,EAAAwJ,UAAAtK,IAAAjH,KAAA0F,KAAArB,KAAArE,GACA,MAAA,uBAKA,OAAA,IAEAue,cAAA,WACA,GAAA1B,GAAAjX,EAAAC,QAAA,OAAAmB,QAAA,eAAA,yBAAAtB,KAAA6S,KACA,OAAAsE,GAAAnX,OAGAmB,cAAA,WACA,GAAAC,GAAA,EAWA,OATAA,IADA,mBAAApB,MAAAyO,MACAzO,KAAAyO,MAEA,YAGAzO,KAAA6W,QACAzV,GAAA,aAGAA,GAGA2V,YAAA,WACA,MAAA/W,MAAA6W,MACA7W,KAAA6W,MAEA,MAKAnP,WAAA,SAAAC,EAAA3F,GACAxC,OAAAmI,EAAAzF,IAAAC,KAAA,0BAAAyF,OAAA5F,EAAAE,MAIA,OAAAzC,KChFA3F,EAAA,6BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA+K,UAAA,EACA8E,iBAAA,EACAtC,OAAA,GAGA9W,WAAA,WAEAG,EAAAC,QAAA,OAAAY,QAAA,oBAAAf,MACAE,EAAAC,QAAAH,KAAAuB,IAAA,SAAAR,QAAA,oBAAAf,MACAE,EAAAC,QAAA,gBAAAH,KAAAuB,IAAA,SAAAR,QAAA,oBAAAf,MACAA,KAAAM,GAAA,eAAAN,KAAA+pB,eAAA/pB,MAOA,mBAAAA,MAAAgE,YAEAhE,KAAAuB,IAAA,mBAAA,mBAAAvB,MAAAgE,WAAAgJ,QAAAqS,YACArf,KAAAC,SAAAC,EAAAC,QAAA,OAAA,kBAAAH,KAAAgqB,YAaAA,UAAA,SAAApK,GACA1f,EAAAC,QAAA,OAAAY,QAAA,sBAAA6e,EAAA5f,OAGA+pB,eAAA,WACA/pB,KAAAuB,IAAA,UACArB,EAAAC,QAAA,UAAAmB,QAAA,gBAAA,WAAAtB,KAAAuB,IAAA,QAAA,UACArB,EAAAC,QAAA,OAAAmB,QAAA,uBAAA,WAAAtB,KAAAuB,IAAA,QAAA,YAEArB,EAAAC,QAAA,UAAAmB,QAAA,eAAA,WAAAtB,KAAAuB,IAAA,QAAA,UACArB,EAAAC,QAAA,OAAAmB,QAAA,sBAAA,WAAAtB,KAAAuB,IAAA,QAAA,aAKA,OAAAlB,KCzDAvG,EAAA,gCAAA,2BAAA,SAAAgQ,GACA,GAAA9F,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAyJ,EAEA/J,WAAA,SAAAyK,EAAAwC,GACAhN,KAAAgN,QAAAA,QAGA,OAAAhJ,KCRAlK,EAAA,4BAAA,uCAAA,gCAAA,SAAAmwB,EAAAC,GACA,GAAAjd,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAG,EAAAC,QAAA,YAAAiF,MAAA,uBAAApF,KAAA4pB,oBAAA5pB,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,YAAA,oBAAAH,KAAAmqB,2BAGAP,oBAAA,SAAAvpB,GACA,MAAA4pB,IAUAE,yBAAA,SAAA9pB,GACAA,EAAA8I,IAAA,WAAA,GAAA+gB,GAAA7pB,EAAAkB,IAAA,gBAKA,OAAA0L,KCvBAnT,EAAA,mCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,uBAAAiF,MAAA,iBAAA,WAAA,OAAA,IAGAlF,EAAAC,QAAA,UAAAiF,MAAA,uBAAApF,KAAA+L,cAAA/L,OAaA+L,cAAA,SAAAxN,EAAAshB,EAAAvlB,EAAA8vB,GACA,GAAA5qB,OAAAjB,EAAA0P,QAAAqa,KAAA,WACA,GAAAtrB,GAAA,MAEA,IAAAA,GAAA,CAGA,OAAAA,KAKA,OAAAiQ,KClCAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,aAAAH,KAAA8d,WACA9d,KAAAC,SAAAC,EAAAC,QAAA,OAAA,eAAAH,KAAAge,aACAhe,KAAAC,SAAAC,EAAAC,QAAA,OAAA,kBAAAH,KAAAqqB,iBAaAvM,UAAA,SAAAvf,EAAA8B,GACA,GAAAgB,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACA4M,EAAA7M,EAAAE,IAAA,MACAsR,EAAA3S,EAAAC,QAAA+N,GAAA5M,QAAA,WAAAjB,EAAAkB,IAAA,QACArB,GAAAC,QAAA,OAAAmB,QAAA,cAAA,gBAAAjB,MAAAA,EAAA4U,gBAAApC,EAAAtR,IAAA,oBAWAyc,YAAA,SAAAzf,EAAAsN,GACA,GAAA8d,GAAAzpB,EAAAC,QAAA,OAAAmB,QAAA,kBAAAuK,GAGA4I,GACAqV,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,UACAH,SAAA,WAGA1f,GACAtC,WAAA6H,EAAA7H,YAGAyhB,EAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAAwL,GAEAzB,GAAAC,KAAA+e,EAAA,SAAArmB,GACA,GAAAuD,GAAAvD,EAAAxB,IAAA,OACA,oBAAA+E,GAAAge,QACAla,EAAAC,KAAA/D,EAAAge,OAAA,SAAAC,EAAA9mB,GACA8mB,EAAAlkB,OAAAwL,IACAvF,EAAAge,OAAA7mB,GAAA4C,MAAAspB,KAIA5mB,EAAAoG,IAAA,OAAA7C,GACAvD,EAAAoG,IAAA,QAAAwgB,GACA5mB,EAAAoG,IAAA,YAAA,KAGAjJ,EAAAC,QAAA,WAAAmB,QAAA,kBAAA,eAAAqoB,EAAA,KAAAlV,EAAAnO,EAEA,IAAAjF,GAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACA4M,EAAA7M,EAAAE,IAAA,KACArB,GAAAC,QAAA+N,GAAA5M,QAAA,SAAAuK,IAWAwe,eAAA,SAAA9rB,EAAA8B,GACA,GAAAspB,GAAAzpB,EAAAC,QAAA,OAAAmB,QAAA,kBAAAjB,GACAgB,EAAAnB,EAAAC,QAAA,OAAAmB,QAAA,qBACA4M,EAAA7M,EAAAE,IAAA,KAGAooB,GAAAxgB,IAAA,QAAAwgB,EAAApoB,IAAA,SAAA,QAEA,IAAA+oB,GAAApqB,EAAAC,QAAA+N,GAAA5M,QAAA,YACAqoB,GAAAxgB,IAAA,KAAAmhB,GAGApqB,EAAAC,QAAA+N,GAAA5M,QAAA,MAAAqoB,GAAA,GAAA,EAAA,YAGA,IAAAlV,IACAqV,OAAAzpB,EAAAkB,IAAA,cACAkT,MAAApU,EAAAkB,IAAA,SACA4kB,OAAA,aACAH,SAAA,cAGA1f,GACAtC,WAAA9D,EAAAC,QAAA+N,GAAA5M,QAAA,kBAGApB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,kBAAAqoB,EAAA,KAAAlV,EAAAnO,GAEAjG,EAAAU,QAAA,eAAAV,GAGAH,EAAAC,QAAA,OAAAmB,QAAA,eAKA,OAAA2L,KCnHAnT,EAAA,6BACA,iCACA,SACAiQ,GAEA,GAAAkD,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAuqB,qBAAA,GAAAxgB,EACA,IAAA1H,GAAArC,IACAoK,GAAAC,KAAAc,UAAA,SAAAqf,GACA,GAAAA,EAAAC,KACA,GAAAA,GAAA,GAAA1gB,GAAAygB,EAAAC,UAEA,IAAAA,GAAA,EAGApoB,GAAAkoB,qBAAA7f,KACAjM,GAAA+rB,EAAA/rB,GACAgW,MAAA+V,EAAA/V,MACAgW,KAAAA,EACAvgB,cAAAsgB,EAAAtgB,iBAIA,IAAAwgB,GAAA1qB,KAAAuqB,qBAAAhpB,IAAA,UAAAA,IAAA,QAEA0H,EAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBACA8I,GAAAC,KAAApB,EAAAuB,OAAA,SAAA+Z,GAEA,WAAAA,EAAAhjB,IAAA,SACAmpB,EAAAhgB,KACAjM,GAAA8lB,EAAAhjB,IAAA,MACAkT,MAAA8P,EAAAhjB,IAAA,SACAopB,IAAAtoB,EAAAuoB,kBAAArG,EAAAhjB,IAAA,WAKA,IAAAspB,GAAA,GAAA9gB,GAEArI,EAAAxB,EAAAC,QAAA,OAAAmB,QAAA,iBACAwpB,EAAAppB,EAAAH,IAAA,YAAAA,IAAA,eACA6I,GAAAC,KAAAygB,EAAAtgB,OAAA,SAAAugB,GACAF,EAAAngB,KACA+J,MAAAsW,EAAAxpB,IAAA,QACAopB,IAAA,SAAAI,EAAAxpB,IAAA,QAAA,QAIAvB,KAAAuqB,qBAAAhpB,IAAA,SAAA4H,IAAA,OAAA0hB,GAEA7qB,KAAAgrB,kBACAhrB,KAAA8J,gBACA9J,KAAAyV,MAAA,EAKAzV,KAAAC,SAAAC,EAAAC,QAAA,aAAA,iBAAAH,KAAAirB,eACAjrB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,YAAAH,KAAAkrB,cACAlrB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,eAAAH,KAAAmrB,iBACAnrB,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,gBAAAH,KAAAorB,gBACAprB,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,gBAAAH,KAAAorB,gBAGAlrB,EAAAC,QAAA,aAAAiF,MAAA,wBAAApF,KAAAqrB,qBAAArrB,MACAE,EAAAC,QAAA,aAAAiF,MAAA,wBAAApF,KAAAsrB,qBAAAtrB,MAGAE,EAAAC,QAAA,aAAAiF,MAAA,iBAAApF,KAAA6lB,cAAA7lB,MACAE,EAAAC,QAAA,aAAAiF,MAAA,eAAApF,KAAAurB,gBAAAvrB,MAGAA,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,iBAAAH,KAAAgqB,WAGAhqB,KAAAC,SAAAC,EAAAC,QAAA,OAAA,mBAAAH,KAAAwrB,iBAGAtrB,EAAAC,QAAA,OAAAiF,MAAA,qBAAApF,KAAA4qB,kBAAA5qB,OAoBAyrB,cAAA,SAAAhsB,GACA,GAAAisB,GAAAxrB,EAAAC,QAAA,aAAAmB,QAAA,YACAe,EAAArC,IAMAA,MAAA2rB,SACA,IAAAtpB,GAAArC,IAEAR,QAAAC,EAAAyC,IAAAC,KAAA,eAAAkI,KAAA,WACA,GAAA,mBAAA7K,QAAAQ,MAAAsG,KAAA,WAAA,CACA,GAAAmR,GAAAjY,OAAAQ,MAAAyX,KAAA,WACArC,MAAA,mBACArU,QAAA,QACAmG,UACA2V,EAAA,SACAC,EAAA,UAEAlF,aAAA,OACAgU,YAAA,EACAjU,MAAA,gBACAkU,UAAA,IAEAC,OAAA,WACAJ,EAAA7hB,SAAApK,EAAAY,OACAL,KAAAid,WAAAzd,OAAA,uBACA,IAAAwrB,GAAAxrB,OAAAQ,KAAAiO,QAAA8d,KAAA,WACA,IAAAf,EAAAvvB,SACAuvB,EAAAxrB,OAAAC,EAAAyC,IAAAC,KAAA,aAGAE,EAAAipB,qBAAA7rB,EAAAY,OACAgC,EAAAgpB,qBAAAL,IAGAgB,QAAA,cAKAxsB,QAAAQ,MAAAsG,KAAA,UAAAmR,EAAAhZ,QAKAwsB,cAAA,SAAA1sB,EAAA0tB,GAOA,GAAA,mBAAAjsB,MAAA8J,aAAAvI,IAAA,iBAAA,gBAAAvB,KAAA8J,aAAAvI,IAAA,gBAAAA,IAAA,QAAA,CAEAmX,QAAAC,IAAAsT,EAEA,IAAAC,GAAA1sB,OAAAQ,KAAAgrB,gBAAAzb,MACA4c,EAAA3sB,OAAAQ,KAAAgrB,gBAAAoB,QACAC,EAAAF,EAAAF,EAAA1qB,IAAA,OAAA9F,OAEAkvB,EAAA,mBAAAsB,GAAA1qB,IAAA,WAAA0qB,EAAA1qB,IAAA,WAAA0qB,EAAA1qB,IAAA,MAEA2qB,GAAAA,EAAAI,OAAA,EAAAH,GAAAxB,EAAAuB,EAAAI,OAAAH,GACA3sB,OAAAQ,KAAAgrB,gBAAAzb,IAAA2c,GAAAE,MAAAC,GAAAtrB,QAAA,cACA,IAAA,OAAAf,KAAA8J,aAAAvI,IAAA,QACA/B,OAAAQ,KAAAgrB,gBAAAuB,WAAA,aAAAN,EAAA1qB,IAAA,YACA,CACA,GAAA2qB,GAAA1sB,OAAAQ,KAAAgrB,gBAAAzb,MACA4c,EAAA3sB,OAAAQ,KAAAgrB,gBAAAoB,QACAC,EAAAF,EAAAF,EAAA1qB,IAAA,OAAA9F,MACAywB,GAAAA,EAAAI,OAAA,EAAAH,GAAAF,EAAA1qB,IAAA,OAAA2qB,EAAAI,OAAAH,GACA3sB,OAAAQ,KAAAgrB,gBAAAzb,IAAA2c,GAAAE,MAAAC,GAAAtrB,QAAA,YAIAmqB,aAAA,SAAArL,GAEA,WAAAA,EAAAte,IAAA,SACAvB,KAAAuqB,qBAAAhpB,IAAA,UAAAA,IAAA,QAAAmJ,KACAjM,GAAAohB,EAAAte,IAAA,MACAkT,MAAAoL,EAAAte,IAAA,SACAopB,IAAA3qB,KAAA4qB,kBAAA/K,EAAAte,IAAA,QACAirB,QAAAxsB,KAAAysB,sBAAA5M,EAAAte,IAAA,WAKA4pB,gBAAA,SAAAtL,GACA,GAAA6M,GAAA7M,EAAAte,IAAA,MACA0qB,EAAAjsB,KAAAuqB,qBAAAhpB,IAAA,UAAAA,IAAA,QAAAA,IAAAmrB,EACA1sB,MAAAuqB,qBAAAhpB,IAAA,UAAAA,IAAA,QAAA+I,OAAA2hB,IAGAb,eAAA,SAAA7B,GACA,GAAAsB,GAAA,GAAA9gB,GAEArI,EAAAxB,EAAAC,QAAA,OAAAmB,QAAA,iBACAwpB,EAAAppB,EAAAH,IAAA,YAAAA,IAAA,eAEA6I,GAAAC,KAAAygB,EAAAtgB,OAAA,SAAAmiB,GACA9B,EAAAngB,KACA+J,MAAAkY,EAAAprB,IAAA,QACAopB,IAAA,SAAAgC,EAAAprB,IAAA,QAAA,QAIAvB,KAAAuqB,qBAAAhpB,IAAA,SAAA4H,IAAA,OAAA0hB,IAGA+B,cAAA,SAAAruB,GACA,YAAAiB,OAAAjB,EAAA0P,QAAA,GAAApO,SAAA,SAAAL,OAAAjB,EAAA0P,QAAA,GAAApO,SACAL,OAAAjB,EAAA0P,QAAAlI,SAAA5D,KAAA,eAAAoc,SAIAsO,gBAAA,SAAAtuB,GACA,GAAAyB,KAAAyV,KAAA,CACAlX,EAAAuuB,gBACA,IAAAC,GAAA/sB,KAAAskB,OAAAra,OAAAlB,QAAA,IAAA,EACAgkB,IACA/sB,KAAAirB,cAAA1sB,EAAAwuB,KAKAC,YAAA,SAAAzuB,GACAyB,KAAAyV,OACAlX,EAAAuuB,iBACA9sB,KAAAitB,gBAAA,QAIAC,cAAA,SAAA3uB,GACAyB,KAAAyV,OACAlX,EAAAuuB,iBACA9sB,KAAAitB,gBAAA,UAIAA,gBAAA,SAAAE,GACA,GAAA,QAAAA,EACA,GAAAC,GAAA,MAEA,IAAAA,IAAA,CAGA,IAAA,EAAAptB,KAAAskB,OAAAra,OAAAlB,QAAA,IAAAtN,OAAA,CACA,GAAAsxB,GAAA/sB,KAAAskB,OAAAra,OAAAlB,QAAA,IAAA,GACAskB,EAAArtB,KAAAskB,OAAApoB,QAAA6wB,EACAA,GAAA5jB,IAAA,UAAA,EAEA,IAAAmkB,GAAAttB,KAAAskB,OAAA9Z,OAAA6iB,EAAAD,EACAE,IACAA,EAAAnkB,IAAA,UAAA,OAKA,GAAAnJ,KAAAskB,OAAAra,OAAAlB,QAAA,IACA2P,QAAAC,IAAA,UACA,EAAA3Y,KAAAutB,SAAAtjB,OAAAlB,QAAA,IACA2P,QAAAC,IAAA,YAGA,EAAA3Y,KAAAskB,OAAA9Z,OAAA/O,OAEAuE,KAAAskB,OAAA9Z,OAAA,GAAArB,IAAA,UAAA,GAGAnJ,KAAAwtB,OAAAhjB,OAAA,GAAArB,IAAA,UAAA,IAKAkiB,qBAAA,SAAA7Z,GACAxR,KAAAgrB,eAAAxZ,GAGA8Z,qBAAA,SAAAxhB,GACA9J,KAAA8J,aAAAA,GAGA+b,cAAA,WACA,MAAA7lB,MAAAuqB,sBAGAgB,gBAAA,SAAA9sB,GACA,MAAAuB,MAAAuqB,qBAAAhpB,IAAA9C,IAGAgvB,WAAA,SAAAhY,GACAzV,KAAAyV,KAAAA,EACArL,EAAAC,KAAArK,KAAAuqB,qBAAAhpB,IAAA,UAAAiJ,OAAA,SAAAnK,GACAA,EAAA8I,IAAA,UAAA,MAIA6gB,UAAA,SAAAnK,GACA,GAAA6N,GAAA7N,EAAAte,IAAA,OACAosB,EAAA3tB,KAAAuqB,qBAAAhpB,IAAA,UAAAA,IAAA,QAAAA,IAAAse,EAAAte,IAAA,MACA,oBAAAosB,IACAA,EAAAxkB,IAAA,MAAAnJ,KAAA4qB,kBAAA8C,KAKA9C,kBAAA,SAAAjc,GACA,MAAA,UAAAA,EAAA,KAGA8d,sBAAA,SAAA9d,GACA,MAAA,UAAAA,EAAA,UAGA6c,gBAAA,SAAA3f,EAAA+T,EAAA9V,GACA,GAAA8jB,GAAA5tB,KAAA4qB,kBAAAhL,EAAAiO,oBAAA,KACAH,EAAA1tB,KAAA4qB,kBAAAhL,EAAAre,IAAA,QACAod,EAAA7U,EAAAvI,IAAA,QACAusB,EAAAjiB,EAAAtK,IAAAod,EACA,IAAA,gBAAAmP,GAAA,CACA,GAAAC,GAAA,GAAAC,QAAAJ,EAAA,IACAK,QAAAH,EAAAjyB,QAAAkyB,EAAAL,GACA7hB,EAAA1C,IAAAwV,EAAAsP,WAMA,OAAAhhB,KC7UAnT,EAAA,uCAAA,4BAAA,SAAA0P,GACA,GAAAxF,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAmJ,GAEA,OAAAxF,KCJAlK,EAAA,+BAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,KACAC,SAAA,6BAEAc,QACA2d,MAAA,aAGA2P,UAAA,WACAhuB,EAAAC,QAAA,aAAAmB,QAAA,aAAAtB,KAAAK,MAAAkB,IAAA,UAIA,OAAA9B,KCdA3F,EAAA,iCAAA,6BAAA,SAAAq0B,GACA,GAAA1uB,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,KACAmC,UAAAmsB,EAEApuB,WAAA,WACAG,EAAAC,QAAA,cAAAiF,MAAA,iBAAApF,KAAAouB,cAAApuB,MACAE,EAAAC,QAAA,cAAAiF,MAAA,eAAApF,KAAAquB,aAAAruB,OAGAsuB,OAAA,SAAAC,EAAA9wB,EAAAuG,GACA,MAAA,UAAAuqB,EAAAhtB,IAAA,YAGA6sB,cAAA,SAAAzY,GACA3V,KAAAsuB,OAAA,SAAAC,EAAA9wB,EAAAuG,GACA,MAAA2R,IAAA4Y,EAAAhtB,IAAA,YAEAvB,KAAAI,SACAF,EAAAC,QAAA,cAAAY,QAAA,uBAGAstB,aAAA,SAAAG,GACAxuB,KAAAsuB,OAAA,SAAAC,EAAA9wB,EAAAuG,GACA,GAAAyQ,GAAA8Z,EAAAhtB,IAAA,SAAAktB,cAAAvyB,QAAAsyB,EAAAC,cAAA5yB,QAAA,IAAA,MAAA,EACA8uB,EAAA4D,EAAAhtB,IAAA,OAAAktB,cAAAvyB,QAAAsyB,EAAAC,gBAAA,CACA,OAAAha,IAAAkW,GAEA3qB,KAAAI,SACAF,EAAAC,QAAA,cAAAY,QAAA,wBAKA,OAAAtB,KClCA3F,EAAA,oCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,KACAC,SAAA,iCACAc,QACA2d,MAAA,WAGAxe,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,cAAA,qBAAAH,KAAA0uB,eAGAC,QAAA,WACA3uB,KAAA4uB,aACA5uB,KAAA6uB,aAGAD,WAAA,WACA1uB,EAAAC,QAAA,cAAAmB,QAAA,iBAAAtB,KAAAK,MAAAkB,IAAA,QAGAstB,UAAA,WACA7uB,KAAAQ,IAAA4L,SAAA,UACApM,KAAAQ,IAAAsuB,WAAAnhB,YAAA,WAGA+gB,aAAA,WACA1uB,KAAAQ,IAAAmN,YAAA,YAIA,OAAAlO,KC/BA3F,EAAA,sCAAA,kCAAA,SAAAi1B,GACA,GAAAtvB,GAAAC,WAAAqC,eAAAnC,QACAC,QAAA,KACAmC,UAAA+sB,EAEAhvB,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,cAAA,OAAAH,KAAAI,OAAAJ,OAIAsuB,OAAA,SAAAC,EAAA9wB,EAAAuG,GACA,MAAA,GAAAuqB,EAAAhtB,IAAA,QAAA9F,SAIA,OAAAgE,KCfA3F,EAAA,qCAAA,WACA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAE,SAAA,gCACAc,QACAouB,cAAA,gBAEAC,aAAA,SAAAC,GAEA,GAAA,IAAAA,EAAA9f,QAAA,CAEA,GAAA+f,GAAA3vB,OAAA,8CAAA8iB,QAAAhc,KAAA,MASA,OAPApG,GAAAC,QAAA,aAAAmB,QAAA,aAAA6tB,GAGA3vB,OAAA,mBAAAyH,IAAA,UAAA,QACAzH,OAAA,mBAAAmO,cACAnO,OAAA,oBAAAmO,YAAA,uBACAnO,QAAA,4BAAAmO,YAAA,2BAGA,GAAA3Q,GAAAgD,KAAAQ,IAAA2B,KAAA,SAAAoN,KACArP,GAAAC,QAAA,cAAAmB,QAAA,eAAAtE,KAIA,OAAAyC,KC1BA3F,EAAA,kCAAA,WACA,GAAA2F,GAAAC,WAAA+D,WAAA7D,QACAsC,GAAA,kBACApC,SAAA,yBAEA4D,SACA4qB,OAAA,oBACAc,SAAA,sBACA3E,KAAA,oBAIA,OAAAhrB,KCXA3F,EAAA,+BACA,2BACA,sCACA,4BACA,gCACA,iCACA,qCACA,kCACA,gCACA,SACAu1B,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,GAAA3iB,GAAAvN,WAAA7B,OAAA+B,QAEAwsB,MAAA,EACAyD,IAAA,GAEA9vB,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAA8vB,eACA9vB,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAA+vB,qBACA/vB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,eAAAH,KAAAgwB,mBACAhwB,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAA,WACAX,OAAA,eAAAc,GAAA,QAAA,SAAA/B,GACA,GAAA0xB,GAAAzwB,OAAAQ,KACA,IAAAiwB,EAAAnB,WAAAoB,SAAA,mBAIA,MAHA1wB,QAAA,mBAAAyH,IAAA,UAAA,QACAzH,OAAA,oBAAAmO,YAAA,uBACAnO,QAAA,4BAAAmO,YAAA,0BAGA,IAAA6K,GAAAyX,EAAAE,QAAA,eAAAhuB,KAAA,YAAAoN,KACArQ,SAAAsZ,GACAyX,EAAAE,QAAA,eAAAhuB,KAAA,YAAAoN,IAAAiJ,EAAA,KAAA2N,SACAjmB,EAAAC,QAAA,aAAAmB,QAAA,YAAAkX,EAAA/c,OAAA,KAEAw0B,EAAAE,QAAA,eAAAhuB,KAAA,YAAAoN,IAAA,KAAA4W,SACAjmB,EAAAC,QAAA,aAAAmB,QAAA,YAAA,IAGApB,EAAAC,QAAA,aAAAmB,QAAA,UAAA,KAGA2uB,EAAAE,QAAA,eAAAhuB,KAAA,YAAAiK,SAAA,kBAGA,IAAAgkB,GAAAH,EAAA3H,KAAA;AACA2H,EAAA3H,KAAA,eAAA,OACA2H,EAAA3pB,KAAA,eAAA8pB,EAEA,IAAAC,GAAAJ,EAAAE,QAAA,6BACA,IAAAE,EAAAluB,KAAA,gBAAA1G,OACA40B,EAAAluB,KAAA,gBAAAiK,SAAA,2BAEAikB,EAAAjkB,SAAA,2BAGA5M,OAAA,mBAAAyH,IAAA,UAAA,SACA7H,WAAA,WACAI,OAAA,mBAAA2C,KAAA,qBAAAA,KAAA,SAAAoM,SACA,QAIA,IAAAlM,GAAArC,IACAE,GAAAC,QAAA,aAAAiF,MAAA,YAAA,SAAA8B,GACA7E,EAAA+pB,MAAAllB,IAEAhH,EAAAC,QAAA,aAAAiF,MAAA,YAAA,WACA,MAAA/C,GAAA+pB,OAGA,IAAA/pB,GAAArC,IACAE,GAAAC,QAAA,aAAAiF,MAAA,UAAA,SAAApI,GACAqF,EAAAwtB,IAAA7yB,IAEAkD,EAAAC,QAAA,aAAAiF,MAAA,UAAA,WACA,MAAA/C,GAAAwtB,MAGA3vB,EAAAC,QAAA,aAAAiF,MAAA,aAAApF,KAAAkuB,UAAAoC,KAAAtwB,OAGAA,KAAAC,SAAAC,EAAAC,QAAA,+BAAA,iBAAAH,KAAA6Y,eAGA7Y,KAAAC,SAAAC,EAAAC,QAAA,cAAA,QAAA,SAAA5B,EAAAgyB,GACAluB,EAAAmuB,eAAA,EAAAD,KAEAvwB,KAAAC,SAAAC,EAAAC,QAAA,cAAA,UAAA,SAAA5B,EAAAgyB,GACA/wB,OAAA+wB,GAAAJ,QAAA,eAAAhuB,KAAA,YAAAoqB,WAAA,eAEAvsB,KAAAC,SAAAC,EAAAC,QAAA,cAAA,QAAA,SAAA5B,EAAAgyB,GACAluB,EAAAouB,cAAAlyB,EAAAgyB,MAIAT,cAAA,WACA,GAAA/lB,GAAA7J,EAAAC,QAAA,aAAAmB,QAAA,kBACA6J,IACApB,GAAAM,KAAA,SAAAsL,GACAA,EAAApU,IAAA,QAAA8I,KAAA,SAAAsgB,GACAxf,EAAAzO,MACA+X,MAAAkW,EAAAppB,IAAA,SACAopB,IAAAA,EAAAppB,IAAA,OACAoU,QAAAA,EAAApU,IAAA,WAIA,IAAAmvB,GAAA,GAAAd,EACAc,GAAAtwB,QACA,IAAAuwB,GAAA,GAAArB,GAAAnkB,GACAylB,EAAA,GAAApB,IACAxrB,WAAA2sB,IAEAE,EAAA,GAAAnB,IACA1rB,WAAA+F,GAGA2mB,GAAAI,UAAA,QAAA/sB,KAAA6sB,GACAF,EAAAI,UAAA,YAAA/sB,KAAA8sB,GACAH,EAAAI,UAAA,UAAA/sB,KAAA,GAAA4rB,GAEA,IAAAttB,GAAArC,IACAA,MAAAC,SAAAC,EAAAC,QAAA,aAAA,OAAA,WAEAkC,EAAAytB,mBAIAC,oBAAA,SAAAjmB,EAAA+B,GACA,GAAA,mBAAA/B,GAAAvI,IAAA,mBACAuI,EAAAvI,IAAA,kBAAA,CACA,GAAAjH,GAAAwP,EAAAvI,IAAA,OACAvB,MAAAC,SAAAC,EAAAC,QAAA,WAAA7F,GAAA,iBAAA0F,KAAA6Y,iBAGAA,cAAA,SAAA/O,EAAA+B,EAAApM,GAEA,GAAAD,OAAA,mBAAA/D,QAAAuE,KAAA8vB,gBAGAtwB,OAAA,cAAAc,GAAA,SAAA,WAEA,GAAA,GAAAd,OAAA,oBAAA/D,OAAA,CAEA,GAAAs1B,GAAAvxB,OAAA,oBAAA2wB,QAAA,eAAAhuB,KAAA,eACA,IAAA,GAAA4uB,EAAAt1B,OACA,GAAAu1B,GAAAD,EAAApqB,SAAAD,IAAAlH,OAAA8F,QAAA+B,YACAR,EAAAkqB,EAAAE,kBAEA,IAAAD,GAAAxxB,OAAA,oBAAAmH,SAAAD,IAAAlH,OAAA8F,QAAA+B,YACAR,EAAArH,OAAA,oBAAAyxB,aAEAzxB,QAAA,mBAAAyH,IAAA,MAAA+pB,EAAAnqB,EAEA,IAAAqqB,GAAA1xB,OAAA,oBAAA2wB,QAAA,yBACA,IAAA,GAAAe,EAAAz1B,OAAA,CACA,GAAAuL,GAAAkqB,EAAAvqB,SAAAK,KAAAxH,OAAA8F,QAAA6rB,YACA3xB,QAAA,mBAAAyH,IAAA,OAAAD,OACA,CACA,GAAAoqB,GAAA5xB,OAAA,oBAAA2wB,QAAA,gBAAAxpB,SAAAK,KAAAxH,OAAA8F,QAAA6rB,YACA3xB,QAAA,mBAAAyH,IAAA,OAAAmqB,GACA5xB,OAAA,mBAAAyH,IAAA,QAAAzH,OAAA,oBAAA2wB,QAAA,gBAAA1hB,aAKAjP,OAAAC,EAAAyC,IAAAC,KAAA,YAAA7B,GAAA,QAAAN,KAAAwwB,eAIAhxB,OAAAC,EAAAyC,IAAAC,KAAA,YAAA7B,GAAA,QAAAN,KAAAywB,gBAIAT,kBAAA,WACAxwB,OAAA,mBAAAyH,IAAA,UAAA,QAEA/G,EAAAC,QAAA,aAAAY,QAAA,SAGAmtB,UAAA,SAAAvD,GAEA,GAAA0G,GAAA7xB,OAAA,mBAQA,IANA,GAAA6xB,EAAAlB,QAAA,eAAA7N,QAAAngB,KAAA,kBAAA1G,SACA41B,EAAAA,EAAAlB,QAAA,eAAA7N,QAAAngB,KAAA,mBAGA,EAAAkvB,EAAA51B,SAAA41B,EAAAA,EAAA/O,SAEA+O,EAAAnB,SAAA,iBACA,GAAAoB,GAAAD,EAAAlB,QAAA,eAAAhuB,KAAA,YAAAoqB,WAAA,YAEA,IAAA+E,GAAAD,EAAA9hB,KAWA,KARA,GAAApN,GAAAjC,EAAAC,QAAA,aAAAmB,QAAA,WACAzF,EAAA8uB,EACA4G,EAAArxB,EAAAC,QAAA,aAAAmB,QAAA,aAEAkwB,EAAA,sBAIAC,MAAAD,EAAAE,KAAAJ,IACA,GAAAnvB,GAAAsvB,MAAA,GAAA,CACA,GAAAE,GAAAL,EAAAx1B,MAAA,EAAA21B,MAAAh0B,OAAA5B,EAAAy1B,EAAAx1B,MAAA01B,EAAA52B,UAEA,IAAAy2B,EAAAnB,SAAA,iBAAA,CACAmB,EAAAlB,QAAA,eAAAhuB,KAAA,YAAAoqB,WAAA,OAAAoF,EAGA,IAAAzvB,GAAAmvB,EACAO,EAAA,IACAxnB,GAAAC,KAAAnI,EAAA,GAAA2vB,WAAA,SAAAC,EAAAr0B,GACA,IAAAm0B,IACAE,EAAAC,WAAAD,EAAAE,WAAA,CACA,GAAAF,EAAAC,UACA,GAAA7qB,GAAA4qB,EAAAC,UAAA71B,QAAAL,GAAAsG,EAAA1G,WACA,IAAAq2B,EAAAE,UACA,GAAA9qB,GAAA4qB,EAAAE,UAAA91B,QAAAL,GAAAsG,EAAA1G,MAEA81B,IAAArqB,IAAA0qB,EAAA1vB,EAAA,GAAA2vB,WAAAp0B,OAEAm0B,IAAAA,EAAA1vB,EAAA,GAAA2vB,WAAA,GACA,IAAAlrB,GAAA4qB,EAAApvB,EAAA1G,OAAAI,EAAAJ,OACAw2B,EAAAnK,SAAAoK,cACAC,EAAA7sB,OAAA8sB,cACA,IAAAR,EAAAC,WAAAp2B,OACAw2B,EAAAI,SAAAT,EAAAC,WAAA,GAAAlrB,GAEAsrB,EAAAI,SAAAT,EAAAjrB,GAEAsrB,EAAAK,UAAA,GACAH,EAAAI,kBACAJ,EAAAK,SAAAP,OAIAZ,GAAA9hB,IAAAoiB,GACAN,EAAAlL,SACAkL,EAAAjF,MAAAmF,EAAApvB,EAAA1G,OAAAI,EAAAJ,QAKA+D,OAAA,mBAAAyH,IAAA,UAAA,QACAoqB,EAAA1jB,YAAA,mBACA0jB,EAAAlB,QAAA,4BAAAxiB,YAAA,4BAGA6iB,cAAA,SAAAjyB,EAAA0P,GAOA,GALAzO,OAAA,oBAAA6K,KAAA,SAAA5M,EAAAyE,GACAlC,MAAAkC,GACAA,EAAAyL,YAAA,qBAGA,mBAAAM,GACA,GAAA+iB,GAAAxxB,OAAAyO,GAAAkiB,QAAA,eAAAhuB,KAAA,gBAAAwE,SAAAD,IAAAlH,OAAA8F,QAAA+B,YACAR,EAAArH,OAAAyO,GAAAkiB,QAAA,eAAAhuB,KAAA,gBAAA8uB,kBAEA,IAAAD,GAAAxxB,OAAAQ,MAAA2G,SAAAD,IAAAlH,OAAA8F,QAAA+B,YACAR,EAAArH,OAAAQ,MAAAixB,aAEAzxB,QAAA,mBAAAyH,IAAA,MAAA+pB,EAAAnqB,EAEA,IAAAqqB,GAAA1xB,OAAAQ,MAAAmwB,QAAA,yBACA,IAAA,GAAAe,EAAAz1B,OAAA,CACA,GAAAuL,GAAAkqB,EAAAvqB,SAAAK,KAAAxH,OAAA8F,QAAA6rB,YACA3xB,QAAA,mBAAAyH,IAAA,OAAAD,OACA,IAAA,mBAAAiH,GAAA,CACA,GAAAmjB,GAAA5xB,OAAAyO,GAAAkiB,QAAA,eAAAhuB,KAAA,gBAAAwE,SAAAK,KAAAxH,OAAA8F,QAAA6rB,YACA3xB,QAAA,mBAAAyH,IAAA,OAAAmqB,GACA5xB,OAAA,mBAAAyH,IAAA,QAAAzH,OAAAyO,GAAAkiB,QAAA,eAAAhuB,KAAA,gBAAAsM,aAGA,CACA,GAAA2iB,GAAA5xB,OAAAQ,MAAAmwB,QAAA,gBAAAxpB,SAAAK,KAAAxH,OAAA8F,QAAA6rB,YACA3xB,QAAA,mBAAAyH,IAAA,OAAAmqB,GACA5xB,OAAA,mBAAAyH,IAAA,QAAAzH,OAAAQ,MAAAmwB,QAAA,gBAAA1hB,SAGA,GAAAgkB,GAAAjzB,OAAAQ,MAAAsG,KAAA,OAQAmqB,cAAA,SAAAvB,EAAAjhB,GAEA,GAAA,IAAAihB,EAAA9f,QAAA,CAGA,GAAA+f,GAAA3vB,OAAA,8CAAA8iB,QAAAhc,KAAA,MAUA,OARApG,GAAAC,QAAA,aAAAmB,QAAA,aAAA6tB,GAGA3vB,OAAA,mBAAAyH,IAAA,UAAA,QACAzH,OAAA,mBAAAmO,cACAnO,OAAA,oBAAAmO,YAAA,uBACAnO,QAAA,4BAAAmO,YAAA,2BAUA,GAAA,mBAAAM,GACA,GAAAgiB,GAAAzwB,OAAAyO,OAEA,IAAAgiB,GAAAzwB,OAAAQ,KAOA,IAAAyyB,GAAAjzB,OAAAQ,MAAAsG,KAAA,KACA,KAAAmsB,GAAA,MAAAA,EAAA,CAGA,GAAA,mBAAAxkB,GAAA,CACA,GAAAgkB,GAAAhC,EAAA1D,WAAA,cACA,IAAA0F,EACA,GAAAV,GAAAU,EAAAS,OAEA,IAAAnB,GAAA,CAEAtB,GAAAE,QAAA,eAAAhuB,KAAA,YAAAoqB,WAAA,iBAEA,IAAAgF,GAAAtB,EAAA7D,OAKA,IAHAlsB,EAAAC,QAAA,aAAAmB,QAAA,YAAAiwB,GAGA,mBAAAtjB,GACA,GAAA0kB,GAAA1C,EAAA1gB,MAAAkiB,MAAA,GAAAzD,QAAA,4BAEA,IAAA2E,GAAA1C,EAAA1D,WAAA,QAAAkF,MAAA,GAAAzD,QAAA,uBASA,IALA2E,EAAAvoB,EAAAkkB,OAAAqE,EAAA,SAAAC,GACA,OAAA,GAAAA,EAAA12B,QAAA,OAIA,IAAAy2B,EAAAl3B,OAAA,CAEAyE,EAAAC,QAAA,aAAAmB,QAAA,UAAAqxB,EAAA,IAEAnzB,OAAA,mBAAAyH,IAAA,UAAA,SACAgpB,EAAA7jB,SAAA,kBAGA,IAAAgkB,GAAAH,EAAA3H,KAAA,eACA2H,GAAA3H,KAAA,eAAA,OACA2H,EAAA3pB,KAAA,eAAA8pB,EAEA,IAAAC,GAAAJ,EAAAE,QAAA,6BACA,IAAAE,EAAAluB,KAAA,gBAAA1G,OACA40B,EAAAluB,KAAA,gBAAAiK,SAAA,2BAEAikB,EAAAjkB,SAAA,0BAGA,IAAApP,GAAA21B,EAAA,GAAA92B,QAAA,IAAA,GACAqE,GAAAC,QAAA,cAAAmB,QAAA,eAAAtE,OAEAwC,QAAA,mBAAAyH,IAAA,UAAA,QACAzH,OAAA,mBAAAmO,cACAnO,OAAA,oBAAAmO,YAAA,mBACAnO,OAAA,4BAAAmO,YAAA,8BAMA,OAAAV,KCvYAnT,EAAA,qCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAA+vB,sBAGAA,oBAAA,SAAAjmB,EAAA+B,GACA,UAAA/B,EAAAvI,IAAA,UAOA,OAAA0L,KCjBAnT,EAAA,oCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAA6yB,iBAGAA,eAAA,WACA,GAAAnxB,GAAAxB,EAAAC,QAAA,OAAAmB,QAAA,gBAEA,IAAAI,EAAAH,IAAA,YAAAA,IAAA,eACArB,EAAAC,QAAA,UAAAmB,QAAA,OAAAuR,KAAA,SAAA4B,MAAA,SAAA8K,MAAA,OAEA7d,EAAAyH,IAAA,wBAAA,GACAjJ,EAAAC,QAAA,OAAAmB,QAAA,YAAA,aAKA,OAAA2L,KClBAnT,EAAA,yBAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,oBAAAiF,MAAA,iBAAA,WAAA,OAAA,IAEApF,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAA8yB,kBAGA9yB,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,iBAAAH,KAAA6Y,eAGA7Y,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,kBAAAH,KAAA+yB,gBAGA/yB,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,cAAAH,KAAAgM,YAGAhM,KAAAgzB,iBAEAxzB,OAAA+sB,WAAAvf,QAAAimB,OACAC,MAAA,uCACAC,YAAA,yCACAC,aAAA,qCACAC,UAAA,uCACAC,WAAA,wCACAC,OAAA,oCACAC,QAAA,qCAEAC,KAAA,kCACArH,MAAA,iCAEAsH,MAAA,8BACAC,KAAA,kCACAC,OAAA,8CAGAC,OAAA,oCACAC,KAAA,kCACAC,OAAA,oCACAC,MAAA,uCAEAC,MAAA,4BACAC,YAAA,gCAIAC,KAAA,2BACAC,OAAA,sBAIAC,MAAA,mCAGAC,UAAA,uCACAC,KAAA,2BACAC,cAAA,iCAIAx0B,KAAAy0B,mBAGA3B,iBAAA,SAAAhpB,GACAA,EAAAX,IAAA,mBAAA,IAGAurB,QAAA,SAAA5qB,EAAA+B,EAAAK,GAIA,GAAA7J,GAAArC,KAEA20B,EAAA,SAAApvB,GACA,MAAAlD,GAAAsyB,WAAApvB,IAEAqvB,EAAA,SAAArvB,GACA,MAAAlD,GAAAuyB,YAAArvB,IAEA4F,EAAAnL,KAAAmL,YAEA0pB,IACA,kBAAA,WACA,aAAA,OAAA,SAAA,YAAA,WACA,SAAA,KAAA,QACA,aAAA,eACA,eAAA,aAAA,YACA,SAAA,WACA,WAAA,OAAA,UACA,SAAA,cAAA,YAAA,aAGAr1B,QAAA0M,EAAAhK,IAAAC,KAAA,eAAAoqB,YACAsI,QAAAA,EACAjxB,SACA+wB,WAAAA,EACAxpB,UAAAA,EACAypB,YAAAA,GAEA/tB,OAAA,IACAiuB,YACAnd,MAAA,UACAod,aAAA,EACAC,WACAC,OAAA,SAAAC,GACA,GAAAl4B,GAAAk4B,EAAAC,UACA9yB,GAAA+yB,gBAAAtrB,EAAA+B,EAAA7O,MAIAq4B,cAAA,EACAL,WACAC,OAAA,SAAA12B,EAAAgH,GACA,GAAAvI,GAAAwC,OAAAQ,MAAAusB,WAAA,OACAlqB,GAAA+yB,gBAAAtrB,EAAA+B,EAAA7O,GACAkD,EAAAC,QAAA,cAAAY,QAAA,OAAA+I,EAAA+B,EAAA7O,IAEAs4B,QAAA,SAAA/2B,EAAAgH,GACArF,EAAAC,QAAA,cAAAY,QAAA,QAAAxC,EAAAyB,KAAAuF,IAEAgwB,UAAA,SAAAh3B,EAAAgH,GACArF,EAAAC,QAAA,cAAAY,QAAA,UAAAxC,EAAAyB,KAAAuF,IAEAiwB,QAAA,SAAAj3B,EAAAgH,GACArF,EAAAC,QAAA,cAAAY,QAAA,QAAAxC,EAAAyB,KAAAuF,QAMA6vB,gBAAA,SAAAtrB,EAAA+B,EAAA7O,GACA,GAAA1C,GAAAwP,EAAAvI,IAAA,QACA0nB,EAAApd,EAAAtK,IAAAjH,GACAkuB,EAAAxrB,EAEA+oB,GACAuC,KAAAhuB,EACA2uB,OAAAA,EACAT,MAAAA,GAGA/T,GACAqV,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,WAAArc,EAAAvI,IAAA,SAAA,SAAA0nB,EAAA,OAAAT,EAGAtoB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,gBAAAuK,EAAAka,EAAAtR,GAEA5I,EAAA1C,IAAAW,EAAAvI,IAAA,QAAAinB,IAGA3P,cAAA,SAAA/O,EAAA+B,EAAAK,GACAlM,KAAA00B,QAAA5qB,EAAA+B,EAAAK,EACA,IAAAupB,GAAAj2B,OAAA0M,EAAAhK,IAAAC,KAAA,gBAAAqV,KAAA,kBAAArV,KAAA,SACAszB,GAAAC,YAAA,WACA,MAAAl2B,QAAA,UACAm2B,MAAAn2B,OAAAi2B,GAAAnN,KAAA,SACA3V,KAAA3S,KAAAgyB,eAKAe,eAAA,SAAAjpB,EAAA+B,EAAAK,GACAlM,KAAA41B,UAAA9rB,EAAA+B,EAAAK,IAGA0pB,UAAA,SAAA9rB,EAAA+B,EAAAK,GACA1M,OAAA0M,EAAAhK,IAAAC,KAAA,eAAAoqB,WAAA,YAGAtV,aAAA,SAAAnN,EAAA+B,EAAAK,GACAlM,KAAA00B,QAAA5qB,EAAA+B,EAAAK,IAGAyoB,WAAA,SAAApvB,GACA,GAAAlD,GAAArC,KACA4Q,EAAApR,OAAA+sB,WAAA3b,GACA+jB,EAAAz0B,EAAAC,QAAA,OAAAmB,QAAA,eAAA,4BACAu0B,EAAA31B,EAAAC,QAAA,OAAAmB,QAAA,eAAA,6BACA,OAAAsP,GAAAklB,aACAllB,EAAAwL,QACAvX,UAAA,8BACAkxB,SAAApB,MACAqB,QAAA,cACAzX,MAAA,SAAAhgB,GACA8D,EAAA4zB,gBAAA13B,EAAAgH,IAEAe,MACA4vB,OAAA,cAGAtlB,EAAAulB,UACAvlB,EAAAklB,aACAr1B,UACAmQ,EAAAwL,QACA2Z,SAAAF,MACAG,QAAA,YAKA51B,UAGA+K,UAAA,SAAA5F,GACA,GAAAqL,GAAApR,OAAA+sB,WAAA3b,GACAwlB,EAAAl2B,EAAAC,QAAA,OAAAmB,QAAA,eAAA,iCACA,OAAAsP,GAAAwL,QACAvX,UAAA,6BACAkxB,SAAAK,MACAJ,QAAA,eACA51B,UAGAw0B,YAAA,SAAArvB,GACA,GAAAlD,GAAArC,KACA4Q,EAAApR,OAAA+sB,WAAA3b,GACAgkB,EAAA10B,EAAAC,QAAA,OAAAmB,QAAA,eAAA,4BACA,OAAAsP,GAAAwL,QACAvX,UAAA,kBACAkxB,SAAAnB,MACAoB,QAAA,eACAzX,MAAA,SAAAhgB,GACA8D,EAAAg0B,iBAAA93B,EAAAgH,MAEAnF,UAGAi2B,iBAAA,SAAA93B,EAAAgH,GAGA,GAFAA,EAAA+wB,OAAA,oBAEAt2B,KAAAgzB,iBAEA,WADAhzB,MAAAgzB,iBAAAvd,MAKAzV,MAAAgzB,iBAAAuD,GAAAC,MAAAC,OAAAzD,iBAAAuD,GAAAC,OACAphB,MAAA,gBACAgH,QAAA5D,KAAA,WAGA,IAAAnW,GAAArC,IAGAA,MAAAgzB,iBAAA1yB,GAAA,SAAA,WAGA,GAAAo2B,GAAAr0B,EAAA2wB,iBAAA2D,QAAAp1B,IAAA,aAAA+gB,QAAAsU,QACAv0B,GAAAw0B,YAAAH,EAAAnxB,KAIAvF,KAAAgzB,iBAAAvd,QAGAwgB,gBAAA,SAAA13B,EAAAgH,GACA,GAAA0sB,GAAA1sB,EAAA+wB,OAAA,qBACA/wB,GAAA+wB,OAAA,mBACA,IAAA9d,GAAAyZ,EAAA1K,UACAvnB,MAAAy0B,eAAAlvB,EAEA/F,OAAAjB,EAAA0P,QAAAkiB,QAAA,uCAAA7vB,GAAA,mBAAA,SAAA/B,GACA,OAAA,IAGAiB,OAAAjB,EAAA0P,QAAAkiB,QAAA,uCAAA7vB,GAAA,oBAAA,SAAA/B,GACAiB,OAAAjB,EAAA0P,QAAAlI,SAAAA,SAAA5D,KAAA,cAAAoN,IAAAiJ,GACAhZ,OAAAjB,EAAA0P,QAAAlI,SAAAA,SAAA5D,KAAA,aAAAoM,WAIAvC,WAAA,SAAAzN,EAAAuL,EAAA+B,EAAAK,GACA,GAAA4qB,GAAAt3B,OAAAjB,EAAA0P,QAAAlI,SAAA5D,KAAA,cACA40B,EAAAv3B,OAAAjB,EAAA0P,QAAAlI,SAAA5D,KAAA,aACA60B,EAAAx3B,OAAAjB,EAAA0P,QAAAlI,SAAA5D,KAAA,mBAEA,IADAnC,KAAAy0B,eAAA6B,OAAA,uBACA92B,OAAAjB,EAAA0P,QAAAiiB,SAAA,eAAA,CACA,GAAA1X,GAAAse,EAAAvnB,MACA9N,EAAAs1B,EAAAxnB,MACA0nB,IAAAD,EAAA98B,KAAA,UACA,IAAAse,EAAA/c,QAAA,GAAAgG,EAAAhG,QACAuE,KAAAy0B,eAAA6B,OAAA,qBAAA9d,KAAAA,EAAA/W,IAAAA,EAAAw1B,YAAAA,IAGAH,EAAAvnB,IAAA,IACAwnB,EAAAxnB,IAAA,IACAynB,EAAA98B,KAAA,WAAA,GACAsF,OAAAjB,EAAA0P,QAAAkiB,QAAA,2BAAAxiB,YAAA,SAGAkpB,YAAA,SAAAL,EAAAjxB,GACAA,EAAA+wB,OAAA,uBACA,SAAAE,EAAA3jB,KACAtN,EAAA+wB,OAAA,qBAAAE,EAAA/0B,KAEA8D,EAAA+wB,OAAA,qBAAA9d,KAAAge,EAAAU,SAAAz1B,IAAA+0B,EAAA/0B,QAMA,OAAAwL,KChTAnT,EAAA,wCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QAEAG,WAAA,WAGAC,KAAAC,SAAAC,EAAAC,QAAA,gBAAA,oBAAAH,KAAAm3B,iBAGAn3B,KAAAC,SAAAC,EAAAC,QAAA,6BAAA,uBAAAH,KAAAo3B,cAGAp3B,KAAAC,SAAAC,EAAAC,QAAA,gBAAA,oBAAA,WACAH,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAAq3B,6BAGAr3B,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAAs3B,gBAEAt3B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAu3B,sBACAv3B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAAw3B,uBAGAL,gBAAA,SAAArtB,GACAA,EAAA7J,SAAAC,EAAAC,QAAA,OAAA,kBAAA2J,EAAAkgB,WAGAhqB,KAAAC,SAAAC,EAAAC,QAAA,OAAA,mBAAAH,KAAAy3B,iBAGAA,eAAA,SAAA5rB,EAAA+T,EAAA9V,GAEA,GAAA8jB,GAAAhO,EAAAiO,oBAAA,IACAH,EAAA9N,EAAAre,IAAA,MAEA,iBAAAuI,EAAAvI,IAAA,SAAAsK,EAAAtK,IAAAuI,EAAAvI,IAAA,UAAAqsB,GAEA/hB,EAAA1C,IAAAW,EAAAvI,IAAA,QAAAmsB,IAIA0J,aAAA,SAAAttB,EAAA+B,GAEA,GAAA5C,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,kBAEAsR,EAAA9I,EAAAvI,IAAA,eAEAyL,IAEAyH,MAAA,KACAzX,MAAA,GAGAoN,GAAAC,KAAApB,EAAAuB,OAAA,SAAA+Z,GAEA,GAAA1Y,EAAA6Z,KAAAnB,EAAAmB,MAEA,mBAAA9S,IAAA,GAAAA,EAAAnX,QAAA2O,EAAAstB,SAAA9kB,EAAA2R,EAAAhjB,IAAA,UAAA,CAEA,GAAAo2B,GAAA7tB,EAAAvI,IAAA,eACA,IAAAo2B,GAAA,mBAAAA,GAAApT,EAAAhjB,IAAA,SAAA,CACA,GAAAq2B,IAAA,CAKA,IAJAxtB,EAAAC,KAAAstB,EAAApT,EAAAhjB,IAAA,SAAA,SAAAvE,EAAAma,GACAuB,QAAAC,IAAA3b,EAAA,IAAAunB,EAAAhjB,IAAA4V,IACAna,GAAAunB,EAAAhjB,IAAA4V,KAAAygB,GAAA,KAEAA,EAAA,OAGA,GAAA56B,GAAAunB,EAAAhjB,IAAA,MACA,QAAAuI,EAAAvI,IAAA,uBACA,IAAA,MACAvE,EAAAunB,EAAAhjB,IAAA,MACA,MACA,KAAA,YACA,QACAvE,EAAA,UAAAunB,EAAAhjB,IAAA,OAAA,IAGAyL,EAAAtQ,MACA+X,MAAA8P,EAAAhjB,IAAA,SACAvE,MAAAA,OAIA,mBAAA4V,IAAA,GAAAA,EAAAnX,QACA2O,EAAAC,KAAAuI,EAAA,SAAA4M,GAEA,GAAAqY,GAAA33B,EAAAC,QAAA,UAAAmB,QAAA,WAAAke,EAEAxS,GAAAtQ,MACA+X,MAAA,UAAAojB,EAAAt2B,IAAA,YAAA,SACAvE,MAAA,YAAAwiB,MAKA1V,EAAAX,IAAA,UAAA6D,IAGAqqB,0BAAA,SAAA94B,EAAA8B,EAAAwL,GAEA,GAAA,gBAAAxL,EAAAkB,IAAA,QAAA,CAEA,GAAAjH,GAAA+F,EAAAkB,IAAA,QACAvE,EAAA6O,EAAAtK,IAAAjH,EAEA,IAAA0C,EAAA,CAEA,GAAA86B,GAAA96B,EAAA5B,MAAA,IAEA,aAAA08B,EAAA,KAEA93B,KAAAyL,WAAA,WACAzL,KAAA+3B,aAAAD,EAAA,GAEAjsB,EAAA1C,IAAA7O,EAAA,IAEA0F,KAAAg4B,cAAA,EACA93B,EAAAC,QAAA,OAAAmB,QAAA,oBAGAk2B,qBAAA,WACA,GAAAx3B,KAAAg4B,aAAA,CACA,GAAAC,GAAA/3B,EAAAC,QAAA,OAAAmB,QAAA,kBAAA,SACApB,GAAAC,QAAA,OAAAmB,QAAA,uBAAA,KAAA22B,GACAj4B,KAAAg4B,aAAA,OAIAV,eAAA,WACAt3B,KAAAyL,aACAvL,EAAAC,QAAA,OAAAmB,QAAA,cAAAtB,KAAAyL,YACAzL,KAAAyL,WAAA,OAIA8rB,qBAAA,WACAv3B,KAAA+3B,eACA73B,EAAAC,QAAA,mBAAAY,QAAA,gBAAAf,KAAA+3B,cACA/3B,KAAA+3B,aAAA,QAKA,OAAA9qB,KC3IAnT,EAAA,oCAAA,uCAAA,gCAAA,SAAAmwB,EAAAC,GACA,MAAAxqB,YAAA7B,OAAA+B,QAKAs4B,qBAEAn4B,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,cAAA,oBAAAH,KAAAm4B,2BACAn4B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAo4B,4BACAl4B,EAAAC,QAAA,cAAAiF,MAAA,uBAAApF,KAAA4pB,oBAAA5pB,OAQAm4B,0BAAA,SAAAruB,GACA9J,KAAAk4B,kBAAAx7B,KAAAoN,EAAAvI,IAAA,UASA62B,2BAAA,SAAAvY,GAGA,GAAA,mBAAAA,GAAAwY,QAAA1pB,IAAA,CAEA,GAAAif,GAAA/N,EAAAgO,oBAAAlf,IACA+e,EAAA7N,EAAAwY,QAAA1pB,IAOAtM,EAAArC,IACAoK,GAAAC,KAAAjB,SAAAkvB,MAAAn4B,QAAA,WAAAmB,QAAA,kBAAAkJ,OAAA,SAAA+tB,GACAnuB,EAAAC,KAAAkuB,EAAA9O,WAAA,SAAAzsB,EAAAma,GACA,GAAAqhB,GAAA,EACApuB,GAAAC,KAAAhI,EAAA61B,kBAAA,SAAA16B,GACA,GAAA2Z,GAAA3Z,EAAA,IAAAowB,GAAA4K,GAAA5K,EAAA,CACA,GAAA6K,GAAAF,EAAAh3B,IAAA/D,EAAA,IAAAowB,EACA2K,GAAApvB,IAAA3L,EAAA,IAAAkwB,EAAA+K,GACAF,EAAApvB,IAAA3L,EAAA,IAAAowB,EAAA,GACA4K,EAAA5K,WAYAhE,oBAAA,SAAA9f,GAOA,GAAAwa,GAAAla,EAAAkkB,OAAApuB,EAAAC,QAAA,UAAAmB,QAAA,kBAAAkJ,OAAA,SAAA+Z,GACA,MAAAna,GAAAstB,SAAA5tB,EAAAvI,IAAA,eAAAgjB,EAAAhjB,IAAA,WAIA8S,EAAAjK,EAAA/O,IAAAipB,EAAA,SAAAC,GACA,OACAjqB,KAAAwP,EAAAvI,IAAA,QAAA,IAAAgjB,EAAAhjB,IAAA,OACAsR,KAAA,SACA4B,MAAA8P,EAAAhjB,IAAA,SACAkN,MAAA,SAOA,OAHA3E,GAAAX,IAAA,WAAA,GAAA+gB,GAAA7V,IAGA4V,OC1FAnwB,EAAA,iCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAGAC,KAAAC,SAAAC,EAAAC,QAAA,qBAAA,uBAAAH,KAAA04B,OAGAA,KAAA,SAAA5uB,EAAA+B,GAEA,aAAA/B,EAAAvI,IAAA,WAGAsK,EAAAvL,GAAA,UAAAwJ,EAAAvI,IAAA,UAAAvB,KAAA+Q,OAAAjH,IAGAiH,OAAA,SAAAlF,EAAA8sB,GAGA9sB,EAAA1C,IAAAnJ,KAAAuB,IAAA,QAAAo3B,KAIA,OAAA1rB,KCzBAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,sBAAAiF,MAAA,iBAAApF,KAAA44B,gBAEA54B,KAAAC,SAAAC,EAAAC,QAAA,sBAAA,kBAAAH,KAAA64B,mBAGA74B,KAAAC,SAAAC,EAAAC,QAAA,sBAAA,iBAAAH,KAAA84B,kBAGAA,gBAAA,SAAAhvB,EAAA+B,EAAApM,GAEA,GACAyC,IADA4H,EAAAvI,IAAA,QACA/B,OAAAC,EAAAyC,IAAAC,KAAA,SAEA3C,QAAA0C,GAAA62B,eACA5S,OAAA,SAAA+I,EAAAte,GACA1Q,EAAAC,QAAA,OAAAmB,QAAA,iBAAA4tB,EAAAplB,EAAA+B,EAAA+E,EAAAooB,MAAAzR,gBAKAqR,eAAA,WACA,OAAA,GAGAC,kBAAA,SAAA/uB,EAAA+B,EAAApM,GACAD,OAAAC,EAAAyC,IAAAC,KAAA,oBAAA42B,cAAA,WAIA,OAAA9rB,KC9BAnT,EAAA,gCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QAEAq5B,aAAA,GAEAl5B,WAAA,WACAC,KAAAi5B,aAAAxsB,QAAAwsB,cAAA,YACAj5B,KAAAC,SAAAC,EAAAC,QAAA,OAAA,iBAAAH,KAAAk5B,YACAl5B,KAAAC,SAAAC,EAAAC,QAAA,OAAA,oBAAAH,KAAAm5B,cAGAD,WAAA,WACA,GAAArU,GAAA3kB,EAAAC,QAAA,OAAAmB,QAAA,gBAEAtB,MAAAo5B,UAAAvU,EAAApmB,IACAuB,KAAAq5B,kBAEAr5B,KAAAs5B,kBAIAF,UAAA,SAAAG,GACA,MAAAC,OAAAD,IAGAF,gBAAA,WACA75B,OAAA,kBAAAmO,YAAA,WACAnO,OAAA,oDAAAuG,SAAAqG,SAAA,YAGAktB,eAAA,WACA,GAAA3mB,GAAA,mCAAA3S,KAAAi5B,aAAA,WACA,IAAAz5B,OAAA,kBAAAQ,KAAAi5B,aAAA,MAAAx9B,SACA+D,OAAA,kBAAAmO,YAAA,WACAnO,OAAA,oDAAAuG,SAAAyiB,MAAA7V,KAIAwmB,YAAA,SAAAtsB,GACA,MAAA,YAAAA,EAAAN,YACAvM,MAAAk5B,eAIA,OAAAjsB,KC/CAnT,EAAA,4BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,aAAAH,KAAAy5B,kBAGAA,gBAAA,WACA,GAAAr2B,GAAAlD,EAAAC,QAAA,OAAAmB,QAAA,gBACA9B,QAAA4D,GAAAuK,YAAA,oBAKA,OAAAV,KCdAnT,EAAA,6BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAG,EAAAC,QAAA,WAAAiF,MAAA,MAAApF,KAAA05B,UAAA15B,MACAE,EAAAC,QAAA,WAAAiF,MAAA,QAAApF,KAAA25B,YAAA35B,MACAA,KAAA45B,YAGAF,UAAA,SAAA/qB,EAAAqZ,EAAAhb,GAEA,GAAA6sB,IACA7xB,QAAAggB,EACAgR,MAAA,QACAvnB,OAAA,KACAqoB,iBAAA,EACAC,OAAA,EACAC,WACAvkB,KAAA,OACAie,MAAA,SAIAuG,GACA/yB,UACA2V,EAAA,SACAC,EAAA,OAEAkd,WACAvkB,KAAA,YACAie,MAAA,cAEA9O,UAAA,IACAje,QACAkW,EAAA,EACAC,EAAA,KAIAod,GACAzQ,YACA5M,EAAA,OACAC,EAAA,UAEA8H,UAAA,IAGA,IAAA1kB,EAAAC,QAAA,OAAAmB,QAAA,aACA,GAAAgI,GAAA2wB,MAEA,IAAA3wB,GAAA4wB,CAEA5wB,GAAA9J,OAAAI,OAAA0J,EAAAuwB,EAEA,IAAA7sB,GAAAxN,OAAAI,OAAA0J,EAAA0D,EAEAhN,MAAA45B,QAAAjrB,GAAA,GAAA8I,MAAA,SAAAzK,IAGA2sB,YAAA,SAAAhrB,GACA,mBAAA3O,MAAA45B,QAAAjrB,IACA3O,KAAA45B,QAAAjrB,GAAA+kB,SAIAyG,WAAA,SAAAxrB,GACA,mBAAA3O,MAAA45B,QAAAjrB,IACA3O,KAAA45B,QAAAjrB,GAAA8G,SAMA,OAAAxI,KCxEAnT,EAAA,iCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAP,OAAA8F,QAAAgrB,KAAA,eAAAtwB,KAAAo6B,cAGAA,YAAA,SAAA/5B,GAEA,IAAAH,EAAAC,QAAA,OAAAmB,QAAA,cAAA,SACA,MAAA,8BAMA,OAAA2L,KCbAnT,EAAA,wCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAIAC,KAAAq6B,eACAr6B,KAAAs6B,eACAt6B,KAAAu6B,eAMAr6B,EAAAC,QAAA,eAAAiF,MAAA,iBAAApF,KAAAw6B,cAAAx6B,MACAE,EAAAC,QAAA,eAAAiF,MAAA,iBAAApF,KAAAy6B,cAAAz6B,MACAE,EAAAC,QAAA,eAAAiF,MAAA,iBAAApF,KAAA06B,cAAA16B,MAKAE,EAAAC,QAAA,eAAAiF,MAAA,kBAAApF,KAAA26B,eAAA36B,MACAE,EAAAC,QAAA,eAAAiF,MAAA,kBAAApF,KAAA46B,eAAA56B,MACAE,EAAAC,QAAA,eAAAiF,MAAA,kBAAApF,KAAA66B,eAAA76B,MAWAE,EAAAC,QAAA,iBAAAiF,MAAA,iBAAApF,KAAAw6B,cAAAx6B,MACAE,EAAAC,QAAA,iBAAAiF,MAAA,iBAAApF,KAAAy6B,cAAAz6B,MACAE,EAAAC,QAAA,iBAAAiF,MAAA,iBAAApF,KAAA06B,cAAA16B,MAKAE,EAAAC,QAAA,iBAAAiF,MAAA,kBAAApF,KAAA26B,eAAA36B,MACAE,EAAAC,QAAA,iBAAAiF,MAAA,kBAAApF,KAAA46B,eAAA56B,MACAE,EAAAC,QAAA,iBAAAiF,MAAA,kBAAApF,KAAA66B,eAAA76B,OAOAw6B,cAAA,SAAA57B,EAAAk8B,GACA96B,KAAAq6B,YAAAS,GAAAl8B,GAGA+7B,eAAA,WACA,MAAA36B,MAAAq6B,aAGAI,cAAA,SAAA77B,EAAAk8B,GACA96B,KAAAs6B,YAAAQ,GAAAl8B,GAGAg8B,eAAA,WACA,MAAA56B,MAAAs6B,aAGAI,cAAA,SAAA97B,EAAAk8B,GACA96B,KAAAu6B,YAAAO,GAAAl8B,GAGAi8B,eAAA,WACA,MAAA76B,MAAAu6B,cAKA,OAAAttB,KC9EAnT,EAAA,8CAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAIAC,KAAA+6B,eACA/6B,KAAAg7B,gBAIA96B,EAAAC,QAAA,sBAAAiF,MAAA,iBAAApF,KAAAi7B,cAAAj7B,MACAE,EAAAC,QAAA,sBAAAiF,MAAA,kBAAApF,KAAAk7B,eAAAl7B,MAKAE,EAAAC,QAAA,sBAAAiF,MAAA,kBAAApF,KAAAm7B,eAAAn7B,MACAE,EAAAC,QAAA,sBAAAiF,MAAA,mBAAApF,KAAAo7B,gBAAAp7B,OAGAi7B,cAAA,SAAAr8B,EAAAk8B,GACA96B,KAAA+6B,YAAAD,GAAAl8B,GAGAs8B,eAAA,SAAAt8B,EAAAk8B,GACA96B,KAAAg7B,aAAAF,GAAAl8B,GAGAu8B,eAAA,WACA,MAAAn7B,MAAA+6B,aAGAK,gBAAA,WACA,MAAAp7B,MAAAg7B,eAKA,OAAA/tB,KCvCAnT,EAAA,yCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAG,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAAq7B,oBAAAr7B,OAGAq7B,oBAAA,SAAAr3B,GACA,GAAAwG,KAOA,OALAJ,GAAAC,KAAArG,EAAAwG,OAAA,SAAAnK,GACA,GAAAspB,GAAAzpB,EAAAC,QAAA,OAAAmB,QAAA,kBAAAjB,EACAmK,GAAA9N,KAAAitB,KAGA,GAAA3lB,GAAAs3B,YAAA9wB,EAAAxG,EAAAgJ,WAIA,OAAAC,KChBAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACA8O,QAEA3O,WAAA,WACA,GAAAsC,GAAArC,IAKAR,QAAAsoB,UAAAxnB,GAAA,UAAA,SAAA/B,GACA8D,EAAAk5B,QAAAh9B,EAAA8D,KAGA7C,OAAAsoB,UAAAxnB,GAAA,QAAA,SAAA/B,GACA8D,EAAAm5B,MAAAj9B,EAAA8D,KAMAnC,EAAAC,QAAA,OAAAiF,MAAA,cAAApF,KAAAy7B,WAAAz7B,OAGAu7B,QAAA,SAAAh9B,EAAAgH,GAIAA,EAAAmJ,KAAAnQ,EAAA6Q,SAAA7Q,EAAA6Q,SAGAosB,MAAA,SAAAj9B,EAAAgH,IAIA,GAAAA,EAAAmJ,KAAAxS,QAAAqC,EAAA6Q,gBACA7J,GAAAmJ,KAAAnQ,EAAA6Q,UAIAqsB,WAAA,WACA,MAAAz7B,MAAA0O,OAIA,OAAAzB,KC/CAnT,EAAA,mCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACA87B,UAAA,EAEA37B,WAAA,WAIAC,KAAAC,SAAAC,EAAAC,QAAA,QAAA,YAAAH,KAAA27B,mBAKA37B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,SAAAH,KAAA47B,UACA57B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,qBAAAH,KAAA67B,YAGAF,kBAAA,SAAAl8B,GACAS,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAC,EAAAyC,IAAA6D,SAAAsC,kBACAyzB,iBAAA,IAIAt8B,OAAA,QAAAoI,OAAA,0DAGAg0B,SAAA,WACA,GAAA/tB,GAAA3N,EAAAC,QAAA,OAAAmB,QAAA,gBACAo6B,EAAAl8B,OAAAqO,GAAAkuB,YAEAv8B,QAAA,qBAAAgZ,KAAA,gCAAAkjB,EAAA,qBACAl8B,OAAA,iCAAA4M,SAAA,wBAIAyvB,UAAA,WACAr8B,OAAA,wBAAAmO,YAAA,yBAKA,OAAAV,KC1CAnT,EAAA,gCAAA,gCAAA,SAAAkiC,GACA,GAAA37B,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACAsL,SAAA,GAGA7U,WAAA,SAAAiN,GACA,GAAAhN,KAAAuB,IAAA,qBAAA6H,UAAAK,YACAzJ,KAAAmJ,IAAA,WAAA,GAAA6yB,GAAAh8B,KAAAuB,IAAA,gBAKA,OAAAlB,KCbAvG,EAAA,qCAAA,gCAAA,SAAAmiC,GACA,GAAAj4B,GAAAoF,SAAAK,WAAA7J,QACAS,MAAA47B,GAEA,OAAAj4B,KCHAlK,EAAA,gDAAA,qCAAA,SAAAoiC,GACA,GAAAjvB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,OAAAiF,MAAA,uCAAApF,KAAAm8B,6BAAAn8B,OASAm8B,6BAAA,WACA,MAAAD,KAKA,OAAAjvB,KCrBAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,sBAAA,cAAAH,KAAAgM,aAGAA,WAAA,SAAAzN,EAAAuL,EAAA+B,EAAAK,GACA,GAAA4qB,GAAAt3B,OAAAjB,EAAA0P,QAAAlI,SAAA5D,KAAA,WAEA,IAAA3C,OAAAjB,EAAA0P,QAAAiiB,SAAA,sBAAA,CAEA,GAAAlwB,KAAAgzB,iBAEA,WADAhzB,MAAAgzB,iBAAAvd,MAKAzV,MAAAgzB,iBAAAuD,GAAAC,MAAAC,OAAAzD,iBAAAuD,GAAAC,OACAphB,MAAA,gBACAgH,QAAA5D,KAAA,WAGA,IAAAnW,GAAArC,IAGAA,MAAAgzB,iBAAA1yB,GAAA,SAAA,WAEA,GAAAo2B,GAAAr0B,EAAA2wB,iBAAA2D,QAAAp1B,IAAA,aAAA+gB,QAAAsU,QACAE,GAAAvnB,IAAAmnB,EAAAj1B,KAAA0kB,WAIAnmB,KAAAgzB,iBAAAvd,UAKA,OAAAxI,KCrCAnT,EAAA,wBAAA,qCAAA,SAAAoiC,GACA,GAAA77B,GAAA+I,SAAAC,MAAAzJ,QACAG,WAAA,YACA,GAAAC,KAAAuB,IAAA,0BAAA6H,UAAAK,YACAzJ,KAAAmJ,IAAA,gBAAA,GAAA+yB,GAAAl8B,KAAAuB,IAAA,mBAGArB,EAAAC,QAAA,UAAAY,QAAA,iBAAAf,QAIA,OAAAK,KCXAvG,EAAA,6BAAA,wBAAA,SAAAghB,GACA,GAAA9W,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAya,EACAjI,MAAA,EAEA9S,WAAA,SAAAyK,EAAAwC,GACA5C,EAAAC,KAAA2C,EAAA,SAAAovB,EAAAztB,GACA3O,KAAA2O,GAAAytB,GACAp8B,QAGA,OAAAgE,KCXAlK,EAAA,oCAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACAlI,QAAA,KAIA,OAAAf,KCPAvG,EAAA,uCAAA,kCAAA,SAAAuiC,GACA,GAAAr4B,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAg8B,GAEA,OAAAr4B,KCCAlK,EAAA,4BACA,4BACA,uCAEA,SACAwiC,EACAC,GAEA,GAAAtvB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAovB,SAAA,GAAAmN,GAAAC,mBAEAx8B,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAy8B,iBAGAz8B,KAAAgE,WAAA,GAAAs4B,GAAAI,eAAA7pB,KAAA,WAGA3S,EAAAC,QAAA,UAAAiF,MAAA,WAAApF,KAAA28B,aAAA38B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,qBAAApF,KAAA48B,kBAAA58B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,mBAAApF,KAAA68B,gBAAA78B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,kBAAApF,KAAA88B,eAAA98B,MAGAA,KAAAC,SAAAC,EAAAC,QAAA,UAAA,kBAAAH,KAAAggB,WAGAyc,gBAAA,SAAA3hB,GACA,UAAAA,EAAA9W,WAAA6O,MAAAiI,EAAAvZ,IAAA,YAEAvB,KAAAovB,SAAA7tB,IAAAuZ,EAAAvZ,IAAA,YAAAA,IAAA,cAAA7E,KAAAoe,EAAAvZ,IAAA,QAUAo7B,aAAA,SAAAl+B,GACA,MAAAuB,MAAAgE,WAAAzC,IAAA9C,IAUAm+B,kBAAA,SAAAn+B,GACA,MAAAuB,MAAAgE,YAUAgc,SAAA,SAAAzhB,GACA,GAAAsU,GAAArT,OAAAjB,EAAA0P,QAAA3H,KAAA,KAEA,IAAA/H,EAAAw+B,SAEA,WADA78B,GAAAC,QAAA,UAAAmB,QAAA,kBAAAuR,EAIA,IAAAgN,GAAA3f,EAAAC,QAAA,UAAAmB,QAAA,OACAuR,KAAAA,EACA4B,MAAAvU,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAAAtR,IAAA,cAGAkT,GACAqV,OAAA,QACArV,MAAAoL,EAAAte,IAAA,SACA4kB,OAAA,QACAH,SAAA,YAGA1f,GACAtC,WAAA9D,EAAAC,QAAA,UAAAmB,QAAA,kBAGApB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,YAAAue,EAAA,KAAApL,EAAAnO,GAGApG,EAAAC,QAAA,UAAAmB,QAAA,sBASAu7B,gBAAA,WACA,MAAA78B,MAAAovB,UASA0N,eAAA,WACA98B,KAAAovB,SAAA7tB,IAAA,WAIA,OAAA0L,KCvHAnT,EAAA,sCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,iBAAAH,KAAAg9B,WACAh9B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,gBAAAH,KAAAi9B,UAKA/8B,EAAAC,QAAA,mBAAAiF,MAAA,sBAAApF,KAAAk9B,+BAAAl9B,OAgBAg9B,UAAA,SAAAz3B,EAAAqL,GACA5Q,KAAA6N,SAAA3N,EAAAC,QAAA,OAAAmB,QAAA,gBACAtB,KAAAinB,OAAA/mB,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,UAAA,aAEAp9B,KAAAq9B,qBAAA79B,OAAAoR,EAAAH,QAAApF,SAYA4xB,SAAA,SAAA13B,EAAAqL,GACApR,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,SAAA,cAGAF,+BAAA,WACA,MAAAl9B,MAAAq9B,uBAIA,OAAApwB,KCpDAnT,EAAA,oCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,yBAAAH,KAAAg9B,WACAh9B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,wBAAAH,KAAAi9B,WAcAD,UAAA,SAAAz3B,EAAAqL,GACA5Q,KAAA6N,SAAA3N,EAAAC,QAAA,OAAAmB,QAAA,gBACAtB,KAAAinB,OAAA/mB,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,UAAA,YAGA,IAAAE,GAAAp9B,EAAAC,QAAA,UAAAmB,QAAA,eACAqR,EAAAzS,EAAAC,QAAA,OAAAmB,QAAA,eAAA,8BACA9B,QAAAoR,EAAAH,QAAAkC,KAAAA,GAAA4qB,IAAAD,EAAA9yB,OAAA/O,UACA+D,OAAAoR,EAAAH,QAAAvW,KAAA,KAAA,yBACAsF,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,QAWAg2B,SAAA,SAAA13B,EAAAqL,GACApR,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,SAAA,eAKA,OAAAnwB,KC3CAnT,EAAA,8BAAA,mCAAA,SAAAia,GACA,GAAA9G,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAgE,WAAA,GAAA+P,GAEA7T,EAAAC,QAAA,UAAAiF,MAAA,kBAAApF,KAAAw9B,eAAAx9B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,qBAAApF,KAAAiQ,kBAAAjQ,MACAE,EAAAC,QAAA,UAAAiF,MAAA,cAAApF,KAAAy9B,qBAAAz9B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAA09B,iBAAA19B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,gBAAApF,KAAA29B,kBAAA39B,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,0BAAAH,KAAAiQ,mBAEAjQ,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,qBAAAH,KAAA49B,oBAGAH,qBAAA,WACA,MAAAz9B,MAAAgE,YAUAw5B,eAAA,SAAA3qB,EAAAwE,GACA,GAAAA,GAAAA,IAAA,EAEAmI,EAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAEAyX,EAAA,mBAAA9qB,OAAAq+B,MAEAv3B,GACA7H,GAAA6rB,EAEAvU,KAAAyJ,EAAAje,IAAA,QAEAuR,SAAA0M,EAAAje,IAAA,YAEAwR,KAAAyM,EAAAje,IAAA,SAGAlB,EAAAL,KAAAgE,WAAA0G,IAAApE,EAIA,OAFA+Q,IAAAnX,EAAAC,QAAA,UAAAY,QAAA,kBAAAV,GAEAiqB,GAWAra,kBAAA,SAAA1R,EAAA8B,GACAL,KAAAgE,WAAAsG,OAAAjK,GACAH,EAAAC,QAAA,UAAAY,QAAA,qBAAAV,IASAu9B,kBAAA,WACA,GAAA,GAAA59B,KAAAgE,WAAAwG,OAAA/O,OAAA,CAEA,GAAAwN,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBAIA8I,GAAAC,KAAArK,KAAAgE,WAAAwG,OAAA,SAAAnK,GAEA,GAAAiqB,GAAApqB,EAAAC,QAAA,UAAAmB,QAAA,aAEAw8B,GAAAr/B,GAAA6rB,EAAA7V,MAAApU,EAAAkB,IAAA,YAAAsR,KAAAxS,EAAAkB,IAAA,SAEAooB,EAAAzpB,EAAAC,QAAA,UAAAmB,QAAA,MAAAw8B,GAAA,GAEArpB,GACAqV,OAAA,QACArV,MAAAkV,EAAApoB,IAAA,SACA4kB,OAAA,QACAH,SAAA,YAEA1f,GACAtC,WAAAiF,EAEA/I,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,YAAAqoB,EAAA,KAAAlV,EAAAnO,KAIA2C,EAAAlI,QAAA,QAAAkI,GAEAjJ,KAAAgE,WAAAiQ,QAGA/T,EAAAC,QAAA,UAAAmB,QAAA,cAAA,KAAA,MAAA,IASAo8B,iBAAA,WAEA,GAAAK,GAAA79B,EAAAC,QAAA,OAAAmB,QAAA,sBAEAie,EAAA/f,OAAAu+B,GAAAxtB,SAAA,UAEAnG,GAAAC,KAAArK,KAAAgE,WAAAwG,OAAA,SAAA+Z;AAEA,GAAAyZ,GAAAzZ,EAAAhjB,IAAA,MACA08B,EAAA1e,EAAArjB,QAAA8hC,EAEAzZ,GAAApb,IAAA,QAAA80B,KAGAj+B,KAAAgE,WAAAkiB,QAGAyX,kBAAA,WACA39B,KAAAgE,WAAAiQ,UAKA,OAAAhH,KC3IAnT,EAAA,sCAAA,mCAAA,SAAAia,GACA,GAAA9G,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKAC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,uBAAAH,KAAAk+B,qBACAl+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,oBAAAH,KAAAm+B,kBACAn+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,mBAAAH,KAAAo+B,iBACAp+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,qBAAAH,KAAAq+B,mBACAr+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,oBAAAH,KAAAs+B,mBAUAJ,oBAAA,SAAAttB,GACA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CACA,GAAArd,GAAArT,OAAAoR,EAAAoL,MAAA1V,KAAA,MACAgkB,EAAApqB,EAAAC,QAAA,UAAAmB,QAAA,kBAAAuR,EACArT,QAAAoR,EAAAH,QAAAvW,KAAA,KAAAowB,GACApqB,EAAAC,QAAA,UAAAmB,QAAA,gBACA9B,OAAAoR,EAAAH,QAAAnG,SACApK,EAAAC,QAAA,mBAAAY,QAAA,iBAAA8R,KASA0rB,eAAA,WACA,GAAAC,GAAAt+B,EAAAC,QAAA,OAAAmB,QAAA,qBACA9B,QAAAg/B,GAAApyB,SAAA,wBASAqyB,kBAAA,WACA,GAAAD,GAAAt+B,EAAAC,QAAA,OAAAmB,QAAA,qBACA9B,QAAAg/B,GAAA7wB,YAAA,wBAWAwwB,iBAAA,SAAA5/B,EAAAqS,GACA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CACA,GAAArd,GAAArT,OAAAoR,EAAAoL,MAAA1V,KAAA,MACAkZ,EAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GACAC,EAAA0M,EAAAje,IAAA,WACAvB,MAAA0+B,cAAA9tB,EAAAH,OACAjR,OAAAoR,EAAAH,QAAAkC,KAAAG,EAAA,qDACAtT,OAAAoR,EAAAH,QAAA9C,YAAA,wBAAAvB,SAAA,gBAAAnF,KAAAkK,QAAA,MAAA1C,MAAA,GAAA5H,OAAA,IACA,IAAAk3B,GAAA79B,EAAAC,QAAA,OAAAmB,QAAA,qBACA9B,QAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAA3xB,SAAA,wBAaAgyB,gBAAA,SAAAxtB,GACA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CACA,GAAAyO,GAAAz+B,EAAAC,QAAA,mBAAAmB,QAAA,sBACA9B,QAAAQ,KAAA0+B,eAAA/rB,KAAAnT,OAAAm/B,GAAAhsB,QACAnT,OAAAQ,KAAA0+B,eAAA/wB,YAAA,gBAAAvB,SAAA,uBACA,IAAA2xB,GAAA79B,EAAAC,QAAA,OAAAmB,QAAA,qBACA9B,QAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAApwB,YAAA,wBAaA0wB,kBAAA,SAAAztB,GACApR,OAAAoR,EAAAoL,MAAAjY,OACAvE,OAAAoR,EAAAoL,MAAA/U,KAAA2N,QAAA,SAAAzD,QAAA,QACA3R,OAAAoR,EAAAH,QAAAxJ,IAAA,UAAA,QAUAq3B,iBAAA,SAAA1tB,GACApR,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,IACAzH,OAAAoR,EAAAH,QAAAnG,WAKA,OAAA2C,KC5HAnT,EAAA,kCAAA,uCAAA,SAAA+Z,GACA,GAAA5G,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,gBAAAH,KAAAyT,mBAaAA,iBAAA,SAAAuqB,EAAAz/B,GAEA,GAAA,IAAAiB,OAAA8P,KAAA0uB,GAAA,CACA,GAAAY,KAKAx0B,GAAAC,KAAArK,KAAA6+B,iBAAAb,GAAA,SAAA39B,GACAu+B,EAAAliC,KAAA2D,EAAAkB,IAAA,QAIA,IAAAyS,GAAA,GAAAH,KAEApV,GAAA,WACAqU,SAAA,kBACAF,WAAAgsB,IAKA1+B,GAAAC,QAAA,UAAAY,QAAA,oBAAAiT,GAEA,mBAAAzV,IAAAA,EAAA8Q,WACA,EAAAuvB,EAAAnjC,SACAyE,EAAAC,QAAA,UAAAmB,QAAA,kBAAAs9B,EAAA,IACA1+B,EAAAC,QAAA,UAAAmB,QAAA,qBAKApB,GAAAC,QAAA,UAAAY,QAAA,iBAWA89B,iBAAA,SAAAb,GACAA,EAAAA,EAAAvP,aAEA,IAAAzqB,GAAA9D,EAAAC,QAAA,UAAAmB,QAAA,sBAMAs9B,EAAA56B,EAAAsqB,OAAA,SAAAjuB,GACA,GAAAy+B,IAAA,CA+BA,OA5BAz+B,GAAAkB,IAAA,QAAAktB,cAAAvyB,QAAA8hC,KAAA,EACAc,GAAA,EACAz+B,EAAAkB,IAAA,YAAAktB,cAAAvyB,QAAA8hC,KAAA,IACAc,GAAA,GAMAz+B,EAAAkB,IAAA,SAAA,GAAAy8B,EAAA9hC,QAAA,MACAkO,EAAAC,KAAAhK,EAAAkB,IAAA,QAAA,SAAAopB,GACAqT,EAAAniC,QAAA,IAAA,IAAAJ,OAAA,GACAkvB,EAAA8D,cAAAvyB,QAAA8hC,EAAAniC,QAAA,IAAA,OAAA,IACAijC,GAAA,KAOAz+B,EAAAkB,IAAA,UACA6I,EAAAC,KAAAhK,EAAAkB,IAAA,SAAA,SAAAw9B,GACAA,EAAAtQ,cAAAvyB,QAAA8hC,KAAA,IACAc,GAAA,KAKAA,GAGA,OAAAF,KAIA,OAAA3xB,KC3GAnT,EAAA,iCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,iBAAAH,KAAAu+B,gBACAv+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,gBAAAH,KAAAy+B,mBAEAz+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,yBAAAH,KAAAu+B,gBACAv+B,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,wBAAAH,KAAAy+B,mBAWAv+B,EAAAC,QAAA,OAAAiF,MAAA,yBAAApF,KAAAg/B,sBAAAh/B,MACAE,EAAAC,QAAA,OAAAiF,MAAA,sBAAApF,KAAAi/B,mBAAAj/B,MACAE,EAAAC,QAAA,OAAAiF,MAAA,qBAAApF,KAAAk/B,kBAAAl/B,MACAE,EAAAC,QAAA,OAAAiF,MAAA,sBAAApF,KAAAm/B,mBAAAn/B,MACAE,EAAAC,QAAA,OAAAiF,MAAA,uBAAApF,KAAAo/B,oBAAAp/B,MACAE,EAAAC,QAAA,OAAAiF,MAAA,wBAAApF,KAAAq/B,qBAAAr/B,OASAu+B,eAAA,WACA,GAAAR,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA9B,QAAAu+B,GAAA3xB,SAAA,wBASAqyB,kBAAA,WACA,GAAAV,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA9B,QAAAu+B,GAAApwB,YAAA,wBAUAqxB,sBAAA,SAAApuB,GAIA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CAEA,GAAArd,GAAArT,OAAAoR,EAAAoL,MAAA1V,KAAA,MAEAgkB,EAAAtqB,KAAAggB,SAAAnN,GAAA,EAKArT,QAAAoR,EAAAH,QAAAvW,KAAA,KAAAowB,GACApqB,EAAAC,QAAA,UAAAmB,QAAA,eAEA9B,OAAAoR,EAAAH,QAAAnG,SAEApK,EAAAC,QAAA,UAAAY,QAAA,iBAAA8R,EAAAyX,OACA,IAAA9qB,OAAAoR,EAAAoL,MAAAkU,SAAA,YAAA,CAEA,GAAA7tB,GAAArC,IAEAE,GAAAC,QAAA,UAAAmB,QAAA,eAEA,IAAAg8B,GAAAp9B,EAAAC,QAAA,UAAAmB,QAAA,eAEAy8B,EAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBAEA,IAAA9B,OAAAu+B,GAAA7N,SAAA,eAEA,GAAA3Q,GAAA/f,OAAAu+B,GAAAxtB,SAAA,eAGA,IAAAgP,IAAA,wBAIA,IAAA+f,GAAA/f,EAAArjB,QAAA,wBAIAkO,GAAAC,KAAAizB,EAAA9yB,OAAA,SAAA+Z,EAAA9mB,GAEA,GAAA6sB,GAAAjoB,EAAA2d,SAAAuE,EAAAhjB,IAAA,QAEAge,GAAAvjB,OAAAsjC,EAAA7hC,EAAA,EAAA6sB,IAIA,IAAAgV,GAAA/f,EAAArjB,QAAA,wBACAqjB,GAAAvjB,OAAAsjC,EAAA,GAEAp/B,EAAAC,QAAA,UAAAmB,QAAA,cAAAie,GAEArf,EAAAC,QAAA,UAAAmB,QAAA,iBAEA9B,OAAAoR,EAAAH,QAAAnG,WAaA0V,SAAA,SAAAnN,EAAAwE,GAEAA,EAAAA,IAAA,CAEA,IAAAmI,GAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAEAyX,EAAApqB,EAAAC,QAAA,UAAAmB,QAAA,aAEAqoB,EAAAzpB,EAAAC,QAAA,UAAAmB,QAAA,OAAA7C,GAAA6rB,EAAA7V,MAAA+K,EAAAje,IAAA,YAAAsR,KAAAA,GAAAwE,GAEA5C,GACAqV,OAAA,QACArV,MAAAkV,EAAApoB,IAAA,SACA4kB,OAAA,QACAH,SAAA,YAGA1f,GACAtC,WAAA9D,EAAAC,QAAA,UAAAmB,QAAA,kBAKA,OAFApB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,YAAAqoB,EAAA,KAAAlV,EAAAnO,GAEAgkB,GAUA2U,mBAAA,SAAAruB,GACA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CAEA,GAAArd,GAAArT,OAAAoR,EAAAH,QAAAnK,KAAA,MAEAkZ,EAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAEA4B,EAAA+K,EAAAje,IAAA,YAEAw8B,EAAA79B,EAAAC,QAAA,UAAAmB,QAAA,kBAEAi+B,EAAA//B,OAAAu+B,GAAAtvB,OAEAzO,MAAA0+B,cAAA9tB,EAAAH,OAEAjR,OAAAoR,EAAAH,QAAAkC,KAAA8B,GAEAjV,OAAAoR,EAAAH,QAAA9C,YAAA,wBAAAvB,SAAA,iBAAAnF,KAAAwH,MAAA8wB,EAAA14B,OAAA,SAEArH,OAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAA3xB,SAAA,0BAEA,IAAA5M,OAAAoR,EAAAoL,MAAAkU,SAAA,YAAA,CAEA,GAAA6N,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA9B,QAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAA3xB,SAAA,wBAaA8yB,kBAAA,SAAAtuB,GACA,GAAApR,OAAAoR,EAAAoL,MAAAkU,SAAA,2BAAA,CAKA,GAAAyO,GAAAz+B,EAAAC,QAAA,mBAAAmB,QAAA,sBAEA9B,QAAAQ,KAAA0+B,eAAA/rB,KAAAnT,OAAAm/B,GAAAhsB,QACAnT,OAAAQ,KAAA0+B,eAAA/wB,YAAA,iBAAAvB,SAAA,wBAAAnF,KAAAwH,MAAA,GAAA5H,OAAA,IAEA,IAAAk3B,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA9B,QAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAApwB,YAAA,0BAEA,IAAAnO,OAAAoR,EAAAoL,MAAAkU,SAAA,YAAA,CAEA,GAAA6N,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA9B,QAAAu+B,GAAA7N,SAAA,gBACA1wB,OAAAu+B,GAAApwB,YAAA,wBAcAwxB,mBAAA,SAAAvuB,GACApR,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,IACAzH,OAAAoR,EAAAH,QAAAnG,SACApK,EAAAC,QAAA,UAAAY,QAAA,gBAAA6P,IAYAwuB,oBAAA,SAAAxuB,GAEApR,OAAAoR,EAAAoL,MAAAkU,SAAA,4BAAA1wB,OAAAoR,EAAAoL,MAAAkU,SAAA,aACA1wB,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,OAAAlD,OAEA7D,EAAAC,QAAA,UAAAY,QAAA,iBAAA6P,IAUAyuB,qBAAA,SAAAzuB,EAAAL,GAKA,GAHArQ,EAAAC,QAAA,UAAAmB,QAAA,gBAGA9B,OAAAoR,EAAAoL,MAAAkU,SAAA,6BAAA1wB,OAAAoR,EAAAoL,MAAAkU,SAAA,YAAA,CAEA,GAAAjnB,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,kBACAk+B,EAAAhgC,OAAAoR,EAAAoL,MAAA9hB,KAAA,MAAA2B,QAAA,SAAA,IACA4jC,EAAAx2B,EAAA1H,IAAAi+B,GAGAl5B,GAAAge,UACAla,GAAAC,KAAApB,EAAAuB,OAAA,SAAA+Z,GACA,GAAAmb,GAAAnb,EAAAsJ,oBAAAtO,MACA8M,EAAA9H,EAAAhjB,IAAA,QAEA+E,GAAAge,OAAA5nB,MACA2D,MAAAkkB,EACA+D,KAAA,QACAW,OAAAyW,EACAlX,MAAA6D,KAKA,IAAA5X,IACAqV,OAAA,QACArV,MAAAgrB,EAAAl+B,IAAA,SACA4kB,OAAA,mBAAAsZ,EAAA5R,oBAAAtO,MAAA,OAAAkgB,EAAAl+B,IAAA,SACAykB,SAAA,OAGA9lB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,aAAAm+B,EAAA,KAAAhrB,EAAAnO,MAKA,OAAA2G,KC5SAnT,EAAA,2BAAA,gCAAA,4BAAA,SAAAmP,EAAA4W,GACA,GAAA5S,GAAAvN,WAAA7B,OAAA+B,QACA+/B,QAAA,EACAC,UAAA,EAEA7/B,WAAA,WAEAC,KAAAgE,WAAA,GAAAiF,GAAAgc,kBAAAX,QAEAtkB,KAAAgE,WAAAsc,cAGApgB,EAAAC,QAAA,UAAAiF,MAAA,iBAAApF,KAAA6/B,mBAAA7/B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,YAAApF,KAAA8/B,SAAA9/B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,oBAAApF,KAAA+/B,sBAAA//B,MACAE,EAAAC,QAAA,UAAAiF,MAAA,YAAApF,KAAAggC,cAAAhgC,MAEAE,EAAAC,QAAA,UAAAiF,MAAA,MAAApF,KAAAggB,SAAAhgB,MACAE,EAAAC,QAAA,UAAAiF,MAAA,SAAApF,KAAAigC,YAAAjgC,MACAE,EAAAC,QAAA,UAAAiF,MAAA,cAAApF,KAAAkgC,WAAAlgC,MAMAE,EAAAC,QAAA,UAAAiF,MAAA,aAAApF,KAAAmgC,UAAAngC,MACAE,EAAAC,QAAA,UAAAiF,MAAA,aAAApF,KAAAogC,UAAApgC,MACAE,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAAqgC,YAAArgC,MACAE,EAAAC,QAAA,UAAAiF,MAAA,eAAApF,KAAAsgC,YAAAtgC,OAGA6/B,mBAAA,WACA,MAAA7/B,MAAAgE,YAGA+7B,sBAAA,WACA//B,KAAAgE,WAAAjD,QAAA,QAAAf,KAAAgE,aAGA87B,SAAA,SAAArhC,GACA,MAAAuB,MAAAgE,WAAAkW,WAAAvL,IAAAlQ,IAIAuB,KAAAgE,WAAAkW,WAAAvL,IAAAlQ,IAKAuB,KAAAgE,WAAAzC,IAAA9C,IAaAuhB,SAAA,SAAA1Z,EAAA+Q,EAAAkpB,EAAAh0B,GAWA,GANArM,EAAAC,QAAA,UAAAmB,QAAA,cAAA,GAEA+V,EAAAA,IAAA,EACA9K,EAAAA,GAAA,GACAg0B,EAAA,mBAAAA,IAAAA,GAEA,GAAAj6B,YAAA8C,UAAAC,MAAA,CACA,mBAAA/C,GAAA,KACAA,EAAA7H,GAAAuB,KAAAggC,gBAEA,IAAA3/B,GAAA,GAAAwf,GAAAvZ,OAEA,IAAAjG,GAAAiG,CAYA,IAAA9G,OAAAwlB,UAAA3kB,EAAAkB,IAAA,SAAA,CACA,GAAAi/B,GAAAtgC,EAAAC,QAAA,UAAAmB,QAAA,WAAAjB,EAAAkB,IAAA,QACAlB,GAAA8I,IAAA,OAAAq3B,EAAAj/B,IAAA,eAGA,GAAAooB,GAAA3pB,KAAAgE,WAAA0G,IAAArK,GAAAgX,OAAAA,GAUA,OAPAnX,GAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GACApB,EAAAC,QAAA,UAAAY,QAAA,YAAAV,GACAkgC,GACArgC,EAAAC,QAAA,UAAAY,QAAA,kBAAA4oB,EAAApd,GAEArM,EAAAC,QAAA,UAAAY,QAAA,iBAAAV,GAEAA,GAYAogC,mBAAA,SAAAhiC,EAAAnE,EAAA0C,GACA,GAAA6iB,GAAA7f,KAAAgE,WAAAzC,IAAA9C,EACAohB,GAAA1W,IAAA7O,EAAA0C,IAUAkjC,WAAA,SAAA3gB,EAAA3O,EAAAqT,GACA,MAAAA,IACAA,GAAA,EAGA,IAAA8Z,GAAA79B,EAAAC,QAAA,UAAAmB,QAAA,iBACA,IAAA9B,OAAAu+B,GAAA7N,SAAA,eAAA,CAEA,GAAA3Q,GAAAA,GAAA/f,OAAAu+B,GAAAxtB,SAAA,UAGAnG,GAAAC,KAAArK,KAAAgE,WAAAwG,OAAA,SAAA+Z,GAEA,GACA9lB,IADA8lB,EAAAhjB,IAAA,SACAgjB,EAAAhjB,IAAA,MACA,IAAA/B,OAAAwlB,UAAAvmB,GACA,GAAAu/B,GAAA,SAAAv/B,MAEA,IAAAu/B,GAAAv/B,CAIA,IAAA4tB,GAAA9M,EAAArjB,QAAA8hC,GAAA,CACAzZ,GAAApb,IAAA,QAAAkjB,KAEArsB,KAAAgE,WAAAkiB,OAEAjC,IAEA/jB,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GAEApB,EAAAC,QAAA,OAAAmB,QAAA,gBAYA2+B,YAAA,SAAA5/B,GACAH,EAAAC,QAAA,UAAAY,QAAA,eAAAV,GACAL,KAAA4/B,UAAA,EACA5/B,KAAAgE,WAAAsG,OAAAjK,GAGAH,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GACApB,EAAAC,QAAA,OAAAmB,QAAA,cAWA0+B,cAAA,WACA,GAAAjgB,GAAA/f,KAAAgE,WAAA+b,MAEA,OADA/f,MAAAgE,WAAA+b,SACA,OAAAA,GAGAogB,UAAA,WACA,MAAAngC,MAAA2/B,QAGAS,UAAA,SAAA7wB,GACAvP,KAAA2/B,OAAApwB,GAGA8wB,YAAA,WACA,MAAArgC,MAAA4/B,UAGAU,YAAA,SAAA/wB,GACAvP,KAAA4/B,SAAArwB,IAIA,OAAAtC,KCtNAnT,EAAA,oCAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA0a,WAGAjkB,WAAA,WAEAC,KAAAM,GAAA,gBAAAN,KAAA0gC,aAAA1gC,OAaA0gC,aAAA,SAAArgC,GAMA,GAAA,GAAA+J,EAAAu2B,KAAAtgC,EAAAkB,IAAA,WAAA,CAIA,GAAAq/B,IAAA,CACAx2B,GAAAC,KAAAhK,EAAA2D,WAAAwG,OAAA,SAAAq2B,GACA,GAAAz2B,EAAAu2B,KAAAE,EAAAt/B,IAAA,aACAq/B,GAAA,KAGAA,GACAvgC,EAAA2D,WAAA8F,aAAAX,IAAA,SAAA,OAMA9I,GAAA2D,WAAA8F,aAAAX,IAAA,SAAA,KAKA,OAAA9I,KCjDAvG,EAAA,uCAAA,kCAAA,SAAAgnC,GACA,GAAA98B,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAygC,EACAhvB,WAAA,QAEA/R,WAAA,SAAAyK,EAAAwC,GAEAhN,KAAAM,GAAA,OAAAN,KAAAylB,iBAAAzlB,MAEAA,KAAAM,GAAA,MAAAN,KAAA+gC,UAAA/gC,MACAA,KAAA8J,aAAAkD,EAAAlD,cAGA2b,iBAAA,WAEAvlB,EAAAC,QAAA,mBAAAY,QAAA,eAAAf,MACAE,EAAAC,QAAA,mBAAAH,KAAA8J,aAAAvI,IAAA,SAAAR,QAAA,eAAAf,OAGA+gC,UAAA,SAAA1gC,EAAA2D,GACA3D,EAAA8I,IAAA,eAAAnJ,KAAA8J,gBAGA,OAAA9F,KAEAlK,EAAA,0CAAA,WChCA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,MACAgF,UAAA,WACA/E,SAAA,8CAEAkB,gBAAA,WACA,GAAAqB,GAAArC,IACA,QACAghC,aAAA,WACA,MAAA,mBAAA3+B,GAAA2hB,OACA3hB,EAAA2hB,OAAAnmB,OAAA6Q,KAAAsV,QAAA,IAEA,OAOA,OAAAvkB,KAEA3F,EAAA,yCAAA,wCAAA,SAAAmnC,GCrBA,GAAAxhC,GAAAC,WAAA+D,WAAA7D,QACAC,QAAA,MACAgF,UAAA,eACA/E,SAAA,oDACArB,GAAA,WACA,MAAAuB,MAAAK,MAAAqlB,KAGAhiB,SACAmT,MAAA,oBAGA9W,WAAA,SAAAuG,GACAtG,KAAA8J,aAAAxD,EAAAwD,aACA9J,KAAA6L,UAAAvF,EAAAuF,UACA7L,KAAAgE,WAAAsC,EAAAtC,WACAhE,KAAAkhC,QAAA56B,EAAA46B,QACAlhC,KAAAmhC,WAAA76B,EAAA66B,WACAnhC,KAAAK,MAAAC,GAAA,gBAAAN,KAAAghC,aAAAhhC,MAKA,mBAAAA,MAAA8J,aAAAvI,IAAA,cACAvB,KAAAF,SAAA,IAAAE,KAAA8J,aAAAvI,IAAA,aAGAvB,KAAAohC,WAAA,GAGAl7B,gBAAA,WACAlG,KAAAK,MAAA8F,IAAA,SAAAnG,KAAAI,QACAJ,KAAAK,MAAA8F,IAAA,gBAAAnG,KAAAghC,eAGA1pB,eAAA,WAIA,GAAAtX,KAAAK,MAAAkB,IAAA,SAAA,CACA,GAAAkT,GAAAzU,KAAAK,MAAAkB,IAAA,QACAvB,MAAAK,MAAA8I,IAAA,QAAAiB,EAAAmN,OAAA9C,IAAA4C,QAAA,MAKA9W,SAAA,WASA,GARAL,EAAAC,QAAA,aAAAmB,QAAA,OAAAtB,MAIAE,EAAAC,QAAA,WAAAH,KAAA8J,aAAAvI,IAAA,QAAA,WAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MAIAA,KAAAK,MAAAkB,IAAA,SAAA,CACA,GAAAkT,GAAAzU,KAAAK,MAAAkB,IAAA,QACAvB,MAAAK,MAAA8I,IAAA,QAAAiB,EAAAgN,SAAA3C,IAAA4C,QAAA,MAIApV,OAAA,WACAjC,KAAAK,MAAAkB,IAAA,SACA/B,OAAAQ,KAAAkC,IAAAC,KAAA,eAAAoM,QACAvO,KAAAK,MAAA8I,IAAA,OAAA,KAIAvI,QACAyY,kBAAA,eACAuE,mBAAA,eACAyjB,MAAA,eAGAC,aAAA,SAAA/iC,GACA2B,EAAAC,QAAA,mBAAAY,QAAA,gBAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,KAAA8J,aAAA9J,OAGAuhC,aAAA,SAAAhjC,GACA2B,EAAAC,QAAA,mBAAAY,QAAA,qBAAAf,KAAAK,MAAAL,KAAAgE,WAAAhE,KAAA6L,UAAA7L,OAGAwhC,YAAA,SAAAjjC,GACAyB,KAAAyhC,eAAAljC,GACA2B,EAAAC,QAAA,mBAAAY,QAAA,eAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,KAAA8J,aAAA9J,MACAE,EAAAC,QAAA,mBAAAH,KAAA8J,aAAAvI,IAAA,SAAAR,QAAA,eAAAxC,EAAAyB,KAAAK,MAAAL,KAAA6L,UAAA7L,KAAA8J,aAAA9J,OAGAyhC,eAAA,SAAAljC,GACA,IAAAA,EAAA6Q,UACAlP,EAAAC,QAAA,mBAAAY,QAAA,kBAAAf,KAAAgE,WAAAhE,KAAA6L,UAAA7L,MACAR,OAAAQ,KAAAmhC,WAAA1gC,SAAAihC,YAAA1hC,KAAAmhC,WAAA1gC,SAAAhF,OAAA,GAAAyG,IAAAC,KAAA,qBAAAoM,UAIAyyB,aAAA,WAUA,GAAAnjC,OAAA6Q,KAAA1O,KAAAK,MAAAkB,IAAA,YAAAvB,KAAAohC,WACAphC,KAAA6W,MAAAlO,QACAnJ,OAAAQ,KAAAkC,IAAAyL,YAAA,cAEA3N,KAAAohC,WAAA,EACAphC,KAAA6W,MAAA9S,KAAA,GAAAk9B,IAAA5gC,MAAAL,KAAAK,SACAb,OAAAQ,KAAAkC,IAAAkK,SAAA,cAIApL,gBAAA,WACA,GAAAqB,GAAArC,IACA,QACA2hC,WAAA,WACA,MAAAt/B,GAAA6+B,SAEAU,cAAA,SAAAC,EAAA7kC,GAEA,GAAA,mBAAAqF,GAAA2K,QAAAk0B,QAAAW,GAAA,CAEA,GAAAlvB,GAAA,EAMA,OALAvI,GAAAC,KAAAhI,EAAA2K,QAAAk0B,QAAAW,GAAA70B,QAAA,SAAAovB,GACA,GAAA0F,GAAA9kC,GAAAo/B,EAAAp/B,MAAA,YAAA,EACA2V,IAAA,kBAAAypB,EAAAp/B,MAAA,IAAA8kC,EAAA,IAAA1F,EAAA3nB,MAAA,cAGA9B,OAQA,OAAAlT,KAGA3F,EAAA,0CAAA,WC9IA,GAAA2F,GAAAC,WAAAC,SAAAC,QACAC,QAAA,KACAC,SAAA,+CAGA,OAAAL,KAEA3F,EAAA,4CAAA,wCAAA,uCAAA,uCAAA,SAAAioC,EAAAC,EAAAC,GCPA,GAAAxiC,GAAAC,WAAA+H,cAAA7H,QACAE,SAAA,6CACAkC,UAAA+/B,EACA3xB,UAAA4xB,EACAvmB,eAAA,EAEA1b,WAAA,SAAAuG,GAMA,GAAA47B,GAAA57B,EAAAuF,UAAAtK,IAAAvB,KAAAK,MAAAkB,IAAA,QAEA,IAAA2gC,YAAA94B,UAAAK,aACAy4B,EAAA,GAAAD,OAAAn4B,aAAA9J,KAAAK,QACA6hC,EAAAx3B,IAAApE,EAAAuF,UAAAtK,IAAAvB,KAAAK,MAAAkB,IAAA,UACA+E,EAAAuF,UAAA1C,IAAAnJ,KAAAK,MAAAkB,IAAA,QAAA2gC,GAAA7qB,QAAA,KAGArX,KAAAgE,WAAAk+B,EACAliC,KAAA6L,UAAAvF,EAAAuF,UACA7L,KAAAkU,kBAAAitB,WAAAnhC,KAAA8J,aAAA9J,KAAAK,MAAA2D,WAAAhE,KAAAgE,WAAA6H,UAAAvF,EAAAuF,UAAAq1B,QAAAlhC,KAAAK,MAAAkB,IAAA,WAEA,IAAA5C,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAAvL,GAAA,UAAAhG,EAAA0F,KAAAI,OAAAJ,OAMAkG,gBAAA,WACA,GAAAvH,GAAAqB,KAAAK,MAAAkB,IAAA,OACA,IAAA5C,EACA,IAAA,GAAArE,KAAAqE,GACAA,EAAAZ,eAAAzD,IACA0F,KAAA6L,UAAA1F,IAAA,UAAA7L,EAAA0F,KAAAI,SAMAG,SAAA,WASA,GAAA8B,GAAArC,IACAR,QAAAQ,KAAAkC,IAAAC,KAAA,0BAAAoO,UACA4xB,OAAA,UACA1xB,OAAA,QACAD,YAAA,uCACA4xB,sBAAA,EACAjxB,QAAA,IACAT,UAAA,UAEAM,MAAA,SAAAzS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAmB,QAAA,uBAAAsP,IAGAK,KAAA,SAAA1S,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAmB,QAAA,sBAAAsP,IAGAG,OAAA,SAAAxS,EAAAqS,GACA1Q,EAAAC,QAAA,mBAAAmB,QAAA,wBAAAsP,EAAA5Q,KAAAqC,MAOAnC,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAIAgG,SAAA,WAEA,GAAAq8B,GAAA7iC,OAAAQ,KAAAkC,IAAAC,KAAA,2BACAsV,EAAAjY,OAAA6iC,GAAA5qB,KAAA,WACArC,MAAA,4CACApN,QAAAxI,OAAAQ,KAAAkC,IAAAC,KAAA,sBACApB,QAAA,QACA6W,aAAA,OACA0qB,YAAA,MACA37B,QAAAkW,EAAA,GAAAC,EAAA,GACA1Q,SAAA,iBAEA0f,OAAA,WACA,GAAAzpB,GAAArC,IACAZ,YAAA,WAAAI,OAAA6C,EAAA2F,SAAA7F,KAAA,YAAAoM,SAAA,OAIA/O,QAAAQ,KAAAkC,IAAAC,KAAA,cAAA7B,GAAA,SAAAb,KAAAO,KAAAyX,KAAAA,GAAAzX,KAAAuiC,aAKAriC,EAAAC,QAAA,WAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,MACAE,EAAAC,QAAA,gBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,iBAAAf,KAAAK,MAAAL,KAAA6L,UAAA7L,OAGAgB,gBAAA,WACA,GAAAqB,GAAArC,IACA,QACAwiC,cAAA,WACA,GAAAtB,GAAA,mBAKA,OAJA92B,GAAAC,KAAArK,KAAAkhC,QAAA,SAAAuB,GACAvB,GAAA,QAAAuB,EAAA16B,OAAA,WAEAm5B,GAAA,qBAIAroB,cAAA,WACA,GAAA1B,GAAAjX,EAAAC,QAAA,OAAAmB,QAAA,eAAA,yBAAAtB,KAAA6S,KACA,OAAAsE,GAAAnX,OAGAmB,cAAA,WACA,GAAAC,GAAA,EAWA,OATAA,IADA,mBAAApB,MAAAyO,MACAzO,KAAAyO,MAEA,YAGAzO,KAAA6W,QACAzV,GAAA,aAGAA,GAGAwX,cAAA,WACA,GAAA5Y,KAAArB,KACA,IAAA,GAAArE,KAAA0F,MAAArB,KACA,GAAAqB,KAAArB,KAAAZ,eAAAzD,IACA+H,EAAAwJ,UAAAtK,IAAAjH,KAAA0F,KAAArB,KAAArE,GACA,MAAA,uBAKA,OAAA,IAGAyc,YAAA,WACA,MAAA/W,MAAA6W,MACA7W,KAAA6W,MAEA,IAGA6rB,sBAAA,WACA,MAAArgC,GAAAhC,MAAAkB,IAAA,SAGA8W,eAAA,WACA,MAAAnY,GAAAC,QAAA,YAAAmB,QAAA,cAAA,aAAAggB,OAAAqhB,mBAKAj7B,WAAA,SAAAC,EAAA3F,GACAxC,OAAAmI,EAAAzF,IAAAC,KAAA,0BAAAyF,OAAA5F,EAAAE,IACAhC,EAAAC,QAAA,aAAAmB,QAAA,OAAAtB,OAGAY,QACAgiC,oBAAA,iBACAppB,eAAA,cAGAqpB,eAAA,SAAAtkC,GACA2B,EAAAC,QAAA,mBAAAY,QAAA,kBAAAf,KAAAgE,WAAAhE,KAAA6L,WACArM,OAAAQ,KAAAS,SAAAihC,YAAA1hC,KAAAS,SAAAhF,OAAA,GAAAyG,IAAAC,KAAA,qBAAAoM,SAGAvC,WAAA,SAAAzN,GACA2B,EAAAC,QAAA,mBAAAY,QAAA,cAAAxC,EAAAyB,KAAAgE,WAAAhE,KAAA6L,WACA3L,EAAAC,QAAA,mBAAAH,KAAAK,MAAAkB,IAAA,SAAAR,QAAA,cAAAxC,EAAAyB,KAAAK,MAAAL,KAAAgE,WAAAhE,KAAA6L,YAGA02B,YAAA,SAAAhkC,GACA,GAAAukC,GAAAtjC,OAAAjB,EAAA+H,KAAAmR,KAAAzP,SAAA7F,KAAA,YACAnF,EAAA8lC,EAAAvzB,MAAAwzB,WAAAC,WAIA,IAAA,GAAAhmC,EAAAvB,OAEA,MADA8C,GAAA+H,KAAAmR,KAAAic,SACA,CAMA,IAAAuP,GAAAjmC,EAAA5B,MAAA,KACAgP,GAAA84B,QAAAD,IAIA74B,EAAAC,KAAA44B,EAAA,SAAAE,GACA,GAAAC,GAAAD,EAAA/nC,MAAA,KACAqZ,EAAA2uB,EAAA,GACApmC,EAAAomC,EAAA,IAAA5jC,OAAA6jC,QAAA5uB,GAAA6uB,UAAA,MACA3W,EAAAyW,EAAA,IAAA,EAEA3uB,GAAAA,EAAAsuB,WAAAC,YACAhmC,EAAAA,EAAA+lC,WAAAC,YACArW,EAAAA,EAAAoW,WAAAC,WAIA,IAAA3iC,GAAA9B,EAAA+H,KAAA7G,KAAAuE,WAAA0G,KAAA+J,MAAA2uB,EAAA,GAAApmC,MAAAA,EAAA2vB,KAAAA,IAEAlY,GACAqV,OAAA,QACArV,MAAA2uB,EAAA,GACAjd,OAAA,eACAH,SAAA,WAGA9lB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,gBAAAjB,EAAA,KAAAoU,GACAvU,EAAAC,QAAA,mBAAA5B,EAAA+H,KAAA7G,KAAAY,MAAAkB,IAAA,SAAAR,QAAA,aAAAV,GACAH,EAAAC,QAAA,mBAAAY,QAAA,aAAAV,GACAH,EAAAC,QAAA,OAAAY,QAAA,iBAAAV,IACAL,MASA8iC,EAAAvzB,IAAA,IACAhR,EAAA+H,KAAAmR,KAAAic,UAIA,OAAAj0B,KC/OA3F,EAAA,kCAAA,iCAAA,sCAAA,4CAAA,SAAAgnC,EAAAmB,EAAAsB,GACA,GAAAt2B,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,mBAAAiF,MAAA,uBAAApF,KAAA4pB,oBAAA5pB,MAGAA,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,gBAAAH,KAAAshC,cACAthC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,kBAAAH,KAAA+gC,WACA/gC,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,qBAAAH,KAAAuhC,cAGArhC,EAAAC,QAAA,mBAAAiF,MAAA,wBAAApF,KAAAwjC,qBAAAxjC,MACAE,EAAAC,QAAA,mBAAAiF,MAAA,sBAAApF,KAAAyjC,mBAAAzjC,MACAE,EAAAC,QAAA,mBAAAiF,MAAA,uBAAApF,KAAA0jC,oBAAA1jC,MAKAA,KAAAC,SAAAC,EAAAC,QAAA,mBAAA,iBAAAH,KAAA2jC,kBAYArC,aAAA,SAAA/iC,EAAA8B,EAAAwL,EAAA/B,EAAA85B,GACA,GAAAtpC,GAAAkF,OAAAjB,EAAA0P,QAAA3H,KAAA,KACA,IAAA,YAAAhM,EACA,GAAAkF,OAAAjB,EAAA0P,QAAAqa,KAAA,WACA,GAAAtrB,GAAA,MAEA,IAAAA,GAAA,MAGA,IAAAA,GAAAwC,OAAAjB,EAAA0P,QAAAsB,KAGA,IAAA0Z,GAAA5oB,EAAAkB,IAAAjH,EAEA+F,GAAA8I,IAAA7O,EAAA0C,GAEAgD,KAAA6jC,iBAAAxjC,EAAAwL,EAEA,IAAA2c,GAAAxrB,EAEA+oB,GACAuC,KAAAhuB,EACA2uB,OAAAA,EACAT,MAAAA,GAGA/T,GACAqV,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,UAAA9lB,EAAAkB,IAAA,SAAA,IAAAjH,EAAA,iBAAA2uB,EAAA,OAAAT,EAGAtoB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,gBAAAjB,EAAA0lB,EAAAtR,GACAvU,EAAAC,QAAA,mBAAAY,QAAA,gBAAAV,EAAAwL,EAAA/B,EAAA85B,GACA1jC,EAAAC,QAAA,0BAAA7F,GAAAyG,QAAA,gBAAAxC,EAAA8B,EAAAwL,EAAA/B,EAAA85B,GACA1jC,EAAAC,QAAA,mBAAA2J,EAAAvI,IAAA,SAAAR,QAAA,gBAAAV,EAAAwL,EAAA/B,EAAA85B,IAWA7C,UAAA,SAAA/8B,EAAA6H,GACA,GAAAi4B,IACAvkB,MAAAvb,EAAAvI,OACAsoC,KAAA,EACA/2B,WAEA5C,GAAAC,KAAArG,EAAA8F,aAAAvI,IAAA,WAAA,SAAAkhC,EAAA9zB,GACAm1B,EAAAn1B,GAAA8zB,EAAAuB,QAEA,mBAAAvB,GAAAz1B,UACA82B,EAAA92B,QAAA2B,GAAA8zB,EAAAz1B,UAGA,IAAA3M,GAAA,GAAAygC,GAAAgD,EACA9/B,GAAA0G,IAAArK,EAGA,IAAAoU,IACAqV,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,eACAH,SAAA,WAGA9lB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,gBAAAjB,EAAA,KAAAoU,GACAvU,EAAAC,QAAA,mBAAA6D,EAAA8F,aAAAvI,IAAA,SAAAR,QAAA,aAAAV,GACAH,EAAAC,QAAA,mBAAAY,QAAA,aAAAV,GACAL,KAAA6jC,iBAAAxjC,EAAAwL,IAYA01B,aAAA,SAAAlhC,EAAA2D,EAAA6H,GACA,GAAA8d,GAAAzpB,EAAAC,QAAA,OAAAmB,QAAA,kBAAAjB,GAGAoU,GACAqV,OAAAje,EAAAtK,IAAA,cACAkT,MAAA5I,EAAAtK,IAAA,SACA4kB,OAAA,UAAAwD,EAAApoB,IAAA,SAAA,WACAykB,SAAA,WAGA1f,GACAtC,WAAAA,EAGA9D,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,mBAAAqoB,EAAA,KAAAlV,EAAAnO,EAEA,IAAAmf,GAAAvlB,EAAAC,QAAA,WAAAmB,QAAA,kBACA8nB,EAAA3D,EAAAxb,OAAA5J,MAAAA,GAEA+J,GAAAC,KAAA+e,EAAA,SAAArmB,GACA,gBAAAA,GAAAxB,IAAA,SACA6I,EAAAC,KAAAtH,EAAAxB,IAAA,QAAA,SAAAsK,GACAA,EAAAxL,OAAAwL,IACAA,EAAAxL,MAAAspB,KAIA5mB,EAAAoG,IAAA,QAAAwgB,GACA5mB,EAAAoG,IAAA,YAAA,KAGAnF,EAAAsG,OAAAjK,GACAH,EAAAC,QAAA,mBAAAY,QAAA,gBAAAV,GACAH,EAAAC,QAAA,mBAAA6D,EAAA8F,aAAAvI,IAAA,SAAAR,QAAA,gBAAAV,GACAL,KAAA6jC,iBAAAxjC,EAAAwL,IAYAg4B,iBAAA,SAAAxjC,EAAAwL,GACA3L,EAAAC,QAAA,OAAAY,QAAA,iBAAAV,IAUAupB,oBAAA,SAAAvpB,GACA,MAAAkjC,IAWAC,qBAAA,SAAA5yB,EAAAL,EAAA4G,GACA,GAAA8sB,GAAAzkC,OAAA+Q,GAAAA,SAAA,WACAkvB,EAAAtoB,EAAAnT,WAAAzC,KAAAmkB,IAAAlmB,OAAAoR,EAAAoL,MAAA9hB,KAAA,QACAoM,GACAtC,WAAAmT,EAAAnT,WACAslB,aAGAlf,GAAAC,KAAA45B,EAAA,SAAAve,EAAAjoB,GACA,GAAA8rB,GAAApS,EAAAnT,WAAAzC,KAAAmkB,IAAAA,IACAga,EAAAnW,EAAAhoB,IAAA,QACAgoB,GAAApgB,IAAA,QAAA1L,EACA,IAAA4uB,GAAA5uB,CAEA6I,GAAAgjB,UAAA5sB,MACA2D,MAAAkpB,EACAjB,KAAA,QACAW,OAAAyW,EACAlX,MAAA6D,MAIAlV,EAAAnT,WAAAkiB,MAAA7O,QAAA,GAEA,IAAA5C,IACAqV,OAAA3S,EAAAtL,UAAAtK,IAAA,cACAkT,MAAA0C,EAAAtL,UAAAtK,IAAA,SACA4kB,OAAA,UAAAsZ,EAAAl+B,IAAA,SAAA,oBAAAk+B,EAAA5R,oBAAAtO,MAAA,OAAAkgB,EAAAl+B,IAAA,SACAykB,SAAA,OAGA9lB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,kBAAAm+B,EAAA,KAAAhrB,EAAAnO,GACAtG,KAAA6jC,iBAAApE,EAAAtoB,EAAAtL,WACA3L,EAAAC,QAAA,mBAAAY,QAAA,cAAA0+B,EAAAtoB,GACAjX,EAAAC,QAAA,mBAAAgX,EAAA9W,MAAAkB,IAAA,SAAAR,QAAA,cAAA0+B,EAAAtoB,IAUAssB,mBAAA,SAAA7yB,GACApR,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,KAUAy8B,oBAAA,SAAA9yB,GACApR,OAAAoR,EAAAJ,aAAArO,KAAA,OAAAmI,SACA9K,OAAAoR,EAAAoL,MAAA/U,IAAA,UAAA,OAAAlD,QAWA4/B,gBAAA,SAAA93B,EAAA/B,GAKA,GAAAo4B,GAAAr2B,EAAAtK,IAAAuI,EAAAvI,IAAA,QAEA,IAAA2gC,YAAA94B,UAAAK,aACAy4B,EAAA,GAAAD,OAAAn4B,aAAAA,IACAo4B,EAAAx3B,IAAAmB,EAAAtK,IAAAuI,EAAAvI,IAAA,UACAsK,EAAA1C,IAAAW,EAAAvI,IAAA,QAAA2gC,GAAA7qB,QAAA,OAMA,OAAApK,KClRAnT,EAAA,mCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,UAAAiF,MAAA,mBAAApF,KAAAkkC,gBAAAlkC,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,uBAAA,qBAAAH,KAAAkkC,kBASAA,gBAAA,WACA,GAAAj7B,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,iBACA8I,GAAAC,KAAApB,EAAAuB,OAAA,SAAA+Z,GACAA,EAAApb,IAAA,cAAA,OAKA,OAAA8D,KCvBAnT,EAAA,oCAAA,gCAAA,SAAAowB,GACA,GAAAjd,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAgE,WAAA,GAAAkmB,GAAAia,eAAA9kB,WAAA,WAGAnf,EAAAC,QAAA,UAAAiF,MAAA,mBAAApF,KAAAokC,gBAAApkC,MAGAE,EAAAC,QAAA,UAAAiF,MAAA,wBAAApF,KAAAqkC,qBAAArkC,OAGAokC,gBAAA,SAAA9pC,GACA,MAAA0F,MAAAgE,WAAAkW,WAAA5f,KAAAA,KAGA+pC,qBAAA,WACA,MAAArkC,MAAAgE,aAKA,OAAAiJ,KCtBAnT,EAAA,wCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAskC,sBAGAA,oBAAA,SAAAzkB,GAEA,GAAA,cAAAA,EAAAte,IAAA,QAAA,CAEA,GAAAge,GAAAM,EAAAte,IAAA,QAEArB,GAAAC,QAAA,UAAAmB,QAAA,SAAAue,GAEAzV,EAAAC,MAAA,qBAAA,mBAAA,gBAAA,uBAAA,iBAAA,SAAAwI,GAEA,GAAA2M,GAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAEA0xB,GACA9lC,GAAAyB,EAAAC,QAAA,UAAAmB,QAAA,aACAuR,KAAAA,EACA4B,MAAA+K,EAAAje,IAAA,YACAge,MAAAA,EAGArf,GAAAC,QAAA,UAAAmB,QAAA,MAAAijC,OAMAC,qBAAA,SAAAnkC,GAEA,cAAAA,EAAAkB,IAAA,UAEArB,EAAAC,QAAA,UAAAmB,QAAA,qBAAA,GAAAjB,GAEA+J,EAAAC,MAAA,qBAAA,mBAAA,gBAAA,uBAAA,iBAAA,SAAAwI,GACA3S,EAAAC,QAAA,UAAAmB,QAAA,kBAAAuR,QAOA,OAAA5F,KC7CAnT,EAAA,gCAAA,uCAAA,SAAA2qC,GACA,GAAAx3B,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,gBAAAH,KAAA0kC,mBACA1kC,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,gBAAAH,KAAA2kC,mBAKA3kC,KAAAC,SAAAC,EAAAC,QAAA,eAAA,kBAAAH,KAAA4kC,iBAGAF,kBAAA,SAAAnmC,EAAA8B,EAAAwL,EAAA/B,EAAA85B,GAEA,QAAAx5B,EAAA8P,UAAAwiB,eAAAj+B,GAAAoN,EAAAtK,IAAA,UAAAke,aAEApf,EAAAkB,IAAA,kBAEAvE,MAAAwC,OAAA6jC,QAAAhjC,EAAAkB,IAAA,UAAA+hC,UAAA,MAEAjjC,EAAA8I,IAAA,QAAAnM,OACAqD,EAAAU,QAAA,SAAAV,GAGAb,OAAAokC,EAAA1hC,IAAAC,KAAA,qBAAAoM,QAAAs2B,YAGAF,kBAAA,SAAApmC,EAAA8B,EAAAwL,EAAA/B,EAAA85B,GAEA,QAAAx5B,EAAA8P,UAAAwiB,eAAAj+B,GAAAoN,EAAAtK,IAAA,UAAAke,aAEApf,EAAA8I,IAAA,gBAAA,GAGA3J,OAAAokC,EAAA1hC,IAAAC,KAAA,oBAAAoM,QAAAs2B,WAGAD,eAAA,SAAA/kB,GAKA,GAAA7S,GAAA6S,EAAAte,IAAA,WAEAuI,EAAA5J,EAAAC,QAAA,UAAAmB,QAAA,mBAAA,UAEA,IAAA0L,YAAA5D,UAAAK,aACAuD,EAAA,GAAAy3B,OAAA36B,aAAAA,IACAkD,EAAAtC,IAAAmV,EAAAte,IAAA,YACAse,EAAA1W,IAAA,UAAA6D,GAAAqK,QAAA,OAMA,OAAApK,KCvDAnT,EAAA,sCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAggB,WAGAA,SAAA,SAAA3f,GAEA,GAAA,YAAAA,EAAAkB,IAAA,QAAA,CAEA,GAAAge,GAAAlf,EAAAkB,IAAA,SAEAujC,EAAA9kC,KAAA+kC,YAAA,kBAAAxlB,EAAA,EAEAulB,GAAA37B,IAAA,gBAAA9I,EAAAkB,IAAA,UAIAwjC,YAAA,SAAAlyB,EAAA0M,GACA,GAAAC,GAAAtf,EAAAC,QAAA,UAAAmB,QAAA,WAAAuR,GAEA0xB,GACA9lC,GAAAyB,EAAAC,QAAA,UAAAmB,QAAA,aACAuR,KAAAA,EACA4B,MAAA+K,EAAAje,IAAA,YACAge,MAAAA,EAGA,OAAArf,GAAAC,QAAA,UAAAmB,QAAA,MAAAijC,KAIA,OAAAt3B,KC9BAnT,EAAA,sCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,OAAA,uBAAAH,KAAA+vB,sBAGAA,oBAAA,SAAAjmB,EAAA+B,EAAApM,GACA,GAAA,sBAAAqK,EAAAvI,IAAA,QAAA,CACA,GAAAyjC,GAAAhlC,KAAAilC,iBAAAn7B,EACAA,GAAAX,IAAA,UAAA67B,KAIAC,iBAAA,SAAAn7B,GACA,GAAAk7B,IAAAl7B,EAAAvI,IAAA,mBAEA+iB,EAAApkB,EAAAC,QAAA,UAAAmB,QAAA,iBAMA,OALA8I,GAAAC,KAAAia,EAAA9Z,OAAA,SAAA+Z,GACA,WAAAA,EAAAhjB,IAAA,SACAyjC,EAAAtoC,MAAA+X,MAAA8P,EAAAhjB,IAAA,SAAAvE,MAAAunB,EAAAhjB,IAAA,UAGAyjC,IAKA,OAAA/3B,KC5BAnT,EAAA,sCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,4BAAA,iBAAAH,KAAAklC,SACAllC,KAAAC,SAAAC,EAAAC,QAAA,mCAAA,iBAAAH,KAAAklC,UAGAA,QAAA,SAAAp7B,EAAA+B,EAAApM,GACAD,OAAAC,EAAAyC,IAAAC,KAAA,qBAAAkI,KAAA,WACA7K,OAAAQ,MAAA+X,aACAQ,MAAA,IACAP,KAAAC,mBACAC,KAAAC,mBAMA,OAAAlL,KClBAnT,EAAA,4BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,YAAAH,KAAAmlC,aAGAnlC,KAAAC,SAAAC,EAAAC,QAAA,sBAAA,iBAAAH,KAAAolC,aAGAplC,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,iBAAAH,KAAAgqB,WAGAhqB,KAAAC,SAAAC,EAAAC,QAAA,eAAA,gBAAAH,KAAAw7B,QAUA2J,YAAA,SAAA9kC,GACA,GAAAglC,GAAA,GAAAC,MACAnnC,EAAAknC,EAAAE,UACA52B,EAAA3O,KAAAqjC,QAAAhjC,EAAAkB,IAAA,QAAA,IAAApD,EAEAkC,GAAA8I,IAAA,MAAAwF,GAAA0I,QAAA,IAEA,aAAAhX,EAAAkB,IAAA,eACAlB,EAAA8I,IAAA,cAAA,GAAAkO,QAAA,KAIA+tB,YAAA,SAAA/kC,GAKA,IAAAA,EAAAkB,IAAA,eAAA,GAAA/B,OAAA8P,KAAAjP,EAAAkB,IAAA,UAAA9F,OAAA,OAOA4E,GAAAg4B,QAAA5jB,KACA,IAAA4wB,GAAA,GAAAC,MACAnnC,EAAAknC,EAAAE,UACA52B,EAAA3O,KAAAqjC,QAAAhjC,EAAAkB,IAAA,SAAA,IAAApD,EACAkC,GAAA8I,IAAA,MAAAwF,KAWAqb,UAAA,SAAAne,GACA,GAAA8C,GAAA9C,EAAAtK,IAAA,MACAvB,MAAA8J,aAAA5J,EAAAC,QAAA,UAAAmB,QAAA,mBAAA,OACAtB,KAAAwlC,SAAA72B,EAAA9C,IAGA2vB,MAAA,SAAAj9B,EAAAuL,EAAA+B,GACAA,EAAA1C,IAAA,cAAA,GACAnJ,KAAA8J,aAAAA,CACA,IAAA6E,GAAAnP,OAAAjB,EAAA0P,QAAAsB,KACAvP,MAAAwlC,SAAA72B,EAAA9C,IAGA25B,SAAA,SAAA72B,EAAA9C,GACA,GAAAgL,IAAA,CACA,KAAArX,OAAA8P,KAAAX,GACAkI,EAAA,iDACAlI,GAAAA,EAAA8f,cACA5X,EAAA,gCACAlI,GAAAA,EAAA9S,QAAA,IAAA,KACAgb,EAAA,gEACA,KAAAlI,EAAA7S,OAAA,GACA+a,EAAA,mCACAlI,GAAA3O,KAAAqjC,QAAA10B,GACAkI,EAAA,kBACAlI,GAAA3O,KAAAylC,UAAA92B,EAAA9C,KACAgL,EAAA,wDAGAA,EACA7W,KAAA8J,aAAAX,IAAA,QAAA0N,IAEA3W,EAAAC,QAAA,OAAAY,QAAA,kBAAA8K,GACA7L,KAAA8J,aAAAX,IAAA,SAAA,KAIAs8B,UAAA,SAAA92B,EAAA9C,GACA,GAAA6hB,GAAA1tB,KAAAqjC,QAAA10B,EACA,IAAA+e,EAAAjyB,SACAkT,EAAA+e,EAEA,IAAAzkB,GAAA/I,EAAAC,QAAA,UAAAmB,QAAA,kBACAub,EAAA,EACA6oB,EAAA/2B,CAUA,OATAvE,GAAAC,KAAApB,EAAAuB,OAAA,SAAA+Z,GACA1Y,GAAA0Y,GAAAmhB,GAAAnhB,EAAAhjB,IAAA,SACAmkC,EAAA/2B,EAAA,IAAAkO,EACAA,OAIAlO,EAAA+2B,GAKArC,QAAA,SAAA1R,GACA,MAAAnyB,QAAA6jC,QAAA1R,GAAA2R,UAAA,QAIA,OAAAr2B,KC9HAnT,EAAA,gCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,kBAAAH,KAAAw9B,iBAGAA,eAAA,SAAAn9B,GACAH,EAAAC,QAAA,WAAAmB,QAAA,MAAA,iBAAAjB,EAAAkB,IAAA,YAAA,uBAIA,OAAA0L,KCXAnT,EAAA,+BAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAIAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAA2lC,aAEA3lC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,gBAAAH,KAAA4lC,aAGAC,WAAA,SAAApmC,GACAS,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAC,EAAAyC,IAAAC,KAAA,kBAAA7B,GAAA,UAAA,WACAd,OAAAQ,MAAA8lC,aAAA,SAAAC,SAAA,MAAA,IAAA,MAAA,IAAA,OAAA,KAAA,OAAA,KAAAC,MAAA,QAKAL,YAAA,SAAA/0B,GACA1Q,EAAAC,QAAA,OAAAmB,QAAA,eACA9B,OAAAoR,EAAAoL,MAAArO,YAAA,sBAAAm4B,aAAA,QACAtmC,OAAAoR,EAAAH,QAAAxJ,IAAA,UAAA,QAAA6+B,aAAA,SAAAC,SAAA,KAAA,IAAA,KAAA,IAAA,MAAA,KAAA,MAAA,SAIAH,WAAA,SAAAh1B,GACA1Q,EAAAC,QAAA,OAAAmB,QAAA,eACA9B,OAAAoR,EAAAH,QAAAq1B,aAAA,QACAtmC,OAAAoR,EAAAoL,MAAArO,YAAA,uCAKA,OAAAV,KClCAnT,EAAA,oCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAwoB,kBACA,aACA,QACA,QACA,QAGAroB,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,iBAAAH,KAAAimC,aAEAjmC,KAAAC,SAAAC,EAAAC,QAAA,UAAA,sBAAAH,KAAAsc,mBAAAtc;EAGAimC,YAAA,SAAAp6B,GACA,GAAAA,EAAAtK,IAAA,SAAA,CAEA,GAAA2kC,IAAA,EACAvmB,EAAAvV,EAAAsE,KAAA7C,EAAA8T,qBACAtd,EAAArC,IACAoK,GAAAC,KAAAsV,EAAA,SAAA0Y,IACA,GAAAh2B,EAAA+lB,iBAAAlsB,QAAAm8B,KACA6N,GAAA,KAIAA,GACAr6B,EAAA1C,IAAA,SAAA,KAKAmT,mBAAA,SAAA/d,EAAAsN,GACA,GAAAs6B,GAAAjmC,EAAAC,QAAA,OAAAmB,QAAA,kBAAAuK,GAEAu6B,EAAAD,EAAA1c,UACA2c,GAAAhpB,OAAA,QAEAgpB,GAAA3uB,WACA2uB,GAAAjnB,iBACAinB,GAAAC,iBACAD,GAAA7mB,YACA6mB,GAAA3nC,SACA2nC,GAAAE,aACAF,GAAA5hB,SAEA,IAAA3R,GAAA3S,EAAAC,QAAA,UAAAmB,QAAA,WAAA8kC,EAAAvzB,MACA0zB,EAAAn8B,EAAAiB,MAAAwH,EAAA4W,YAEA3W,EAAAtT,OAAAjB,EAAA0P,QAAAlI,SAAAA,SAAA5D,KAAA,SAAAoN,KACAmJ,SAAAC,IAAA7F,GACAyzB,EAAAzzB,SAAAA,EACAszB,EAAA3xB,MAAA3B,EACAszB,EAAAtzB,SAAAA,EACAjH,EAAA1C,IAAA,mBAAA,EACA,IAAAq9B,GAAA15B,KAAAuX,UAAA+hB,EAEA5mC,QAAAmN,KAAAC,SAAAL,OAAA,wBAAAgY,MAAAiiB,EAAAh6B,SAAAC,QAAAC,WAAA,SAAAG,GACAA,EAAAC,KAAAC,MAAAF,GACA05B,EAAA9nC,GAAAoO,EAAAvG,KAAA7H,GACA8nC,EAAAzzB,SAAAA,EACAyzB,EAAAE,gBAAAL,CAEA,IAAAM,GAAAxmC,EAAAC,QAAA,UAAAmB,QAAA,sBAGAqlC,GAFAD,EAAAh8B,IAAA67B,GAEArmC,EAAAC,QAAA,UAAAmB,QAAA,oBACAqlC,GAAAplC,IAAA,SAAAA,IAAA,cAAA7E,KAAA6pC,EAAA9nC,IAGAoN,EAAA1C,IAAA,mBAAA,GACA0C,EAAA+Q,MAAA,mBAAAvF,QAAA,IACAxL,EAAAtK,IAAA,QAAAmyB,QAGAxzB,EAAAC,QAAA,WAAAmB,QAAA,MAAA,WAAA,yBAKA,OAAA2L,KC/EAnT,EAAA,wCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,2BAAA,iBAAAH,KAAA4mC,gBAGAA,cAAA,SAAA98B,EAAA+B,EAAApM,GACAonC,kBAAArnC,OAAAC,EAAAyC,IAAAC,KAAA,YAAA,MAIA,OAAA8K,KCXAnT,EAAA,yCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,uBAAAH,KAAA+vB,sBAGAA,oBAAA,SAAAjmB,EAAA+B,EAAApM,KAIAwlC,iBAAA,SAAAn7B,GACA,GAAAk7B,IAAAl7B,EAAAvI,IAAA,mBAEA+iB,EAAApkB,EAAAC,QAAA,UAAAmB,QAAA,iBAMA,OALA8I,GAAAC,KAAAia,EAAA9Z,OAAA,SAAA+Z,GACA,WAAAA,EAAAhjB,IAAA,SACAyjC,EAAAtoC,MAAA+X,MAAA8P,EAAAhjB,IAAA,SAAAvE,MAAAunB,EAAAhjB,IAAA,UAGAyjC,IAKA,OAAA/3B,KCvBAnT,EAAA,6BAAA,6BAAA,SAAAwiC,GACA,GAAArvB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKAC,KAAAmW,iBAAA,GAAAmmB,GACAlyB,EAAAkkB,OAAAwY,eAAA,SAAAj0B,GACA,MAAA,aAAAA,EAAA8C,WAIAI,KAAA,YACAjD,SAAAwO,OAAAylB,YAIA/mC,KAAAoW,iBAAA,GAAAkmB,GACAlyB,EAAAkkB,OAAAwY,eAAA,SAAAj0B,GACA,MAAA,aAAAA,EAAA8C,WAIAI,KAAA,YACAjD,SAAAwO,OAAA0lB,YAKA9mC,EAAAC,QAAA,WAAAiF,MAAA,WAAApF,KAAAinC,QAAAjnC,MACAE,EAAAC,QAAA,WAAAiF,MAAA,uBAAApF,KAAAknC,oBAAAlnC,MACAE,EAAAC,QAAA,WAAAiF,MAAA,uBAAApF,KAAAmnC,oBAAAnnC,OAUAinC,QAAA,SAAAxoC,GAEA,GAAAoU,GAAA7S,KAAAmW,iBAAA5U,IAAA9C,EAIA,OAHAoU,KACAA,EAAA7S,KAAAoW,iBAAA7U,IAAA9C,IAEAoU,GASAq0B,oBAAA,WACA,MAAAlnC,MAAAmW,kBASAgxB,oBAAA,WACA,MAAAnnC,MAAAoW,kBAUAonB,eAAA,SAAAj/B,GACA,GAAAsU,GAAArT,OAAAjB,EAAA0P,QAAA3H,KAAA,KACApG,GAAAC,QAAA,UAAAmB,QAAA,kBAAAuR,IASAgqB,gBAAA,WACA,MAAA78B,MAAAw8B,oBAIA,OAAAvvB,KClGAnT,EAAA,gCAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA+V,WAAA,SACAC,aAAA,UACAH,YAAA,GAGApf,WAAA,WAEAC,KAAAM,GAAA,SAAAN,KAAAyZ,cAAAzZ,KAGA,IAAAonC,GAAAlnC,EAAAC,QAAA,WAAAmB,QAAA,WAAAtB,KAAAuB,IAAA,QAEA,IAAA,mBAAA6lC,GAAA,CAGA,GAAA/kC,GAAArC,IACAoK,GAAAC,KAAA+8B,EAAA7lC,IAAA,mBAAA,SAAAgO,EAAAZ,GACAtM,EAAAd,IAAAoN,IACAtM,EAAA8G,IAAAwF,EAAAY,GAAA8H,QAAA,MAYAnX,EAAAC,QAAA,WAAAY,QAAA,mBAAAf,MACAE,EAAAC,QAAA,WAAAH,KAAAuB,IAAA,SAAAR,QAAA,mBAAAf,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,sBAAAH,KAAA0f,kBASAjG,cAAA,SAAApZ,EAAA2M,GACA9M,EAAAC,QAAA,iBAAAiK,EAAAsE,KAAA1O,KAAA2f,qBAAA,IAAA5e,QAAA,iBAAAf,KAAAgN,EAAAlD,cACA5J,EAAAC,QAAA,WAAAY,QAAA,iBAAAf,KAAAgN,EAAAlD,cACA5J,EAAAC,QAAA,OAAAY,QAAA,iBAAAf,KAAAgN,EAAAlD,eAGA4V,eAAA,SAAAE,EAAA9V,GACA5J,EAAAC,QAAA,OAAAY,QAAA,mBAAAf,KAAA4f,EAAA9V,KAIA,OAAAzJ,KCrDAvG,EAAA,mCAAA,8BAAA,SAAAy+B,GACA,GAAAv0B,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAk4B,EACAzmB,WAAA,QACAiO,OAAA,EAEAhgB,WAAA,WACAC,KAAAM,GAAA,MAAAN,KAAAqnC,UAAArnC,MACAA,KAAAM,GAAA,SAAAN,KAAAsnC,aAAAtnC,MACAA,KAAAqgB,WAUAgnB,UAAA,SAAAhnC,GACAL,KAAAqgB,OAAA3jB,KAAA2D,EAAAkB,IAAA,QASA+lC,aAAA,SAAAjnC,GACAL,KAAAsgB,WAAAjgB,EAAAkB,IAAA,OAAAlB,EAAAkB,IAAA,QAGA,OAAAyC,KCpCAlK,EAAA,4BAAA,kCAAA,8BAAA,SAAA0jB,EAAA+a,GACA,GAAAtrB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKA,GAHAC,KAAAgE,WAAA,GAAAwZ,GAAAyH,kBAAAP,SACA1kB,KAAAgE,WAAA+b,OAAA,EAEA,GAAA/f,KAAAgE,WAAAwG,OAAA/O,OAAA,CACA,GAAA4G,GAAArC,IACAoK,GAAAC,KAAArK,KAAAgE,WAAAwG,OAAA,SAAA+B,GACA/M,OAAAwlB,UAAAzY,EAAAhL,IAAA,QACAc,EAAA2B,WAAA+b,WAKA/f,KAAAgE,WAAAsc,cAGApgB,EAAAC,QAAA,WAAAiF,MAAA,iBAAApF,KAAA6lB,cAAA7lB,MACAE,EAAAC,QAAA,WAAAiF,MAAA,aAAApF,KAAAunC,UAAAvnC,MACAE,EAAAC,QAAA,WAAAiF,MAAA,YAAApF,KAAAwnC,SAAAxnC,MAEAE,EAAAC,QAAA,WAAAiF,MAAA,MAAApF,KAAAqnC,UAAArnC,MACAE,EAAAC,QAAA,WAAAiF,MAAA,SAAApF,KAAAynC,aAAAznC,OAGA6lB,cAAA,WACA,MAAA7lB,MAAAgE,YAGAujC,UAAA,SAAA9oC,GACA,MAAAuB,MAAAgE,WAAAzC,IAAA9C,IAUA4oC,UAAA,SAAA/gC,EAAA+Q,GAGA,GAFAA,EAAAA,IAAA,GAEA,GAAA/Q,YAAA8C,UAAAC,MACA,GAAAhJ,GAAA,GAAAk4B,GAAAjyB,OAEA,IAAAjG,GAAAiG,CAOA,OAJAtG,MAAAgE,WAAA0G,IAAArK,GAAAgX,OAAAA,IAEAnX,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GAEAjB,GAUAonC,aAAA,SAAApnC,GACAL,KAAAgE,WAAAsG,OAAAjK,GAEAH,EAAAC,QAAA,OAAAmB,QAAA,iBAAA,SAAA,GACApB,EAAAC,QAAA,OAAAmB,QAAA,cAYAkmC,SAAA,WACA,GAAAznB,GAAA/f,KAAAgE,WAAA+b,MAEA,OADA/f,MAAAgE,WAAA+b,SACA,OAAAA,IAIA,OAAA9S,KCxFAnT,EAAA,sCAAA,gCAAA,SAAAowB,GACA,GAAAjd,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAgE,WAAA,GAAAkmB,GAAAwd,gBAAAroB,WAAA,YAGAnf,EAAAC,QAAA,WAAAiF,MAAA,mBAAApF,KAAAokC,gBAAApkC,OAGAokC,gBAAA,SAAA9pC,GACA,MAAA0F,MAAAgE,WAAAkW,WAAA5f,KAAAA,MAKA,OAAA2S,KCfAnT,EAAA,oCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,WAAAiF,MAAA,mBAAApF,KAAAkkC,gBAAAlkC,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,uBAAA,qBAAAH,KAAAkkC,kBASAA,gBAAA,WACA,GAAA1mB,GAAAtd,EAAAC,QAAA,WAAAmB,QAAA,iBACA8I,GAAAC,KAAAmT,EAAAhT,OAAA,SAAA+B,GACAA,EAAApD,IAAA,cAAA,OAKA,OAAA8D,KCvBAnT,EAAA,sCAAA,kCAAA,8BAAA,SAAA0jB,EAAA+a,GACA,GAAAtrB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,WAAA,kBAAAH,KAAAqnC,WAEAnnC,EAAAC,QAAA,WAAAiF,MAAA,iBAAApF,KAAAqnC,UAAArnC,OAUAqnC,UAAA,SAAAx0B,GAEA,GAAAvM,IACA7H,GAAAyB,EAAAC,QAAA,WAAAmB,QAAA,aACAuR,KAAAA,EAAAtR,IAAA,MACAkT,MAAA5B,EAAAtR,IAAA,mBAAAkT,OAAA5B,EAAAtR,IAAA,aAGAooB,EAAAzpB,EAAAC,QAAA,WAAAmB,QAAA,MAAAgF,GAEAmO,GACAqV,OAAA,SACArV,MAAAkV,EAAApoB,IAAA,SACA4kB,OAAA,QACAH,SAAA,YAGA1f,GACAtC,WAAA9D,EAAAC,QAAA,WAAAmB,QAAA,kBAGApB,GAAAC,QAAA,WAAAmB,QAAA,kBAAA,YAAAqoB,EAAA,KAAAlV,EAAAnO,GACApG,EAAAC,QAAA,OAAAY,QAAA,gBAAA4oB,KAIA,OAAA1c,KCzCAnT,EAAA,kCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,iBAAAH,KAAAg9B,WACAh9B,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,gBAAAH,KAAAi9B,UAKA/8B,EAAAC,QAAA,oBAAAiF,MAAA,sBAAApF,KAAAk9B,+BAAAl9B,OAgBAg9B,UAAA,SAAAz3B,EAAAqL,GACA5Q,KAAA6N,SAAA3N,EAAAC,QAAA,OAAAmB,QAAA,gBACAtB,KAAAinB,OAAA/mB,EAAAC,QAAA,OAAAmB,QAAA,cACA9B,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,UAAA,aAGAp9B,KAAAq9B,qBAAA79B,OAAAoR,EAAAH,QAAApF,SAYA4xB,SAAA,SAAA13B,EAAAqL,GACApR,OAAAQ,KAAA6N,UAAA,GAAAsvB,MAAAC,YAAA,WAAA,SAAA,cAIAF,+BAAA,WACA,MAAAl9B,MAAAq9B,uBAIA,OAAApwB,KCtDAnT,EAAA,mCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKAG,EAAAC,QAAA,OAAAiF,MAAA,kBAAApF,KAAA2nC,eAAA3nC,OAGA2nC,eAAA,SAAAppC,EAAAqS,GACA,GAAAg3B,GAAApoC,OAAAoR,EAAAH,QAAAnK,KAAA,QACAuM,EAAA3S,EAAAC,QAAA,WAAAmB,QAAA,WAAAsmC,EACA1nC,GAAAC,QAAA,WAAAmB,QAAA,iBAAAuR,KAIA,OAAA5F,KCjBAnT,EAAA,8BAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,UAIA,OAAAS,KCLAvG,EAAA,iCAAA,4BAAA,SAAA+tC,GACA,GAAA7jC,GAAAoF,SAAAK,WAAA7J,QACAS,MAAAwnC,GAEA,OAAA7jC,KCJAlK,EAAA,mCAAA,iCAAA,SAAA4sC,GACA,GAAAz5B,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAC,SAAAC,EAAAC,QAAA,oBAAA,gBAAAH,KAAA8nC,oBAaAA,kBAAA,SAAA9J,EAAAz/B,GAGA,GAAA,IAAAiB,OAAA8P,KAAA0uB,GAAA,CAEA,GAAA3nB,MAKAF,EAAAjW,EAAAC,QAAA,WAAAmB,QAAA,uBACA8I,GAAAC,KAAArK,KAAA6+B,iBAAAb,EAAA7nB,GAAA,SAAA9V,GACAgW,EAAA3Z,KAAA2D,IAGA,IAAAiW,MACAF,EAAAlW,EAAAC,QAAA,WAAAmB,QAAA,uBACA8I,GAAAC,KAAArK,KAAA6+B,iBAAAb,EAAA5nB,GAAA,SAAA/V,GACAiW,EAAA5Z,KAAA2D,IAIA,IAAA0nC,GAAA,GAAArB,GAAArwB,EACA0xB,GAAAhyB,KAAA,YACAgyB,EAAAj1B,SAAA,WAEA,IAAAk1B,GAAA,GAAAtB,GAAApwB,EACA0xB,GAAAjyB,KAAA,YACAiyB,EAAAl1B,SAAA,YAGA5S,EAAAC,QAAA,UAAAY,QAAA,qBAAAgnC,EAAAC,GAEAzpC,EAAA8Q,WACA,EAAA04B,EAAAtsC,SACAyE,EAAAC,QAAA,WAAAmB,QAAA,iBAAAymC,EAAAv9B,OAAA,IACAtK,EAAAC,QAAA,UAAAmB,QAAA,qBAKApB,GAAAC,QAAA,UAAAY,QAAA,iBAWA89B,iBAAA,SAAAb,EAAAh6B,GACAg6B,EAAAA,EAAAvP,aAMA,IAAAmQ,GAAA56B,EAAAsqB,OAAA,SAAAjuB,GACA,GAAAy+B,IAAA,CA+BA,OA5BAz+B,GAAAkB,IAAA,MAAAktB,cAAAvyB,QAAA8hC,KAAA,EACAc,GAAA,EACAz+B,EAAAkB,IAAA,YAAAktB,cAAAvyB,QAAA8hC,KAAA,IACAc,GAAA,GAMAz+B,EAAAkB,IAAA,SAAA,GAAAy8B,EAAA9hC,QAAA,MACAkO,EAAAC,KAAAhK,EAAAkB,IAAA,QAAA,SAAAopB,GACAqT,EAAAniC,QAAA,IAAA,IAAAJ,OAAA,GACAkvB,EAAA8D,cAAAvyB,QAAA8hC,EAAAniC,QAAA,IAAA,OAAA,IACAijC,GAAA,KAOAz+B,EAAAkB,IAAA,UACA6I,EAAAC,KAAAhK,EAAAkB,IAAA,SAAA,SAAAw9B,GACAA,EAAAtQ,cAAAvyB,QAAA8hC,KAAA,IACAc,GAAA,KAKAA,GAIA,OAAAF,KAIA,OAAA3xB,KCtHAnT,EAAA,wCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,2BAAA,eAAAH,KAAAioC,eACAjoC,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,cAAAH,KAAAkoC,iBACAloC,KAAAC,SAAAC,EAAAC,QAAA,iCAAA,iBAAAH,KAAAmoC,mBACAnoC,KAAAC,SAAAC,EAAAC,QAAA,iCAAA,iBAAAH,KAAAooC,mBACApoC,KAAAC,SAAAC,EAAAC,QAAA,uCAAA,oBAAAH,KAAAqoC,wBACAroC,KAAAC,SAAAC,EAAAC,QAAA,uCAAA,oBAAAH,KAAAsoC,yBAGAL,cAAA,SAAAn+B,EAAA+B,GACA7L,KAAAmoC,kBAAAt8B,EAAA/B,GACA9J,KAAAooC,kBAAAv8B,EAAA/B,IAGAu+B,uBAAA,SAAAhoC,GACAA,EAAAJ,SAAAC,EAAAC,QAAA,0BAAA,sBAAAH,KAAAuoC,mBAAAloC,IAGAioC,uBAAA,SAAAjoC,GACAA,EAAAJ,SAAAC,EAAAC,QAAA,0BAAA,wBAAAH,KAAAwoC,qBAAAnoC,IAGA6nC,gBAAA,SAAA3pC,EAAAuL,EAAA+B,EAAAK,GAEA,GAAA5F,IACAiG,OAAA,MAAAV,EAAA4d,WAAA5W,KAAA,aACArG,SAAAC,QAAAC,WAGArK,EAAArC,IACAR,QAAAjB,EAAA4N,YAAAC,SAAA,QACA5M,OAAAmN,KAAAC,QAAAtG,EAAA,SAAAuG,GACA,GAAAA,GAAAC,KAAAC,MAAAF,EACAxK,GAAAomC,YAAA3+B,EAAA+C,EAAA67B,MAAAx8B,EAAAL,GACAA,EAAA1C,IAAA,kBAAA0D,EAAA67B,MAAA,GAAA1rC,OAAA8M,aAAAA,MACA6+B,OAAA,WACAnpC,OAAAjB,EAAA4N,YAAAwB,YAAA,WAIA86B,YAAA,SAAA3+B,EAAA4+B,EAAAx8B,EAAAL,GACA/B,EAAAX,IAAA,UAAAu/B,GACAx8B,EAAA9L,UAGA+nC,kBAAA,SAAAt8B,EAAA/B,GAEA,GAAA,mBAAAA,GAAA,CAEA,GAAA8+B,GAAA/8B,EAAAtK,IAAA,mBACAmnC,EAAA5+B,EAAAvI,IAAA,UACA6I,GAAAC,KAAAq+B,EAAA,SAAAG,GACAD,GAAAC,EAAA7rC,OACAkD,EAAAC,QAAA,0BAAAY,QAAA,sBAAA8nC,EAAAvkB,UAIAzY,EAAA1C,IAAA,yBAAA,KAGAi/B,kBAAA,SAAAv8B,EAAA/B,GACA,GAAA,mBAAAA,GAAA,CAEA,GAAA8+B,GAAA/8B,EAAAtK,IAAA,mBACAmnC,EAAA5+B,EAAAvI,IAAA,UACA6I,GAAAC,KAAAq+B,EAAA,SAAAG,GACAD,GAAAC,EAAA7rC,OACAkD,EAAAC,QAAA,0BAAAY,QAAA,wBAAA8nC,EAAAC,UAIAj9B,EAAA1C,IAAA,yBAAA,KAGAo/B,mBAAA,SAAAjkB,GACA,GAAAjQ,GAAArU,KAAAuB,IAAA,WACA8S,GAAAJ,QACA7J,EAAAC,KAAAia,EAAA,SAAAC,GAEAlQ,EAAA3J,KACApQ,KAAAiqB,EAAAvnB,MACA6V,KAAA,UACA4B,MAAA8P,EAAA9P,MACAhG,MAAA,OACAsK,gBAAAxP,SAAA,OAAA,OAAA,SAAA,qBAGAvJ,KAAAmJ,IAAA,WAAAkL,IAGAm0B,qBAAA,SAAAM,GACA,GAAAz0B,GAAArU,KAAAuB,IAAA,WACA8S,GAAAJ,QACA7J,EAAAC,KAAAy+B,EAAA,SAAAC,GAEA10B,EAAA3J,KACApQ,KAAAyuC,EAAA/rC,MACA6V,KAAA,SACA4B,MAAAs0B,EAAAt0B,MACAhG,MAAA,WAGAzO,KAAAmJ,IAAA,WAAAkL,KAKA,OAAApH,KCvGAnT,EAAA,8BACA,6BAEA,SACAwiC,GAEA,GAAArvB,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAgE,WAAA,GAAAs4B,GAAA0M,qBAGA9oC,EAAAC,QAAA,YAAAiF,MAAA,WAAApF,KAAAinC,QAAAjnC,MACAE,EAAAC,QAAA,YAAAiF,MAAA,qBAAApF,KAAA6lB,cAAA7lB,OAUAinC,QAAA,SAAAxoC,GACA,MAAAuB,MAAAgE,WAAAzC,IAAA9C,IASAonB,cAAA,WACA,MAAA7lB,MAAAgE,aAIA,OAAAiJ,KC1CAnT,EAAA,mCAAA,WACA,GAAAuG,GAAA+I,SAAAC,MAAAzJ,QACA0J,UACA+V,WAAA,eACAF,YAAA,GAGApf,WAAA,WAEAC,KAAAswB,KAAA,SAAAtwB,KAAAyZ,cAAAzZ,KAIA,IAAA0E,GAAAxE,EAAAC,QAAA,YAAAmB,QAAA,iBACA8I,GAAAC,KAAA3F,EAAA8F,OAAA,SAAAV,GACA,mBAAA9J,MAAAuB,IAAAuI,EAAAvI,IAAA,UACAvB,KAAAmJ,IAAAW,EAAAvI,IAAA,QAAAuI,EAAAvI,IAAA,UAAA8V,QAAA,IAEAnX,EAAAC,QAAA2J,EAAAvI,IAAA,SAAAR,QAAA,iBAAAf,KAAA8J,IACA9J,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,OAAA,sBAAAH,KAAA0f,iBASAjG,cAAA,SAAApZ,EAAA2M,GACA9M,EAAAC,QAAA,OAAAY,QAAA,iBAAAf,KAAAgN,EAAAlD,eAGA4V,eAAA,SAAAE,EAAA9V,GACA5J,EAAAC,QAAA,OAAAY,QAAA,mBAAAf,KAAA4f,EAAA9V,KAIA,OAAAzJ,KCvCAvG,EAAA,6BAAA,iCAAA,SAAAmvC,GACA,GAAAh8B,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAC,KAAAK,MAAA,GAAA4oC,GAAAhkB,kBAAA5Q,UAEAnU,EAAAC,QAAA,YAAAiF,MAAA,eAAApF,KAAAkpC,YAAAlpC,MACAE,EAAAC,QAAA,YAAAiF,MAAA,cAAApF,KAAAyjB,WAAAzjB,MACAE,EAAAC,QAAA,YAAAiF,MAAA,iBAAApF,KAAA+L,cAAA/L,OAGAkpC,YAAA,WACA,MAAAlpC,MAAAK,OAGA0L,cAAA,SAAAzR,EAAA0C,EAAAqa,GACAA,EAAAA,IAAA,EACArX,KAAAK,MAAA8I,IAAA7O,EAAA0C,GAAAqa,OAAAA,KAGAoM,WAAA,SAAAnpB,GACA,MAAA0F,MAAAK,MAAAkB,IAAAjH,KAIA,OAAA2S,KCzBAnT,EAAA,qCAAA,gCAAA,SAAAowB,GACA,GAAAjd,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAgE,WAAA,GAAAkmB,GAAAxlB,cAAA2a,WAAA,aAGAnf,EAAAC,QAAA,YAAAiF,MAAA,mBAAApF,KAAAokC,gBAAApkC,MAGAE,EAAAC,QAAA,YAAAiF,MAAA,iBAAApF,KAAAqkC,qBAAArkC,OAGAokC,gBAAA,SAAA9pC,GACA,MAAA0F,MAAAgE,WAAAkW,WAAA5f,KAAAA,KAGA+pC,qBAAA,WACA,MAAArkC,MAAAgE,aAKA,OAAAiJ,KCtBAnT,EAAA,qCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAEAG,EAAAC,QAAA,YAAAiF,MAAA,mBAAApF,KAAAkkC,gBAAAlkC,MAEAA,KAAAC,SAAAC,EAAAC,QAAA,uBAAA,qBAAAH,KAAAkkC,kBASAA,gBAAA,WACA,GAAAlgC,GAAA9D,EAAAC,QAAA,YAAAmB,QAAA,qBACA8I,GAAAC,KAAArG,EAAAwG,OAAA,SAAA+Z,GACAA,EAAApb,IAAA,cAAA,OAKA,OAAA8D,KCvBAnT,EAAA,kCAAA,iCAAA,SAAAmvC,GACA,GAAAh8B,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WACAC,KAAAC,SAAAC,EAAAC,QAAA,YAAA,aAAAH,KAAA8d,YAGAA,UAAA,SAAAvf,EAAAuc,GACA,GAAAza,GAAAH,EAAAC,QAAA,YAAAmB,QAAA,eACApB,GAAAC,QAAA,OAAAmB,QAAA,cAAA,gBAAAjB,MAAAA,EAAA4U,gBAAA6F,EAAAvZ,IAAA,iBAAAuZ,UAAAA,GACA,IAAAzN,GAAAnN,EAAAC,QAAA,UAAAmB,QAAA,mBACA+L,IACAyN,EAAA3R,IAAA,cAAA,KAKA,OAAA8D,KCdAnT,EAAA,uCAAA,WACA,GAAAmT,GAAAvN,WAAA7B,OAAA+B,QACAG,WAAA,WAKAC,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,eAAAH,KAAAw7B,OAIAx7B,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,gBAAAH,KAAAmpC,YAKAnpC,KAAAC,SAAAC,EAAAC,QAAA,gCAAA,cAAAH,KAAAopC,WAGA5N,MAAA,SAAAj9B,EAAAgrB,GAEA,GAAAvsB,GAAAwC,OAAAjB,EAAA0P,QAAAsB,KAEA,SAAA/P,OAAAjB,EAAA0P,QAAA3H,KAAA,OAEAtG,KAAAqpC,UAAArsC,EAAAusB,GACAvpB,KAAAspC,QAAA/f,EAAAhoB,IAAA,MAAAgoB,IAGAvpB,KAAAspC,QAAAtsC,EAAAusB,IAIA4f,WAAA,SAAA5f,GACAvpB,KAAAqpC,UAAA9f,EAAAhoB,IAAA,QAAAgoB,GAAA,GACAvpB,KAAAspC,QAAA/f,EAAAhoB,IAAA,MAAAgoB,IAGA6f,SAAA,SAAA7f,EAAApS,GACAnX,KAAAupC,cAAApyB,EAAAnT,aAWAqlC,UAAA,SAAA/uC,EAAAivB,EAAAlS,GACAA,EAAAA,IAAA,CAEA,IAAA2M,GAAAuF,EAAAhoB,IAAA,UAEAu9B,EAAAvV,EAAAvlB,WAAAiG,OAAA3P,KAAAkF,OAAA8P,KAAAhV,IAGAA,IAAAivB,EAAAhoB,IAAA,UACAu9B,MAIA,GAAAA,EAAArjC,OACAuoB,EAAAwlB,WAAA,gEAEAjgB,EAAApgB,IAAA,OAAA7O,GAAA+c,OAAAA,UACA2M,GAAAwlB,YAGAjgB,EAAApgB,IAAA,SAAA6a,GACAuF,EAAAxoB,QAAA,gBAAAwoB,IAWA+f,QAAA,SAAAG,EAAAlgB,GAEA,GAAAvF,GAAAuF,EAAAhoB,IAAA,UAMAmoC,GAAA,EACAC,GAAA,EAEAC,EAAAH,EAAAhY,MAAA,GAAAzD,QAAA,iBAOA,IAAA4b,EAAA,CACA,GAAAC,GAAAtgB,EAAAvlB,UAEA4lC,GAAAA,EAAAvuC,IAAA,SAAAsxB,GAEA,GAAAryB,GAAAqyB,EAAA9wB,QAAA,IAAA,IAAAA,QAAA,SAAA,IAEAiuC,EAAAD,EAAA3vB,WAAA5f,KAAAA,GACAA,IAAAivB,EAAAhoB,IAAA,SAEAyiB,EAAA+lB,QAAA,wCACAL,GAAA,GACAI,GAAAA,EAAAvoC,IAAA,SAAAgoB,EAAAhoB,IAAA,WAEAooC,GAAA,EACA3lB,EAAAgmB,WAAA,2CAMAN,SACA1lB,GAAA+lB,QAIAJ,SACA3lB,GAAAgmB,WAIAzgB,EAAApgB,IAAA,SAAA6a,GACAuF,EAAAxoB,QAAA,gBAAAwoB,IAIAggB,cAAA,SAAAvlC,GACA,GAAA3B,GAAArC,IACAgE,GAAAwG,OAAAnP,IAAA,SAAAwlC,GACAx+B,EAAAgnC,UAAAxI,EAAAt/B,IAAA,QAAAs/B,GACAx+B,EAAAinC,QAAAzI,EAAAt/B,IAAA,MAAAs/B,OAMA,OAAA5zB,KCpJAnT,EACA,+BAIA,yBACA,yBACA,+BACA,+BACA,uBACA,2CACA,2BACA,2BACA,8BACA,8BACA,+BACA,8BACA,kCACA,+BACA,4BACA,0BACA,6BACA,2BACA,iCACA,sCACA,uCACA,2BACA,gCACA,+BACA,4BACA,8BACA,kCACA,iCACA,sBACA,qCACA,mCACA,8BACA,+BACA,6BACA,yBACA,0BACA,8BACA,qCACA,2CACA,sCACA,+BACA,gCACA,+CACA,+BAIA,2BACA,mCACA,iCACA,6BACA,qCACA,iCACA,8BACA,0BACA,iCACA,gCACA,mCACA,qCACA,+BACA,mCACA,mCACA,mCACA,yBACA,6BACA,4BACA,iCACA,qCACA,sCAKA,4BACA,2BACA,qCACA,iCACA,qCACA,+BACA,gCACA,kCACA,qCAKA,6BACA,4BACA,oCACA,kCACA,iCACA,qCAEA,SAIAmwC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAIAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAIAC,GACAC,GACAC,GACAC,GACAC,GACAC,IAGA,GAAAhiC,IAAAvN,WAAA7B,OAAA+B,QA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","file":"builder.js","sourcesContent":["(function () {\n","/**\r\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice,\r\n        jsSuffixRegExp = /\\.js$/;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map['*']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                name = name.split('/');\r\n                lastIndex = name.length - 1;\r\n\r\n                // Node .js allowance:\r\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\r\n                }\r\n\r\n                //Lop off the last part of baseParts, so that . matches the\r\n                //\"directory\" and not name of the baseName's module. For instance,\r\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\r\n                //want the directory, \"one/two\" for this normalization.\r\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with '..'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split('/');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join('/');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            var args = aps.call(arguments, 0);\r\n\r\n            //If first arg is not require('string'), and there is only\r\n            //one arg, it is the array form without a callback. Insert\r\n            //a null so that the following concat is correct.\r\n            if (typeof args[0] !== 'string' && args.length === 1) {\r\n                args.push(null);\r\n            }\r\n            return req.apply(undef, args.concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error('No ' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf('!') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + '!' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== 'undefined') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: '',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            callbackType = typeof callback,\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (callbackType === 'undefined' || callbackType === 'function') {\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + ' missing ' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback ? callback.apply(defined[name], args) : undefined;\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (config.deps) {\r\n                req(config.deps, config.callback);\r\n            }\r\n            if (!callback) {\r\n                return;\r\n            }\r\n\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require(['a'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === 'function') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require('id') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        return req(cfg);\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n        if (typeof name !== 'string') {\r\n            throw new Error('See almond README: incorrect module build, no module name');\r\n        }\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menuItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-app-menu-item',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for domain changes and re-render when we detect one.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t\t// When we change the model (to disable it, for example), re-render.\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\t// Listen for clicks on our app menu.\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickAppMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click on a menu item, fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * We pass this.model so that we know what item was clicked.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\te event\r\n\t\t * @return return\r\n\t\t */\r\n\t\tclickAppMenu: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t\t\t\t * If we have any dashicons in our model, render them.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDashicons: function() {\r\n\t\t\t\t\tif ( this.dashicons ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons ' + this.dashicons + '\"></span>'\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * Render classes for our menu item, including active.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = this.classes;\r\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\r\n\t\t\t\t\t\tclasses += ' active';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its url.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderUrl: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '#';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its target.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderTarget: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\treturn '_blank';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '_self';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu item is disabled, output 'disabled'\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\tif ( this.disabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Collection view that takes our app menu items and renders an individual view for each.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: appMenuItemView,\r\n\r\n\t\t/**\r\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders the action buttons to the right of the app menu. i.e. Publish\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menuButtons',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'span',\r\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\r\n\t    \t\t/**\r\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\r\n\t    \t\t *\r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\trenderPublish: function() {\r\n\t    \t\t\tif ( that.publishWidth ) {\r\n\t    \t\t\t\tthis.publishWidth = 'style=\"width:' + that.publishWidth + 'px !important\"';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\tthis.publishWidth = '';\r\n\t    \t\t\t}\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\r\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\r\n\t    \t\t\t}\r\n\t    \t\t\treturn template( this );\r\n\t    \t\t},\r\n\r\n\t    \t\t/**\r\n\t    \t\t * If our app state is clean, disable publish.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\r\n\t    \t\t/**\r\n\t    \t\t * If our app isn't clean, render our 'viewChanges' button.\r\n\t    \t\t * @since  version\r\n\t    \t\t * @return {[type]} [description]\r\n\t    \t\t */\r\n\t    \t\tmaybeRenderCancel: function() {\r\n\t    \t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\tvar viewChanges = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-view-changes' );\r\n\t    \t\t\t\treturn viewChanges( this );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\r\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Listen for clicks on the Publish or view changes button.\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tevents: {\r\n\t\t\t'click .publish': 'clickPublish',\r\n\t\t\t'click .viewChanges': 'clickViewChanges'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click view changes, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickViewChanges: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\r\n\t\t},\r\n\r\n\t\tbounceIcon: function( changeModel ) {\r\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders the action buttons to the right of the app menu. i.e. Publish\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenuButton',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'span',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\t/**\r\n\t    \t\t * If our app state is clean, disable button.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Listen for clicks on the mobile menu button.\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tevents: {\r\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickMobileMenu: function( e) {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Main application header. Includes links to all of our domains.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-app-header',\r\n\r\n\t\tregions: {\r\n\t\t\t// Menu is our main app menu.\r\n\t\t\tmenu: '.nf-app-menu',\r\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\r\n\t\t\tbuttons: '.nf-app-buttons',\r\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// Get our domains\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\r\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\r\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\r\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click #nf-logo': 'clickLogo'\r\n\t\t},\r\n\r\n\t\tclickLogo: function( e ) {\r\n\t\t\t\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our sub-header. i.e. add new field, add new action, etc.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our builder header.\r\n *\r\n * This is a layout view and handles two regions:\r\n * app - menu/buttons\r\n * subapp - title, add new field, etc.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: \"div\",\r\n\t\ttemplate: \"#tmpl-nf-header\",\r\n\r\n\t\tregions: {\r\n\t\t\tapp: \"#nf-app-header\",\r\n\t\t\tformTitle: \"#nf-app-form-title\",\r\n\t\t\tappSub: \"#nf-app-sub-header\"\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tthis.app.show( new appHeaderView() );\r\n\r\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar formSettings = formData.get( 'settings' );\r\n\r\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\r\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\r\n\r\n\t\t\tthis.changeSubHeader();\r\n\t\t},\r\n\r\n\t\tchangeSubHeader: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\r\n\t\t\tthis.appSub.show( subHeaderView );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our builder.\r\n *\r\n * This is a layout view and handles three regions:\r\n * gutterLeft - gutter to the left of our main content area\r\n * body - main content area\r\n * gutterRight - gutter to the right of our main content area\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/main',[], function() {\r\n\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main',\r\n\t\tclassName: 'nf-main-test',\r\n\t\tmaybeDone: false,\r\n\r\n\t\toffsetRight: false,\r\n\t\toffsetLeft: false,\r\n\r\n\t\tregions: {\r\n\t\t\tgutterLeft: '#nf-main-gutter-left',\r\n\t\t\tbody: '#nf-main-body',\r\n\t\t\tgutterRight: '#nf-main-gutter-right'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\r\n\t\t\t */\r\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\r\n\r\n\t\t\t/*\r\n\t\t\t * Reply to messages requesting that we resize our gutters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\r\n\t\t\tthis.body.show( bodyView );\r\n\r\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\r\n\t\t\tthis.gutterLeft.show( gutterLeftView );\r\n\r\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\r\n\t\t\tthis.gutterRight.show( gutterRightView );\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\r\n\t\t},\r\n\r\n\t\tgetMainEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\r\n\t\t\tthis.initialGutterResize();\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( window ).off( 'resize', this.resize );\r\n\t\t},\r\n\r\n\t\tinitialGutterResize: function() {\r\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\r\n\t\t\tthis.resizeGutter( this.gutterRight.el );\r\n\t\t\tthis.setBothGuttersFixed( this );\r\n\t\t},\r\n\r\n\t\tresizeBothGutters: function( e ) {\r\n\t\t\tvar context = ( e ) ? e.data.context : this;\r\n\r\n\t\t\tvar leftEl = context.gutterLeft.el;\r\n\t\t\tvar rightEl = context.gutterRight.el;\r\n\t\t\t\r\n\t\t\tcontext.resizeGutter( leftEl, context );\r\n\t\t\tcontext.resizeGutter( rightEl, context );\r\n\r\n\t\t\tcontext.setBothGuttersAbsolute( context );\r\n\r\n\t\t\t/*\r\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\r\n\t\t\t */\t\r\n\t\t\tclearTimeout( context.maybeDone );\r\n\t\t\t/*\r\n\t\t\t * Add our timeout.\r\n\t\t\t */\r\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\r\n\t\t},\r\n\r\n\t\tresizeGutter: function( el, context ) {\r\n\t\t\tvar top = jQuery( el ).offset().top;\r\n\t\t\tvar viewHeight = jQuery( window ).height();\r\n\t\t\tvar height = viewHeight - top;\r\n\t\t\tjQuery( el ).height( height );\r\n\t\t},\r\n\r\n\t\tsetBothGuttersFixed: function( context ) {\r\n\t\t\tcontext = context || this;\r\n\r\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\tvar topLeft = offsetLeft.top;\r\n\t\t\tvar leftLeft = offsetLeft.left;\r\n\r\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\t\r\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\r\n\t\t\tvar topRight = offsetRight.top;\r\n\t\t\tvar leftRight = offsetRight.left;\r\n\r\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\r\n\t\t},\r\n\r\n\t\tsetBothGuttersAbsolute: function( context ) {\r\n\t\t\tcontext = context || this;\r\n\r\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\r\n\r\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\r\n\r\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\r\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\r\n\t\t},\r\n\r\n\t\tupdateGutters: function() {\r\n\t\t\tthis.resizeBothGutters();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenuItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\t// Listen for clicks on our app menu.\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickAppMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click on a menu item, fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * We pass this.model so that we know what item was clicked.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\te event\r\n\t\t * @return return\r\n\t\t */\r\n\t\tclickAppMenu: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t\t\t\t * If we have any dashicons in our model, render them.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDashicons: function() {\r\n\t\t\t\t\tif ( this.mobileDashicon ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons ' + this.mobileDashicon + '\"></span>'\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * Render classes for our menu item, including active.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = this.classes;\r\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\r\n\t\t\t\t\t\tclasses += ' active';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its url.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderUrl: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '#';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its target.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderTarget: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\treturn '_blank';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '_self';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu item is disabled, output 'disabled'\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\tif ( this.disabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Single item view used for the menu drawer.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu',\r\n\t\tchildView: mobileMenuItemView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t    \t\t * If our app state is clean, disable button.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-publish': 'clickPublish'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Empty drawer content view.\r\n * Called before we close the drawer.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our drawer region\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer',\r\n\r\n\t\tregions: {\r\n\t\t\theader: '#nf-drawer-header',\r\n\t\t\tcontent: '#nf-drawer-content',\r\n\t\t\tfooter: '#nf-drawer-footer'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( this.el ).parent().perfectScrollbar();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tloadContent: function( drawerID, data ) {\r\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\r\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\r\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\r\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\r\n\r\n\t\t\tthis.header.show( headerView );\r\n\t\t\tthis.content.show( contentView );\r\n\t\t\tthis.footer.show( footerView );\r\n\r\n\t\t},\r\n\r\n\t\temptyContent: function() {\r\n\t\t\tthis.header.empty();\r\n\t\t\tthis.content.empty();\r\n\t\t\tthis.footer.empty();\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\r\n\t\t},\r\n\r\n\t\tclickToggleDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Single item view used for merge tags.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'li',\r\n\r\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:active', this.render );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:active', this.render, this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickTag'\r\n\t\t},\r\n\r\n\t\tclickTag: function( e ) {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tif ( this.active ) {\r\n\t\t\t\t\t\treturn 'active';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Merge tags popup section\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttagName: 'div',\r\n\t\tchildView: mergeTagItemView,\r\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = this.model.get( 'tags' );\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\r\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\r\n\t\t},\r\n\r\n\t\tupdateFields: function() {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tthis.model.set( 'tags', fieldCollection );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tactive: false,\r\n\t\t\texclude: false\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collections of merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: mergeTagModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Merge tags popup\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\r\n\tvar view = Marionette.CollectionView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\r\n\t\tchildView: mergeTagsSectionView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\r\n\t\t},\r\n\r\n\t\treRender: function( settingModel ) {\r\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\r\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\r\n\t\t\tvar that = this;\r\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\r\n\t\t\tif ( 'object' == typeof useMergeTags ) {\r\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\r\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\r\n\t\t\t\t\t\tthat.collection.remove( exclude );\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\r\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\r\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\r\n\t\t\t\t\t\t\t// console.log( sectionModel );\r\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\tgetMergeTagsView: function() {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Builder view.\r\n *\r\n * This layout view has regions that represent our application areas:\r\n * header\r\n * main\r\n * menuDrawer - Mobile side-menu\r\n * drawer\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: \"#tmpl-nf-builder\",\r\n\t\tel: '#nf-builder',\r\n\r\n\t\tregions: {\r\n\t\t\theader: \"#nf-header\",\r\n\t\t\tmain: \"#nf-main\",\r\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\r\n\t\t\tdrawer: \"#nf-drawer\",\r\n\t\t\tmergeTagsContent: '.merge-tags-content'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests asking for the builder dom element.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\r\n\t\t\t// Respond to requests asking for the builder view\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\r\n\t\t\t// Layout views aren't self-rendering.\r\n\t\t\tthis.render();\r\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n\t\t\tvar mergeTagsClone = mergeTags.clone();\r\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\r\n\t\t\t// Show our header.\r\n\t\t\tthis.header.show( new headerView() );\r\n\t\t\t// Show our main content.\r\n\t\t\tthis.main.show( new mainView() );\r\n\t\t\t// Show our mobile menu\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\r\n\t\t\t// Show our drawer.\r\n\t\t\tthis.drawer.show( new drawerView() );\r\n\r\n\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\r\n\t\t},\r\n\r\n\t\tgetBuilderEl: function() {\r\n\t\t\treturn this.el;\r\n\t\t},\r\n\r\n\t\tgetBuilderView: function() {\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t// Listen for clicks\r\n\t\tevents: {\r\n\t\t\t'click .nf-open-drawer': 'openDrawer',\r\n\t\t\t'click .nf-change-domain': 'changeDomain',\r\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Someone clicked to open a drawer, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te \tevent\r\n\t\t * @return void\r\n\t\t */\r\n\t\topenDrawer: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Someone clicked to close a drawer, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcloseDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Someone clicked to change the domain, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te \tevent\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeDomain: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","\r\ndefine( 'controllers/app/remote',[], function() {\r\n    return Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\r\n        },\r\n\r\n        addListener: function( model, dataModel ) {\r\n\r\n            var listenTo = model.get( 'remote' ).listen;\r\n\r\n            // TODO: Change seems to be triggering twice on each update.\r\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\r\n\r\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\r\n\r\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\r\n\r\n            // Auto-trigger get:remote on drawer load.\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\r\n            jQuery( e.srcElement ).addClass( 'spin' );\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        updateSetting: function( dataModel, settingModel ) {\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        getRemote: function( dataModel ) {\r\n\r\n            var remote = this.get( 'remote' );\r\n\r\n            var data = {\r\n                parentValue: dataModel.get( remote.listen ),\r\n                action: remote.action,\r\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\r\n            };\r\n\r\n            // TODO: Disable setting and lock drawer while updating.\r\n            var that = this;\r\n            jQuery.post( ajaxurl, data, function( response ){\r\n                var response = JSON.parse( response );\r\n\r\n                if( 'textbox' == that.get( 'type' ) ) {\r\n                    dataModel.set( that.get('name'), response.value );\r\n                }\r\n\r\n                if( 'select' == that.get( 'type' ) ) {\r\n                    that.set( 'options', response.options );\r\n                    that.trigger( 'rerender' );\r\n                }\r\n            });\r\n        },\r\n\r\n    });\r\n} );\n","/**\r\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawer',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our drawer-related click events.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\r\n\r\n\t\t\t// Reply to direct requests to open or close the drawer.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\r\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\r\n\t\t\t\r\n\t\t\t// Reply to requests to prevent our drawer from closing\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\r\n\t\t\t// Reply to requests to enable drawer closing\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\r\n\t\t\t// Reply to requests for our disabled/enabled state.\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Object that holds our array of 'prevent close' values.\r\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\r\n\t\t\t */\r\n\t\t\tthis.objPreventClose = {};\r\n\r\n\t\t\t/*\r\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\r\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Handles closing our drawer\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcloseDrawer: function() {\r\n\t\t\t// Get our current domain.\r\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\r\n\t\t\tif ( ! currentDrawer || this.maybePreventClose() ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\r\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\r\n\t\t\t/*\r\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\r\n\t\t\t * TODO: Remove this radio message in the future.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\r\n\t\t\t\r\n\t\t\t// Send a message to our drawer to empty its contents.\r\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\r\n\r\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\r\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\r\n\r\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\r\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\r\n\r\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\r\n\r\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\r\n\t\t\t *\r\n\t\t\t * Once our drawer is closed, we:\r\n\t\t\t * clear our interval\r\n\t\t\t * request that the app change it's current drawer to false\r\n\t\t\t * trigger a drawer closed message\r\n\t\t\t */\r\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\r\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\r\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\r\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\r\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\r\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\r\n\t        \t}\r\n\t\t\t}, 150 );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Click handler for our 'open drawer' event.\r\n\t\t * @since  3.0\r\n\t\t * @param  e jQuery event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickOpenDrawer: function( e ) {\r\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\r\n\t\t\tthis.openDrawer( drawerID );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Open our drawer.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string drawerID \tID of the drawer we want to open.\r\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\r\n\t\t * @return void\r\n\t\t */\r\n\t\topenDrawer: function( drawerID, data ) {\r\n\t\t\tif ( this.maybePreventClose() ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\r\n\t\t\tdata = data || {};\r\n\r\n\t\t\t/*\r\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\r\n\t\t\t *\r\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\r\n\t\t\t */\r\n\t\t\tif ( 'undefined' != typeof data.model ) {\r\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\r\n\t\t\t\tdata.model.set( 'editActive', true );\r\n\t\t\t\tthis.dataModel = data.model;\r\n\t\t\t}\r\n\r\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\r\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\r\n\t\t\t\r\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\r\n\t\t\t\r\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\r\n\t\t\t\r\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\r\n\t\t\t *\r\n\t\t\t * Once our drawer is opened, we:\r\n\t\t\t * clear our interval\r\n\t\t\t * focus our filter\r\n\t\t\t * request that the app update its current drawer to the one we opened\r\n\t\t\t * trigger a drawer opened message\r\n\t\t\t */\r\n\t\t\tthis.hasFocus = false;\r\n\r\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\r\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\r\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\r\n\t\t\t\t\tif ( ! that.hasFocus ) {\r\n\t\t        \t\tthat.focusFilter();\r\n\t\t\t\t\t\tthat.hasFocus = true;\r\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\r\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\r\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\r\n\t\t\t\t\t}   \t\t\r\n\t        \t}\r\n\t\t\t}, 150 );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Toggle the drawer from half to full screen and vise-versa\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttoggleDrawerSize: function() {\r\n\t\t\t// Get our drawer element.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\t// toggle our drawer size class.\r\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Focus our filter\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        focusFilter: function() {\r\n        \t// Get our filter element\r\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\r\n        \t// Focus\r\n        \tjQuery( filterEl ).focus();\r\n        },\r\n\r\n        /**\r\n         * Get the CSS right position (in px) of the closed drawer element.\r\n         * This is calculated by:\r\n         * getting the width of the builder element\r\n         * add 300 pixels\r\n         * make it negative\r\n         * \r\n         * @since  3.0\r\n         * @return void\r\n         */\r\n        getClosedDrawerPos: function() {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\r\n\t\t\treturn '-' + closedPos + 'px';\r\n        },\r\n\r\n        /**\r\n         * Check to see if anything has registered a prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @return boolean\r\n         */\r\n        maybePreventClose: function() {\r\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\r\n        \t\treturn false;\r\n        \t} else {\r\n        \t\treturn true;\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Register a prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent close' setting.\r\n         * @return void\r\n         */\r\n        preventClose: function( key ) {\r\n        \tthis.objPreventClose[ key ] = true;\r\n        \t/*\r\n        \t * When we disable closing the drawer, add the disable class.\r\n        \t */\r\n        \t// Get our current drawer.\r\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\r\n        },\r\n\r\n        /**\r\n         * Remove a previously registered prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent close' setting.\r\n         * @return void\r\n         */\r\n        enableClose: function( key ) {\r\n        \tdelete this.objPreventClose[ key ];\r\n        \t /*\r\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\r\n        \t */\r\n        \tif ( ! this.maybePreventClose() ) {\r\n\t        \t// Get our current drawer.\r\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );        \t\t\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * When we focus our filter, make sure that our open drawer interval is cleared.\r\n         * \r\n         * @since  3.0\r\n         * @return void\r\n         */\r\n        filterFocused: function() {\r\n        \tclearInterval( this.checkOpenDrawerPos );\r\n        },\r\n\r\n        getPreventClose: function() {\r\n        \treturn this.objPreventClose;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Default drawer header.\r\n *\r\n * Includes our filter/search and 'Done' button.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerDefault',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\t// Listen for our drawer being disabled.\r\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// Remove extra wrapping div.\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t\t// Respond to requests related to our filter.\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\r\n\t\t\t'input .nf-filter'\t: 'changeFilter',\r\n\t\t\t'focus input'\t\t: 'getFocus'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the filter text is changed, trigger an event on our current drawer.\r\n\t\t * This lets us keep the logic separate from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeFilter: function( e ) {\r\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\r\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tmaybeChangeFilter: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode ) {\r\n\t\t\t\te.addObject = true;\r\n\t\t\t\tthis.changeFilter( e );\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Clear our filter.\r\n\t\t *\r\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclearFilter: function() {\r\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\r\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\r\n\t\t\t\tfilterEl.val('');\r\n\t\t\t\tfilterEl.trigger( 'input' );\r\n\t\t\t\tfilterEl.focus();\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tblurFilter: function() {\r\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return our filter dom element.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\r\n\t\t},\r\n\r\n\t\tgetFocus: function() {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\t// Get our current domain.\r\n\t\t\t\t\tif ( this.drawerDisabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Default drawer footer\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/footerDefault',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\treturn new defaultHeaderView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetFooterView: function( data ) {\r\n\t\t\t\treturn new defaultFooterView( data );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds all of our drawer models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: drawerModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\r\n\t\t},\r\n\r\n\t\tremoveStagedField: function( el ) {\r\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: stagedFieldView,\r\n\t\temptyView: stagedFieldsEmptyView,\r\n\r\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\r\n\t\t\tthis.$el = jQuery( this.el ).parent();\r\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tvar that = this;\r\n\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tjQuery( this.el ).parent().draggable( {\r\n\t\t\t\topacity: 0.9,\r\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\trefreshPositions: true,\r\n\t\t\t\tgrid: [ 3, 3 ],\r\n\t\t\t\ttolerance: 'pointer',\r\n\r\n\t\t\t\thelper: function( e ) {\r\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\r\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\r\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\r\n\t\t\t\t\tvar left = width / 4;\r\n\t\t\t\t\tvar top = height / 2;\r\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\r\n\t\t\t\t\tjQuery( element ).zIndex( 1000 );\r\n\t\t\t\t\treturn element;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\r\n\t\t\t\t},\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tgetStagedFieldsEl: function() {\r\n\t\t\treturn jQuery( this.el );\r\n\t\t},\r\n\r\n\t\tonAddChild: function() {\r\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\r\n\t\t},\r\n\r\n\t\tonRemoveChild: function() {\r\n\t\t\tif( this.hasStagedFields() ) return;\r\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\r\n\t\t},\r\n\r\n\t\thasStagedFields: function() {\r\n\t\t\treturn  0 != this.collection.length;\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model for our staged field.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/stagingModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection of staged fields.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: stagingModel,\r\n\t\tcomparator: 'order'\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t_.bindAll( this, 'render' );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tthis.dragging = false;\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\r\n\t\t\t */\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\r\n\t\t\t\t\topacity: 0.9,\r\n\t\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\r\n\t\t\t\t\trefreshPositions: true,\r\n\t\t\t\t\tgrid: [ 5, 5 ],\r\n\t\t\t\t\tappendTo: '#nf-builder',\r\n\r\n\t\t\t\t\thelper: function( e ) {\r\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\r\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\r\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\r\n\t\t\t\t\t\tvar left = width / 4;\r\n\t\t\t\t\t\tvar top = height / 2;\r\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\r\n\t\t\t\t\t\tjQuery( element ).zIndex( 1000 );\r\n\t\t\t\t\t\treturn element;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = true;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = false;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tdrag: function(e, ui) {\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} ).disableSelection();\r\n\r\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\r\n\t\t\t    \tjQuery( this ).addClass( 'active' );\r\n\t\t\t    } ).blur( function() {\r\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\r\n\t\t\t    } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-item': 'clickFieldType',\r\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\r\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\r\n\t\t},\r\n\r\n\t\tclickFieldType: function( e ) {\r\n\t\t\tif ( ! this.dragging ) {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmousedownFieldType: function( e ) {\r\n\t\t\tjQuery( e.target).addClass( 'clicked' );\r\n\t\t\tsetTimeout( function() {\r\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\r\n\t\t\t}, 1500 );\r\n\t\t},\r\n\r\n\t\tmaybeClickFieldType: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode ) {\r\n\t\t\t\tthis.clickFieldType( e );\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderFieldTypes: function() {\r\n\t\t\t        var html = '';\r\n\t\t\t        var that = this;\r\n\t\t\t        _.each( this.fieldTypes, function( id ) {\r\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\r\n\t\t\t            var nicename = type.get( 'nicename' );\r\n\t\t\t            var icon = type.get( 'icon' );\r\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\r\n\t\t\t            html += renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField } );\r\n\t\t\t        } );\r\n\t\t\t        return html;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsavedField: function() {\r\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\r\n\t\t\t\t\t\treturn 'nf-saved';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetTypeSection: function() {\r\n\t\t\treturn this.el;\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: fieldTypeSectionView,\r\n\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\r\n\r\n\t\tregions: {\r\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\r\n\t\t\tprimary: '#nf-drawer-primary',\r\n\t\t\tsecondary: '#nf-drawer-secondary'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\r\n\r\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\r\n\t\t\tthis.primaryCollection = this.savedCollection;\r\n\r\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\r\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\r\n\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\r\n\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\r\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\r\n\t\t\tthis.primary.reset();\r\n\t\t\tthis.secondary.reset();\r\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\r\n\t\t},\r\n\r\n\t\tremoveFieldTypeFilter: function () {\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\r\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t},\r\n\r\n\t\tgetChildView: function( model ) {\r\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\r\n\t\t\r\n\t\tregions: {\r\n\t\t\tsettings: '.nf-field-settings'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.model.get( 'display' ) ) {\r\n\t\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\r\n\t\t\t} else {\r\n\t\t\t\tthis.settings.empty();\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .toggle': 'clickToggleGroup'\r\n\t\t},\r\n\r\n\t\tclickToggleGroup: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderLabel: function() {\r\n\t\t\t\t\tif ( '' != this.label ) {\r\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\r\n\t\t\t\t\t\treturn groupLabel( this );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderArrowDir: function() {\r\n\t\t\t\t\tif ( this.display ) {\r\n\t\t\t\t\t\treturn 'down';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn 'right';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: itemSettingGroupView,\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\r\n\r\n\t\tregions: {\r\n\t\t\tsettingTitle: '.nf-setting-title',\r\n\t\t\tsettingGroups: '.nf-setting-groups'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.dataModel = data.model;\r\n\t\t\tthis.groupCollection = data.groupCollection;\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\r\n\r\n\t\t\tthis.settingTitle.show( titleView );\r\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\tmaybeRenderTitle: function() {\r\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\r\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\r\n\t    \t\t\t\treturn title( this );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\treturn type.get( 'nicename' );\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Edit Settings drawer header.\r\n *\r\n * Includes our 'Done' button.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\t// Listen for our drawer being disabled.\r\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\t// Get our current domain.\r\n\t\t\t\t\tif ( this.drawerDisabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Button to add an action to the form.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/drawer/typeButton',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t\t\r\n\t\t\tjQuery( this.el ).disableSelection();\r\n\t\t\t\r\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tjQuery( this.el ).draggable( {\r\n\t\t\t\t\topacity: 0.9,\r\n\t\t\t\t\ttolerance: 'intersect',\r\n\t\t\t\t\tscroll: false,\r\n\t\t\t\t\thelper: 'clone',\r\n\r\n\t\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = true;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = false;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-item': 'clickAddAction'\r\n\t\t},\r\n\r\n\t\tclickAddAction: function( e ) {\r\n\t\t\tif ( ! this.dragging ) {\r\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\r\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\r\n\t\t\t\t} else { // This isn't an installed action\r\n\t\t\t\t\twindow.open( this.model.get( 'link' ), '_blank' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-item';\r\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\r\n\t\t\t\t\t\tclasses += ' nf-has-img';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( 'installed' == this.section ) {\r\n\t\t\t\t\t\tclasses += ' nf-action-type';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderStyle: function() {\r\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\r\n\t\t\t\t\t\treturn \"style=\\\"background-image: url(\" + this.image + \");\\\"\"\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\r\n\t\tchildView: actionTypeButtonView,\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\trenderNicename: function() {\r\n\t\t\t\t\treturn that.collection.nicename;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\treturn that.collection.slug;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Add action drawer.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection'], function( actionTypeCollectionView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\r\n\r\n\t\tregions: {\r\n\t\t\tprimary: '#nf-drawer-primary',\r\n\t\t\tsecondary: '#nf-drawer-secondary'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\r\n\t\t\r\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\r\n\t\t\tthis.primaryCollection = this.installedActions;\r\n\r\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\r\n\t\t\tthis.secondaryCollection = this.availableActions;\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.secondaryCollection } ) );\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\r\n\t\t\tthis.primary.reset();\r\n\t\t\tthis.secondary.reset();\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: filteredAvailable } ) );\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tremoveactionTypeFilter: function () {\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.installedActions } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.availableActions } ) );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Individual change item.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:disabled', this.render );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .undoSingle': 'undoSingle'\r\n\t\t},\r\n\r\n\t\tundoSingle: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Changes collection view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'table',\r\n        className: 'nf-changes',\r\n\t\tchildView: viewChangesItem\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Handles clicks on the 'view changes' button in the header.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\r\n\r\n\t\tevents: {\r\n\t\t\t'click .undoChanges': 'clickUndoChanges'\r\n\t\t},\r\n\r\n\t\tclickUndoChanges: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Error view used for settings.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/settingError',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\r\n\r\n\t\tregions: {\r\n\t\t\terror: '.nf-setting-error'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\t/*\r\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\r\n\t\t\t * Defaults to false.\r\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\r\n\t\t\t */\r\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\r\n\t\t\t\r\n\t\t\tif ( renderOnChange ) {\r\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            var remote = this.model.get( 'remote' );\r\n\t\t\tif( remote ) {\r\n\r\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\r\n                    // Add 'update' icons\r\n                    var label = this.model.get('label');\r\n                    this.model.set('label', label + ' <a class=\"extra\"><span class=\"dashicons dashicons-update\"></span></a>');\r\n                }\r\n\r\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\r\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\r\n\t\t\tthis.model.off( 'change:error', this.renderError );\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif( this.model.get( 'remote' ) ) {\r\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * Unescape any HTML being saved if we are a textbox.\r\n\t\t\t */\r\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\r\n\t\t\t\tvar setting = this.model.get( 'name' );\r\n\t\t\t\tvar value = this.dataModel.get( setting );\r\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\t/*\r\n\t\t\t * We want to escape any HTML being output if we are a textbox.\r\n\t\t\t */\r\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\r\n\t\t\t\tvar setting = this.model.get( 'name' );\r\n\t\t\t\tvar value = this.dataModel.get( setting );\r\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.mergeTagsContentView = false;\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\r\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\r\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\r\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\r\n\t\t\t\t\tcontent: content,\r\n\t\t\t\t\tmaxWidth: 200,\r\n\t\t\t\t\ttheme: 'TooltipBorder',\r\n\t\t\t\t\ttrigger: 'click',\r\n\t\t\t\t\tcloseOnClick: true\r\n\t\t\t\t})\r\n\t\t    });\r\n\t\t\t\r\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\r\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t    }\r\n\r\n\t\t\t/*\r\n\t\t\t * Apply Setting Field Masks\r\n\t\t\t */\r\n\t\t\tvar mask = this.model.get( 'mask' );\r\n\r\n\t\t\tif( typeof mask != \"undefined\" ){\r\n\r\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\r\n\r\n\t\t\t\tswitch( mask.type ){\r\n\t\t\t\t\tcase 'numeric':\r\n\t\t\t\t\t\tinput.autoNumeric({\r\n\t\t\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'currency':\r\n\r\n\t\t\t\t\t\tvar currency = nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' );\r\n\t\t\t\t\t\tvar currencySymbol = nfAdmin.currencySymbols[ currency ] || '';\r\n\r\n\t\t\t\t\t\tinput.autoNumeric({\r\n\t\t\t\t\t\t\taSign:  jQuery('<div />').html(currencySymbol).text(),\r\n\t\t\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'custom':\r\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format )\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// TODO: Error Logging.\r\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.renderError();\r\n\t\t},\r\n\r\n\t\tonShow: function() {\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\trenderError: function() {\r\n\t\t\tif ( this.model.get( 'error' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\r\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\r\n\t\t\t\tthis.error.empty();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\r\n\t    \t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) != this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\r\n\t    \t\trenderSetting: function(){\r\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\r\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\r\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\r\n\t    \t\t\t\tthis.value = '';\r\n\t    \t\t\t}\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderLabelClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( this.use_merge_tags ) {\r\n\t\t\t\t\t\tclasses += ' has-merge-tags';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( 'rte' == this.type ) {\r\n\t\t\t\t\t\tclasses += ' rte';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-setting ';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' nf-one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderTooltip: function() {\r\n\t\t\t\t\tif ( this.help ) {\r\n\t\t\t\t\t\treturn '<a class=\"nf-help\" href=\"#\" tabindex=\"-1\"><span class=\"dashicons dashicons-admin-comments\"></span></a><div class=\"nf-help-text\">' + this.help + '</div>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderMergeTags: function() {\r\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderPlaceholder: function() {\r\n\t\t\t\t\tif ( this.placeholder ) {\r\n\t\t\t\t\t\treturn 'placeholder=\"' + this.placeholder + '\"';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change .setting': 'changeSetting',\r\n\t\t\t'keyup .setting': 'keyUpSetting',\r\n\t\t\t'click .setting': 'clickSetting',\r\n\t\t\t'click .extra': 'clickExtra'\r\n\t\t},\r\n\r\n\t\tchangeSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\r\n\t\t},\r\n\r\n\t\tkeyUpSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\r\n\t\t},\r\n\r\n\t\tclickSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e ) {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tdrawerOpened: function() {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tdrawerClosed: function() {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Changes collection view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\r\n\r\n\t\tregions: {\r\n\t\t\tformName: '.new-form-name',\r\n\t\t\tformSubmit: '.new-form-submit'\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\r\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\r\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\r\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\r\n\t\t\t/*\r\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\r\n\t\t\t */\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\r\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\r\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\r\n\t\t\t} else {\r\n\t\t\t\tdataModel.set( 'add_submit', 0 );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .publish': 'clickPublish'\r\n\t\t},\r\n\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Handles clicks on the 'view changes' button in the header.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerNewForm',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Config file for our app drawers.\r\n *\r\n * this.collection represents all of our registered drawers.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawerConfig',[\r\n\t'models/app/drawerCollection',\r\n\t'views/fields/drawer/addField',\r\n\t'views/app/drawer/editSettings',\r\n\t'views/app/drawer/headerEditSettings',\r\n\t'views/actions/drawer/addAction',\r\n\t'views/app/drawer/contentViewChanges',\r\n\t'views/app/drawer/headerViewChanges',\r\n\t'views/app/drawer/contentNewForm',\r\n\t'views/app/drawer/headerNewForm'\r\n\t], function(\r\n\t\tdrawerCollection,\r\n\t\taddFieldView,\r\n\t\teditSettingsView,\r\n\t\teditSettingsHeaderView,\r\n\t\taddActionView,\r\n\t\tviewChangesView,\r\n\t\tviewChangesHeaderView,\r\n\t\tnewFormView,\r\n\t\tnewFormHeaderView,\r\n\t\tmobileItemControlsView\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\r\n\t\t\tthis.collection = new drawerCollection( [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'addField',\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new addFieldView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'addAction',\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new addActionView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'editSettings',\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\r\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\r\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\r\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn new view( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new editSettingsView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'viewChanges',\r\n\r\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new viewChangesView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'newForm',\r\n\r\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\treturn new newFormHeaderView( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new newFormView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t] );\r\n\r\n\t\t\t// Listen for requests for our drawer collection.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\r\n\t\t\t// Listen for requests for specific drawer models.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\r\n\t\t},\r\n\r\n\t\tgetDrawerCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetDrawer: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Default settings title view.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\tif ( 'undefined' != typeof type ) {\r\n\t    \t\t\t\treturn type.get( 'nicename' );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Empty view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/empty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model for our individual domains.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdashicons: '',\r\n\t\t\tclasses: '',\r\n\t\t\tactive: false,\r\n\t\t\turl: '',\r\n\t\t\thotkeys: false,\r\n\t\t\tdisabled: false,\r\n\r\n\t\t\tgetSettingsTitleView: function( data ) {\r\n\t\t\t\treturn new DefaultSettingsTitleView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\r\n\t\t\t\treturn new DefaultSettingsTitleView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetGutterLeftView: function( data ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Return empty view\r\n\t\t\t\t */\r\n\t\t\t\treturn new EmptyView();\r\n\t\t\t},\r\n\r\n\t\t\tgetGutterRightView: function( data ) {\r\n\t\t\t\t/* \r\n\t\t\t\t * Return empty view\r\n\t\t\t\t */\r\n\t\t\t\treturn new EmptyView();\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our domain models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: domainModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\treorderOnSort: true,\r\n\r\n\t\tgetChildView: function() {\r\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\r\n\t\t},\r\n\r\n\t\tgetEmptyView: function() {\r\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.collection.models.length > 0 ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\r\n\r\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\r\n\t\t\t\t *\r\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\r\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\r\n\t\t\t\t * destroy it when the drag stops.\r\n\t\t\t\t */\r\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\t\tthis.initSortable();\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\r\n\t\t},\r\n\r\n\t\tgetSortableEl: function() {\r\n\t\t\treturn this.el;\r\n\t\t},\r\n\r\n\t\tinitSortable: function() {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tvar tolerance = 'pointer';\r\n\t\t\t} else {\r\n\t\t\t\tvar tolerance = 'intersect';\r\n\t\t\t}\r\n\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\t//containment: '#nf-main',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\tcancel: '.nf-item-controls',\r\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\r\n\t\t\t\topacity: 0.95,\r\n\t\t\t\tgrid: [ 5, 5 ],\r\n\t\t\t\t// scroll: false,\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\tscrollSensitivity: 10,\r\n\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdestroySortable: function() {\r\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonAddChild: function( childView ) {\r\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\r\n\t\t\t\tchildView.$el.hide().show( 'clip' );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-add-saved-field',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.renderAddButton();\r\n\t\t},\r\n\r\n\t\trenderAddButton: function() {\r\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\r\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\r\n\t\t\t} else {\r\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\r\n\t\t\t}\r\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-button': 'clickAddSavedField'\r\n\t\t},\r\n\r\n\t\tclickAddSavedField: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Fields settings title view.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:saved', this.render, this );\r\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\r\n\t\t},\r\n\r\n\t\tregions: {\r\n\t\t\taddSaved: '.nf-add-saved-field'\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:saved', this.render );\r\n\t\t\tthis.addSavedjBox.destroy();\r\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.renderjBoxContent();\r\n\t\t\tvar that = this;\r\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\r\n\t\t\t\ttrigger: 'click',\r\n\t\t\t\ttitle: 'Add to Saved Fields',\r\n\t\t\t\tposition: {\r\n\t\t\t\t\tx:'left',\r\n\t\t\t\t\ty:'center'\r\n\t\t\t\t},\r\n\t\t\t\toutside:'x',\r\n\t\t\t\tcloseOnClick: 'body',\r\n\r\n\t\t\t\tonCreated: function() {\r\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\r\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\r\n\t\t},\r\n\r\n\t\trenderjBoxContent: function() {\r\n\t\t\tif ( this.addSaved ) {\r\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\tvar displayName = type.get( 'nicename' );\r\n\r\n\t    \t\t\tif ( this.saved ) {\r\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\r\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\r\n\t    \t\t\t}\r\n\t    \t\t\treturn displayName;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\trenderSavedStar: function() {\r\n\t\t\t\t\tif ( this.saved ) {\r\n\t\t\t\t\t\tvar star = 'filled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar star = 'empty';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Add main header.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/mainHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-header-actions',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\r\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\tif ( actionCollection.models.length == 0 ) {\r\n\t\t\t\tjQuery( this.el ).hide();\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).show();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Actions subheader view.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/itemControls',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-item-controls',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for domain changes and re-render when we detect one.\r\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\t\t\t// \r\n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\r\n\t\t\t'click .nf-edit-settings': 'clickEdit',\r\n\t\t\t'singletap .nf-edit-settings': 'singleTapEdit',\r\n\t\t\t'click .nf-delete': 'clickDelete',\r\n\t\t\t'click .nf-duplicate': 'clickDuplicateField'\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e ) {\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsingleTapEdit: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t},\r\n\r\n\t\tclickDelete: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\r\n\t\t},\r\n\r\n\t\tclickDuplicateField: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\r\n\t\t},\r\n\r\n\t\tmouseoverItemControl: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Single action table row\r\n *\r\n * TODO: make dynamic\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'tr',\r\n\t\ttemplate: '#tmpl-nf-action-item',\r\n\r\n\t\tregions: {\r\n\t\t\titemControls: '.nf-item-controls'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:actionItemTemplate' ) || this.template;\r\n\t\t\tthis.model.on( 'change:label', this.render, this );\r\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\r\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:label', this.render );\r\n\t\t\tthis.model.off( 'change:editActive', this.render );\r\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.model.get( 'editActive' ) ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeDeactivate();\r\n\r\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\r\n\t\t},\r\n\r\n\t\tmaybeDeactivate: function() {\r\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change input': 'changeToggle',\r\n\t\t\t'click': 'maybeClickEdit'\r\n\t\t},\r\n\r\n\t\tmaybeClickEdit: function( e ) {\r\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeToggle: function( e ) {\r\n\t\t\tvar setting = jQuery( e.target ).data( 'setting' );\r\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', setting );\r\n\t\t\tconsole.log( settingModel );\r\n\t\t\tconsole.log( this.model );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderToggle: function( settingName ) {\r\n\t\t\t\t\tthis.settingName = settingName || 'active';\r\n\t\t\t\t\tvar actionLabel = this.label;\r\n\t\t\t\t\tthis.label = '';\r\n\t\t\t\t\tthis.value = this[ this.settingName ];\r\n\t\t\t\t\tthis.name = this.id + '-' + this.settingName;\r\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\r\n\t\t\t\t\thtml = html( this );\r\n\t\t\t\t\tthis.label = actionLabel;\r\n\t\t\t\t\treturn html;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderTypeNicename: function() {\r\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\r\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\r\n\r\n\t\t\t\t\treturn type.get( 'nicename' );\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderTooltip: function() {\r\n\t\t\t\t\tif ( this.help ) {\r\n\t\t\t\t\t\treturn '<a class=\"nf-help\" href=\"#\" tabindex=\"-1\"><span class=\"dashicons dashicons-admin-comments\"></span></a><div class=\"nf-help-text\">' + this.help + '</div>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderMergeTags: function() {\r\n\t\t\t\t\tif ( this.use_merge_tags ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/actions/mainContentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\r\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\r\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\r\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\r\n\t\t\t// }\r\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\r\n\t\t\t// jQuery( this.el ).parent().droppable( {\r\n\t\t\t// \taccept: function( draggable ) {\r\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\r\n\t\t\t// \t\t\treturn true;\r\n\t\t\t// \t\t}\r\n\t\t\t// \t},\r\n\t\t\t// \thoverClass: 'nf-droppable-hover',\r\n\t\t\t// \ttolerance: 'pointer',\r\n\t\t\t// \tover: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t// \t},\r\n\t\t\t// \tout: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t// \t},\r\n\t\t\t// \tdrop: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t// \t},\r\n\t\t\t// } );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Main content view for our actions.\r\n *\r\n * TODO: make dynamic\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttemplate: '#tmpl-nf-action-table',\r\n\t\tchildView: actionView,\r\n\t\temptyView: emptyView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:mainContentTemplate' ) || this.template;\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tjQuery( this.el ).droppable( {\r\n\t\t\t\taccept: '.nf-action-type-draggable',\r\n\t\t\t\tactiveClass: 'nf-droppable-active',\r\n\t\t\t\thoverClass: 'nf-droppable-hover',\r\n\t\t\t\tdrop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\r\n\r\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/advanced/mainHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-header-settings'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/settingItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-form-setting-type',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click': 'clickEdit'\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e ) {\r\n\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\r\n\t    \t\t\tif ( this.editActive ) {\r\n\t    \t\t\t\tclasses += ' active';\r\n\t    \t\t\t}\r\n\t    \t\t\treturn classes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateActiveClass: function() {\r\n\t\t\tif ( this.model.get( 'editActive' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\r\n\tvar view = Marionette.CollectionView.extend({\r\n\t\tchildView: settingItem\r\n\t\t\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our form fields.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/fieldModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Field',\r\n\t\t\tobjectDomain: 'fields',\r\n\t\t\teditActive: false,\r\n\t\t\torder: 999\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( 'undefined' == typeof this.get( 'type' ) ) return;\r\n\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.on( 'change', this.changeSetting, this );\r\n\r\n\t\t\t// Get our parent field type.\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\r\n\t\t\tvar parentType = fieldType.get( 'parentType' );\r\n\r\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\r\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\r\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\r\n\t\t\t\t\tthis.set( key, val, { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * If our field type is a saved field, set our field type to the actual field type\r\n\t\t\t */\r\n\t\t\tif ( 'saved' == fieldType.get( 'section' ) ) {\r\n\t\t\t\tthis.set( 'type', fieldType.get( 'type' ) );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Trigger an init event on three channels:\r\n\t\t\t * \r\n\t\t\t * fields\r\n\t\t\t * fields-parentType\r\n\t\t\t * field-type\r\n\t\t\t *\r\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\r\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\r\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options ) {\r\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field models.\r\n * This is the actual field data created by the user.\r\n *\r\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: fieldModel,\r\n\t\tcomparator: function( model ){\r\n\t\t\treturn parseInt( model.get( 'order' ) );\r\n\t\t},\r\n\t\ttmpNum: 1,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.on( 'add', this.addField, this );\r\n\t\t\tthis.on( 'remove', this.removeField, this );\r\n\r\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\r\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\r\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\r\n\t\t\tthis.newIDs = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we add a field, push the id onto our new fields property.\r\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\taddField: function( model ) {\r\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we remove a field, push the id onto our removed fields property.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\tremoveField: function( model ) {\r\n\t\t\tthis.removedIDs = this.removedIDs || {};\r\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\r\n\t\t},\r\n\r\n\t\taddNewField: function( model ) {\r\n\t\t\tthis.add( model );\r\n\t\t},\r\n\r\n\t\tappendNewField: function( model ) {\r\n\t\t\tif ( 0 == this.length ) {\r\n\t\t\t\tvar order = 0;\r\n\t\t\t} else {\r\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\r\n\t\t\t}\r\n\r\n\t\t\tmodel.set( 'order', order, { silent: true } );\r\n\t\t\tthis.add( model );\r\n\t\t},\r\n\r\n\t\tremoveFieldResponse: function( model ) {\r\n\t\t\tthis.remove( model );\r\n\t\t},\r\n\r\n\t\tfieldExists: function( fieldModel ) {\r\n\t\t\treturn -1 != this.indexOf( fieldModel );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\r\n\n","/**\r\n * Config file for our app domains.\r\n * \r\n * this.collection represents all of our app domain (fields, actions, settings) information.\r\n *\r\n * This doesn't store the current domain, but rather all the data about each.\r\n * \r\n * This data includes:\r\n * hotkeys\r\n * header view\r\n * subheader view\r\n * content view\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/domainConfig',[\r\n\t// Require our domain collection\r\n\t'models/app/domainCollection',\r\n\t// Require our fields domain files\r\n\t'views/fields/subHeader',\r\n\t'views/fields/mainContentFieldCollection',\r\n\t'views/fields/drawer/settingsTitle',\r\n\t// Require our actions domain files\r\n\t'views/actions/mainHeader', \r\n\t'views/actions/subHeader',\r\n\t'views/actions/mainContent',\r\n\t// Require our settings domain files\r\n\t'views/advanced/mainHeader',\r\n\t'views/advanced/subHeader',\r\n\t'views/advanced/mainContent',\r\n\t// Empty View\r\n\t'views/app/empty',\r\n\t// FieldCollection: used by the default formContentData filter\r\n\t'models/fields/fieldCollection'\r\n\t], \r\n\tfunction( \r\n\t\tappDomainCollection,\r\n\t\tfieldsSubHeaderView,\r\n\t\tFieldsMainContentFieldCollectionView,\r\n\t\tfieldsSettingsTitleView,\r\n\t\tactionsMainHeaderView,\r\n\t\tactionsSubHeaderView,\r\n\t\tactionsMainContentView,\r\n\t\tsettingsMainHeaderView,\r\n\t\tsettingsSubHeaderView,\r\n\t\tsettingsMainContentView,\r\n\t\tEmptyView,\r\n\t\tFieldCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentView filter.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentData filter.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentGutterView filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\r\n\r\n\t\t\t// Define our app domains\r\n\t\t\tthis.collection = new appDomainCollection( [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'fields',\r\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\r\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\r\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\r\n\t\t\t\t\t * Uses two filters:\r\n\t\t\t\t\t * 1) One for our formContentData\r\n\t\t\t\t\t * 2) One for our formContentView\r\n\t\t\t\t\t *\r\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\r\n\t\t\t\t\t * \r\n\t\t\t\t\t * @since  3.0\r\n\t\t\t\t\t * @return formContentView backbone view.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tgetMainContentView: function( collection ) {\r\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\r\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\r\n\t\t\t\t\t\t * \r\n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\r\n\t\t\t\t\t\t *\r\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( ! formContentData ) {\r\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tformContentView = callback();\r\n\r\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\r\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\r\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetGutterLeftView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\r\n\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tgutterView = callback();\r\n\r\n\t\t\t\t\t\treturn new gutterView(); \r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetGutterRightView: function() {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tgutterView = callback();\r\n\r\n\t\t\t\t\t\treturn new gutterView(); \r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'actions',\r\n\t\t\t\t\tnicename: nfi18n.domainActions,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\r\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\r\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new actionsSubHeaderView();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\tgetMainContentView: function() {\r\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'settings',\r\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\r\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new settingsSubHeaderView();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\tgetMainContentView: function() {\r\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\r\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'preview',\r\n\t\t\t\t\tnicename: 'Preview Form',\r\n\t\t\t\t\tclasses: 'preview',\r\n\t\t\t\t\tdashicons: 'dashicons-visibility',\r\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\r\n\t\t\t\t\turl: nfAdmin.previewurl\r\n\t\t\t\t}\r\n\t\t\t] );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message with our domain config collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to get the app domain collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\r\n\t\t},\r\n\r\n\t\tgetDomainCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetDomainModel: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t},\r\n\r\n\t\tdefaultFormContentView: function( formContentData ) {\r\n\t\t\treturn FieldsMainContentFieldCollectionView;\r\n\t\t},\r\n\r\n\t\tdefaultFormContentLoad: function( formContentData ) {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t/*\r\n\t\t\t * If we only have one load filter, we can just return the field collection.\r\n\t\t\t */\r\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\r\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\r\n\r\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\r\n\r\n\t\t\t/*\r\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\r\n\t\t\t */\r\n\r\n        \tvar fieldModels = _.map( formContentData, function( key ) {\r\n        \t\treturn fieldCollection.findWhere( { key: key } );\r\n        \t}, this );\r\n\r\n        \treturn new FieldCollection( fieldModels );\r\n\t\t},\r\n\r\n\t\tdefaultFormContentGutterView: function( formContentData ) {\r\n\t\t\treturn EmptyView;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our app data.\r\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/appModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tloading: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes to our 'clean' attribute.\r\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\r\n\t\t},\r\n\r\n\t\tchangeStatus: function() {\r\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\r\n *\r\n * clean is a boolean that represents whether or not changes have been made.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Get the collection that represents all the parts of our application.\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\t// Setup our initial model.\r\n\t\t\tthis.model = new appModel( {\r\n\t\t\t\tcurrentDrawer: false,\r\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\r\n\t\t\t\tclean: true\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\r\n\t\t\t */\r\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\r\n\t\t\tthis.model.set( 'mobile', mobile );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to see if we are on mobile.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to app channel requests for information about the state of our app.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to app channel requests to update app settings.\r\n\t\t\t */\t\t\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\r\n\r\n\t\t},\r\n\r\n\t\tupdateCurrentDomain: function( model ) {\r\n\t\t\tthis.updateSetting( 'currentDomain', model );\r\n\t\t},\r\n\r\n\t\tupdateSetting: function( setting, value ) {\r\n\t\t\tthis.model.set( setting, value );\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetSetting: function( setting ) {\r\n\t\t\treturn this.model.get( setting );\r\n\t\t},\r\n\r\n\t\tgetData: function() {\r\n\t\t\treturn this.model;\r\n\t\t},\r\n\r\n\t\tgetCurrentDomain: function() {\r\n\t\t\treturn this.model.get( 'currentDomain' );\r\n\t\t},\r\n\r\n\t\tupdateCurrentDrawer: function( drawerID ) {\r\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetCurrentDrawer: function() {\r\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\r\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\r\n\t\t},\r\n\r\n\t\tisMobile: function() {\r\n\t\t\treturn this.model.get( 'mobile' );\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for click events to expand/collapse setting groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for click events on our settings group.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \tgroup setting model\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttoggleSettingGroup: function( e, model ) {\r\n\t\t\tif ( model.get( 'display' ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Make sure that none of our settings have errors\r\n\t\t\t\t */\r\n\t\t\t\tvar errors = false;\r\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\r\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\r\n\t\t\t\t\t\terrors = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tif ( ! errors ) {\r\n\t\t\t\t\tmodel.set( 'display', false );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmodel.set( 'display', true );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Updates our database with our form data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/updateDB',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\r\n\t\t\t// Respond to requests to update the database.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\r\n\t\t\t/*\r\n\t\t\t * Register our default formContent save filter.\r\n\t\t\t * This converts our collection into an array of keys.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update our database.\r\n\t\t * If action isn't specified, assume we're updating the preview.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \taction preview or publish\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateDB: function( action ) {\r\n\t\t\t// If our app is clean, dont' update.\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Default action to preview.\r\n\t\t\taction = action || 'preview';\r\n\r\n\t\t\t// Setup our ajax actions based on the action we're performing\r\n\t\t\tif ( 'preview' == action ) {\r\n\t\t\t\tvar jsAction = 'nf_preview_update';\r\n\t\t\t} else if ( 'publish' == action ) {\r\n\t\t\t\tvar jsAction = 'nf_save_form';\r\n\t\t\t}\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n\t\t\t/*\r\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\r\n\t\t\t * We need to unset those.\r\n\t\t\t * TODO: Make this more dynamic/filterable.\r\n\t\t\t */\r\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\r\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * The main content of our form is called the formContent.\r\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\r\n\t\t\t * If there aren't any filters found, we default to the field collection.\r\n\t\t\t * \r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\r\n\t\t\t/*\r\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\r\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\r\n\t\t\t * \r\n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\r\n\t\t\t *\r\n\t\t\t * TODO: Remove this backwards compatibility eventually.\r\n\t\t\t */\r\n\t\t\tif ( ! formContentData ) {\r\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\r\n\t\t\t}\r\n\r\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t/* \r\n\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t*/\r\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\r\n\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t/*\r\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\r\n\t\t\t */\r\n\t\t\tformContentData = callback( formContentData );\r\n\t\t\t\r\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\r\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Get our form data\r\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n\t\t\t// Turn our formData model into an object\r\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\r\n\t\t\tdata.settings.formContentData = formContentData;\r\n\t\t\t/**\r\n\t\t\t * Prepare fields for submission.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// Get the field IDs that we've deleted.\r\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\r\n\r\n\t\t\t/*\r\n\t\t\t * data.fields is an array of objects like:\r\n\t\t\t * field.label = blah\r\n\t\t\t * field.label_pos = blah\r\n\t\t\t * etc.\r\n\t\t\t *\r\n\t\t\t * And we need that format to be:\r\n\t\t\t * field.settings.label = blah\r\n\t\t\t * field.settings.label_pos = blah\r\n\t\t\t *\r\n\t\t\t * So, we loop through our fields and create a field.settings object.\r\n\t\t\t */\r\n\t\t\t_.each( data.fields, function( field ) {\r\n\t\t\t\tvar id = field.id;\r\n\t\t\t\t// We dont' want to update id or parent_id\r\n\t\t\t\tdelete field.id;\r\n\t\t\t\tdelete field.parent_id;\r\n\t\t\t\tvar settings = {};\r\n\t\t\t\t// Loop through all the attributes of our fields\r\n\t\t\t\tfor (var prop in field) {\r\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\r\n\t\t\t\t    \t// Set our settings.prop value.\r\n\t\t\t\t        settings[ prop ] = field[ prop ];\r\n\t\t\t\t        // Delete the property from the field.\r\n\t\t\t\t        delete field[ prop ];\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( var setting in settings ){\r\n\t\t\t\t\tif( null === settings[ setting ] ) {\r\n\t\t\t\t\t\tdelete settings[setting];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update our field object.\r\n\t\t\t\tfield.settings = settings;\r\n\t\t\t\tfield.id = id;\r\n\t\t\t} );\r\n\r\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\r\n\t\t\tdata.deleted_fields = removedIDs;\r\n\r\n\t\t\t/**\r\n\t\t\t * Prepare actions for submission.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// Get the action IDs that we've deleted.\r\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\r\n\r\n\t\t\t/*\r\n\t\t\t * data.actions is an array of objects like:\r\n\t\t\t * action.label = blah\r\n\t\t\t * action.label_pos = blah\r\n\t\t\t * etc.\r\n\t\t\t *\r\n\t\t\t * And we need that format to be:\r\n\t\t\t * action.settings.label = blah\r\n\t\t\t * action.settings.label_pos = blah\r\n\t\t\t *\r\n\t\t\t * So, we loop through our actions and create a field.settings object.\r\n\t\t\t */\r\n\t\t\t_.each( data.actions, function( action ) {\r\n\t\t\t\tvar id = action.id;\r\n\t\t\t\t// We dont' want to update id or parent_id\r\n\t\t\t\tdelete action.id;\r\n\t\t\t\tdelete action.parent_id;\r\n\t\t\t\tvar settings = {};\r\n\t\t\t\t// Loop through all the attributes of our actions\r\n\t\t\t\tfor (var prop in action) {\r\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\r\n\t\t\t\t    \t// Set our settings.prop value.\r\n\t\t\t\t        settings[ prop ] = action[ prop ];\r\n\t\t\t\t        // Delete the property from the action.\r\n\t\t\t\t        delete action[ prop ];\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t// Update our action object.\r\n\t\t\t\taction.settings = settings;\r\n\t\t\t\taction.id = id;\r\n\t\t\t} );\r\n\r\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\r\n\t\t\tdata.deleted_actions = removedIDs;\r\n\r\n\t\t\t// Turn our object into a JSON string.\r\n\t\t\tdata = JSON.stringify( data );\r\n\t\t\t// Run anything that needs to happen before we update.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\r\n\r\n\t\t\tif ( 'publish' == action ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\r\n\r\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\r\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update\r\n\t\t\tjQuery.post( ajaxurl, { action: jsAction, form: data, security: nfAdmin.ajaxNonce }, function( response ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresponse = JSON.parse( response );\r\n\t\t\t\t\tresponse.action = action;\r\n\t\t\t\t\t// Run anything that needs to happen after we update.\r\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\r\n\t\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\r\n\t\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch( exception ) {\r\n\t\t\t\t\tconsole.log( 'Something went wrong!' );\r\n\t\t\t\t\tconsole.log( exception );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdefaultSaveFilter: function( formContentData ) {\r\n\t\t\treturn formContentData.pluck( 'key' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our form data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/formModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\r\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\r\n\t\t\t} else {\r\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Stores our form data and responds to requests for it.\r\n * Form data stores fields, actions, and settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Instantiate Form Model\r\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\r\n\t\t\t// Set our field collection\r\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\r\n\t\t\t// Set our actions collection\r\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\r\n\t\t\t// Set our settings collection\r\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\r\n\t\t\t// Respond to requests for form data.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return form data model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return backbone.model\r\n\t\t */\r\n\t\tgetFormModel: function() {\r\n\t\t\treturn this.model;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles changing our preview link when we change the 'clean' state of our app.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/previewLink',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for events that would change our preview link\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Disable our preview link before we send data to update our preview.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdisablePreview: function() {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\r\n\t\t\tpreview.set( 'disabled', true );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  boolean \tclean app data state\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangePreviewNicename: function( clean ) {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\r\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\r\n\t\t\tif ( ! clean ) {\r\n\t\t\t\tvar nicename = 'Preview Changes';\r\n\t\t\t} else {\r\n\t\t\t\tvar nicename = 'Preview Form';\r\n\t\t\t}\r\n\r\n\t\t\tpreview.set( 'nicename', nicename );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable our preview button.\r\n\t\t * This is triggered when we get a response from our preview update.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tenablePreview: function() {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\r\n\t\t\tpreview.set( 'disabled', false );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for requests to change the current domain.\r\n *\r\n * The app menu and the main submenu both contain clickable links that change the current domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/menuButtons',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\r\n\t\t},\r\n\r\n\t\tpublish: function() {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\r\n\t\t},\r\n\r\n\t\tviewChanges: function() {\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our change data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/changeModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdisabled: false\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our change models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: domainModel,\r\n\r\n\t\tcomparator: function( model ) {\r\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\r\n\t\t\treturn -id;\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Track settings changes across our app.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new changeCollection();\r\n\t\t\t// Respond to any requests to add a change directly.\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\r\n\t\t\t// Respond to requests for the change collection\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\r\n\t\t},\r\n\r\n\t\tregisterChange: function( action, model, changes, label, data ) {\r\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\r\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\r\n\t\t\t\tlabel.dashicon = 'admin-generic';\r\n\t\t\t}\r\n\t\t\tvar changeModel = new ChangeModel({\r\n\t\t\t\taction: action,\r\n\t\t\t\tmodel: model,\r\n\t\t\t\tchanges: changes,\r\n\t\t\t\tlabel: label,\r\n\t\t\t\tdata: data\t\t\r\n\t\t\t} );\r\n\t\t\tthis.collection.add( changeModel );\r\n\t\t\treturn changeModel;\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tmaybeResetCollection: function( clean ) {\r\n\t\t\tif ( clean ) {\r\n\t\t\t\tthis.collection.reset();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'controllers/app/undoChanges',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\r\n\t\t},\r\n\r\n\t\tundoChanges: function() {\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tchangeCollection.sort();\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( changeCollection.models, function( change ) {\r\n\t\t\t\tthat.undoSingle( change, true );\r\n\t\t\t} );\r\n\t\t\tchangeCollection.reset();\r\n\t\t\t// Update preview.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t},\r\n\r\n\t\tundoSingle: function( change, undoAll ) {\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/publishResponse',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our app channel for the updateDB response.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\r\n\t\t},\r\n\r\n\t\tpublishResponse: function( response ) {\r\n\t\t\t// If we aren't performing a publish action, bail.\r\n\t\t\tif ( 'publish' !== response.action ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Check to see if we have any new ids. \r\n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\r\n\r\n\t\t\t\t// If we have any new fields, update their models with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\r\n\t\t\t\t\t\tif ( field ) {\r\n\t\t\t\t\t\t\tfield.set( 'id', newID );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we have any new actions, update their models with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\r\n\t\t\t\t\t\tif ( action ) {\r\n\t\t\t\t\t\t\taction.set( 'id', newID );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we have a new form id, update the model with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\tformModel.set( 'id', newID );\r\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\r\n\r\n\t\t\t// If we're on mobile, show a notice that we're publishing\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\r\n\t\t\t}\r\n\t\t\t// Add a notice that we've published.\r\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\r\n\r\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t}\r\n\t\t\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for requests to change the current domain.\r\n *\r\n * The app menu and the main submenu both contain clickable links that change the current domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeDomain',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for both menu and submenu clicks.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\r\n\t\t\t// Reply to specific requests to change the domain\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\r\n\r\n\t\t\t// Reply to requests to prevent our drawer from closing\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\r\n\t\t\t// Reply to requests to enable drawer closing\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Object that holds our array of 'prevent change' values.\r\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\r\n\t\t\t */\r\n\t\t\tthis.objPreventChange = {};\r\n\t\t},\r\n\r\n\t\tchangeAppDomain: function( e, model ) {\r\n\t\t\t/*\r\n\t\t\t * If we have disabled movement between domains, return false.\r\n\t\t\t */\r\n\t\t\tif ( this.maybePreventChange() ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * If we are passed a model, use that model.\r\n\t\t\t * Otherwise, get the domain from the event target data.\r\n\t\t\t */ \r\n\t\t\tif ( 'undefined' == typeof model ) {\r\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\r\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\r\n\t\t\t}\r\n\t\t\t// If a drawer is open, close it.\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\r\n\t\t\t * and trigger a radio message saying we've changed the domain.\r\n\t\t\t */ \r\n\t\t\tif ( 0 == model.get( 'url' ).length ) {\r\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\r\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n         * Check to see if anything has registered a key to prevent changing the domain.\r\n         * \r\n         * @since  3.0\r\n         * @return boolean\r\n         */\r\n        maybePreventChange: function() {\r\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\r\n        \t\treturn false;\r\n        \t} else {\r\n        \t\treturn true;\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Register a key to prevent changing the domain.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\r\n         * @return void\r\n         */\r\n        preventChange: function( key ) {\r\n        \tthis.objPreventChange[ key ] = true;\r\n        },\r\n\r\n        /**\r\n         * Remove a previously registered key that is preventing our domain from changing.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\r\n         * @return void\r\n         */\r\n        enableChange: function( key ) {\r\n        \tdelete this.objPreventChange[ key ];\r\n        },\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Modify the user's browser history when they click on a domain\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/pushstate',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\r\n\t\t},\r\n\r\n\t\tchangePushState: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\r\n\t\t\tvar reExp = /domain=\\\\d+/;\r\n\t\t\tvar url = window.location.toString();\r\n\t\t\tvar newUrl = url.replace( reExp, '' );\r\n\t\t\tconsole.log( newUrl );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\r\n * \r\n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\r\n * \r\n * Currently too much hotkey data is hard-coded here.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/hotkeys',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\r\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\r\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\r\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\r\n\t\t},\r\n\r\n\t\tchangeHotkeys: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\r\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\r\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\r\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\r\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddNewField: function() {\r\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\taddNewAction: function() {\r\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeDomainFields: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\r\n\t\t},\r\n\r\n\t\tchangeDomainActions: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\r\n\t\t},\r\n\r\n\t\tchangeDomainSettings: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\r\n\t\t},\r\n\r\n\t\tcloseDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Change the clean state of our app when settings are changed.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cleanState',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Set an array of field model attributes to ignore.\r\n\t\t\t * This list will be filtered just before we ignore anything.\r\n\t\t\t */ \r\n\t\t\tthis.ignoreAttributes = [\r\n\t\t\t\t'editActive'\r\n\t\t\t];\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\r\n\t\t},\r\n\r\n\t\tsetAppClean: function( model ) {\r\n\t\t\tfor( var attr in model.changedAttributes() ) {\r\n\t\t\t\tvar changedAttr = attr;\r\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\r\n\t\t\t}\r\n\r\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\r\n\t\t\t\r\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/coreUndo',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo settings that have been changed.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoChangeSetting: function( change, undoAll ) {\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar changes = change.get( 'changes' );\r\n\t\t\tvar attr = changes.attr;\r\n\t\t\tvar before = changes.before;\r\n\t\t\tfieldModel.set( attr, before );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo adding a field or an action.\r\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoAddObject: function( change, undoAll ) {\r\n\t\t\tvar objectModel = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\r\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\r\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\r\n\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( model );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcollection.remove( objectModel );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\t\t\r\n\r\n\t\t/**\r\n\t\t * Undo adding a field or an action.\r\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoDuplicateObject: function( change, undoAll ) {\r\n\t\t\tvar objectModel = change.get( 'model' );\r\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( model );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tobjectCollection.remove( objectModel );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo removing a field or an action.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoRemoveObject: function( change, undoAll ) {\r\n\t\t\tvar dataModel = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\r\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\r\n\r\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\r\n\t\t\t\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tmodel.set( 'disabled', false );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\r\n\t\t\tcollection.trigger( 'reset', collection );\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo field sorting.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoSortFields: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar fields = data.fields;\r\n\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields, function( changeModel ) {\r\n\t\t\t\tvar before = changeModel.before;\r\n\t\t\t\tvar fieldModel = changeModel.model;\r\n\t\t\t\tfieldModel.set( 'order', before );\r\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\r\n\t\t\t} );\r\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\r\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\r\n\r\n\r\n\t\t\tfieldCollection.sort();\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoAddListOption: function( change, undoAll ) {\r\n\t\t\tvar model = change.get( 'model' );\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\t\tif ( changeModel !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tmodel.collection.remove( model );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoRemoveListOption: function( change, undoAll ) {\r\n\t\t\tvar model = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\t\t\tcollection.add( model );\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tmodel.set( 'disabled', false );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoSortListOptions: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar collection = data.collection;\r\n\t\t\t\r\n\t\t\tvar objModels = data.objModels;\r\n\r\n\t\t\t_.each( objModels, function( changeModel ) {\r\n\t\t\t\tvar before = changeModel.before;\r\n\t\t\t\tvar optionModel = changeModel.model;\r\n\t\t\t\toptionModel.set( 'order', before );\r\n\t\t\t} );\t\t\t\t\r\n\r\n\r\n\t\t\tcollection.sort();\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\r\n\t\t * @return void\r\n\t\t */\r\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\r\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\t// Update preview.\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tchangeCollection.remove( change );\r\n\t\t\t\tif ( 0 == changeCollection.length ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cloneModelDeep',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\r\n\t\t},\r\n\r\n\t\tcloneModelDeep: function( model ) {\r\n\t\t\t// Temporary value used to store any new collections.\r\n\t\t\tvar replace = {};\r\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\r\n\t\t\t_.each( model.attributes, function( val, key ) {\r\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\r\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\r\n\t\t\t\t\treplace[ key ] = clonedCollection;\r\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\r\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\t// Clone our original model\r\n\t\t\tvar newModel = model.clone();\r\n\t\t\t// Overwrite any collections we created above.\r\n\t\t\t_.each( replace, function( val, key ) {\r\n\t\t\t\tnewModel.set( key, val );\r\n\t\t\t} );\r\n\r\n\t\t\treturn newModel;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns the appropriate child view for our settings drawer.\r\n *\r\n * This enables settings types to register custom childviews for their settings.\r\n * The option-repeater setting for the list field is an example.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App - Edit Settings Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for field settings child views.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return the appropriate child setting view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model\tmodel \tField setting\r\n\t\t * @return backbone.view\r\n\t\t */\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\t// Get our setting type.\r\n\t\t\tvar type = model.get( 'type' );\r\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\r\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\r\n\t\t\t\r\n\t\t\treturn settingChildView\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Updates our model when the user changes a setting.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeSettingDefault',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to update settings.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\r\n\r\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change our setting, update the model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te                event\r\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\r\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\r\n\t\t\tvar name = settingModel.get( 'name' );\r\n\t\t\tvar before = dataModel.get( name );\r\n\t\t\tvar value = value || null;\r\n\t\t\tif ( ! value ) {\r\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\r\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\r\n\t\t\t}\r\n\r\n\t\t\tif( 'undefined' == typeof value ){\r\n\t\t\t    value = jQuery( e.target ).val();\r\n            }\r\n\t\t\t\r\n\t\t\t// Update our field model with the new setting value.\r\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\r\n\t\t\tnfRadio.channel( 'setting-' + name ).trigger( 'after:updateSetting', dataModel, settingModel );\r\n\t\t\t// Register our setting change with our change tracker\r\n\t\t\tvar after = value;\r\n\t\t\t\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\r\n\t\tchildView: itemSettingView,\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.collection = this.model.get( 'settings' );\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.model.on( 'rerender', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\t    \t\trenderSetting: function(){\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderError: function() {\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\treturn this.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our setting.\r\n *\r\n * When the model is created, we trigger the init event in two radio channels.\r\n *\r\n * This lets specific types of settings modify the model before anything uses it.\r\n *\r\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tsettings: false,\r\n\t\t\thide_merge_tags: false,\r\n\t\t\terror: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Send out two messages saying that we've initialized a setting model.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\r\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\r\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\r\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\r\n\t\t\t * If we're using merge tags in this setting\r\n\t\t\t */\r\n\r\n\t\t\tif( 'undefined' == typeof this.collection ) return;\r\n\r\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\r\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\r\n\t\t * We want to send the message on the objectType channel.\r\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateKey: function( keyModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\r\n\t\t},\r\n\r\n\t\tmaybePreventUI: function() {\r\n\t\t\tif ( this.get( 'error' ) ) {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collections of settings for each field type.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: settingModel,\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\tthis.options = options || {};\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Handles actions related to field settings that use a fieldset\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t\t// When a list type field is initialized, create an option collection.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\r\n\t\t},\r\n\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\treturn fieldsetView;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Instantiate settings collection when a fieldset type is initialized.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcreateSettingsCollection: function( model ) {\r\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\r\n\t\t},\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to our toggle field.\r\n * When we change the toggle, the setting value will be 'on' or ''.\r\n * We need to change this to 1 or 0.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/toggleSetting',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\r\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\r\n\r\n\t\t\t// Respond to requests for field setting filtering.\r\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return either 1 or 0, depending upon the toggle position.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te                event\r\n\t\t * @param  backbone.model \tfieldModel       field model\r\n\t\t * @param  string \t\t\tname             setting name\r\n\t\t * @param  backbone.model \tsettingTypeModel field type model\r\n\t\t * @return int              1 or 0\r\n\t\t */\r\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\r\n\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\r\n\t\t\t\tvar value = 1;\r\n\t\t\t} else {\r\n\t\t\t\tvar value = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for clicks on our action item action buttons.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Main Sortable\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/itemControls',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.clickDelete );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\r\n\r\n\t\t\t// Listen for our drawer close and remove our active edit state\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Open a drawer with our action model for editing settings.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickEdit: function( e, model ) {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\tvar type = nfRadio.channel( currentDomainID ).request( 'get:type' , model.get( 'type' ) );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: type.get( 'settingGroups' ) } );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a action model from our collection\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickDelete: function( e, dataModel ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\r\n\r\n\t\t\t// Add our action deletion to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Removed',\r\n\t\t\t\tdashicon: 'dismiss'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: dataModel.collection\r\n\t\t\t};\r\n\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\r\n\r\n\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\r\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\r\n\t\t\t\t\t\tif ( field.model == dataModel ) {\r\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tchangeModel.set( 'data', data );\r\n\t\t\t\tchangeModel.set( 'model', newModel );\r\n\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t} );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickDuplicate: function( e, model ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\r\n\t\t\t// Change our label.\r\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy' );\r\n\t\t\t// Update our ID to the new tmp id.\r\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\r\n\t\t\tnewModel.set( 'id', tmpID );\r\n\t\t\t// Add new model.\r\n\t\t\t// Params are: model, silent, renderTrigger, action\r\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\r\n\t\t\t\r\n\t\t\t// Add our action addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: model.get( 'objectType' ),\r\n\t\t\t\tlabel: model.get( 'label' ),\r\n\t\t\t\tchange: 'Duplicated',\r\n\t\t\t\tdashicon: 'admin-page'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tmodel.trigger( 'change:label', model );\r\n\r\n\t\t\t// Update preview.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Config file for our merge tags.\r\n *\r\n * this.collection represents all of our registered merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/mergeTags',[\r\n\t'models/app/mergeTagCollection'\r\n\t], function(\r\n\tmergeTagCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( mergeTags, function( tagSection ) {\r\n\t\t\t\tif ( tagSection.tags ) {\r\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar tags = '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthat.tagSectionCollection.add( {\r\n\t\t\t\t\tid: tagSection.id,\r\n\t\t\t\t\tlabel: tagSection.label,\r\n\t\t\t\t\ttags: tags,\r\n\t\t\t\t\tdefault_group: tagSection.default_group\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\r\n\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\t// TODO: Make this dynamic\r\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\r\n\t\t\t\t\tfieldTags.add( {\r\n\t\t\t\t\t\tid: field.get( 'id' ),\r\n\t\t\t\t\t\tlabel: field.get( 'label' ),\r\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\r\n\t\t\t\t\t} );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tvar calcTags = new mergeTagCollection();\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\r\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\r\n\t\t\t\tcalcTags.add( {\r\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\r\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\r\n\r\n\t\t\tthis.currentElement = {};\r\n\t\t\tthis.settingModel = {};\r\n\t\t\tthis.open = false;\r\n\r\n\t\t\t// Unhook jBox Merge Tag stuff.\r\n\t\t\t// nfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\r\n\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\r\n\r\n\t\t\t// Listen for requests for our mergeTag collection.\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\r\n\r\n\t\t\t// When we edit a key, check for places that key might be used.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\r\n\r\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\r\n\r\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Hotkey support for adding tags.\r\n\t\t\t *\r\n\t\t\t\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Init merge tags within the passed view.\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.view view to be searched for merge tags.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tinitMergeTags: function( view ) {\r\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * Apply merge tags jQuery plugin.\r\n\t\t\t *\r\n\t\t\t * Prevent jBox from being called multiple times on the same element\r\n\t\t\t */\r\n\t\t\tthis.jBoxes = {};\r\n\t\t\tvar that = this;\r\n\r\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\r\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\r\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\r\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\r\n\t\t\t\t\t\ttrigger: 'click',\r\n\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\tx: 'center',\r\n\t\t\t\t\t\t\ty: 'bottom'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcloseOnClick: 'body',\r\n\t\t\t\t\t\tcloseOnEsc: true,\r\n\t\t\t\t\t\ttheme: 'TooltipBorder',\r\n\t\t\t\t\t\tmaxHeight: 200,\r\n\r\n\t\t\t\t\t\tonOpen: function() {\r\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\r\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\r\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\r\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\r\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\r\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\r\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonClose: function() {\r\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t    });\r\n\t\t},\r\n\r\n\t\tclickMergeTag: function( e, tagModel ) {\r\n\t\t\t/*\r\n\t\t\t * TODO: Make this more dynamic.\r\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\r\n\t\t\t * but another type of setting might need to do this in the future.\r\n\t\t\t */\r\n\r\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\r\n\r\n\t\t\t\tconsole.log( tagModel );\r\n\r\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\r\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\r\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\r\n\r\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\r\n\r\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\r\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\r\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\r\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\r\n\t\t\t} else {\r\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\r\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\r\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\r\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\r\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddFieldTags: function( fieldModel ) {\r\n\t\t\t// TODO: Make this dynamic\r\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\r\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\r\n\t\t\t\t\tid: fieldModel.get( 'id' ),\r\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\r\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdeleteFieldTags: function( fieldModel ) {\r\n\t\t\tvar fieldID = fieldModel.get( 'id' );\r\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\r\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\r\n\t\t},\r\n\r\n\t\tupdateCalcTags: function( optionModel ) {\r\n\t\t\tvar calcTags = new mergeTagCollection();\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\r\n\r\n\t\t\t_.each( calcCollection.models, function( calc ) {\r\n\t\t\t\tcalcTags.add( {\r\n\t\t\t\t\tlabel: calc.get( 'name' ),\r\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\r\n\t\t},\r\n\r\n\t\topenMergeTags: function( e ) {\r\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\r\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\treturnMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\r\n\t\t\t\tif ( currentModel ) {\r\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.changeActiveTag( 'up' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdownMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.changeActiveTag( 'down' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeActiveTag: function( dir ) {\r\n\t\t\tif ( 'down' == dir ) {\r\n\t\t\t\tvar inc = 1;\r\n\t\t\t} else {\r\n\t\t\t\tvar inc = -1\r\n\t\t\t}\r\n\t\t\t// First, check to see if a field is currently active.\r\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\r\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\r\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\r\n\t\t\t\tcurrentModel.set( 'active', false );\r\n\r\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\r\n\t\t\t\tif ( nextModel ) {\r\n\t\t\t\t\tnextModel.set( 'active', true );\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\r\n\t\t\t\tconsole.log( 'system' );\r\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\r\n\t\t\t\tconsole.log( 'userinfo' );\r\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\r\n\t\t\t\t// Make sure that we have fields\r\n\t\t\t\tif ( 0 < this.fields.models.length ) {\r\n\t\t\t\t\t// Set our first field to active.\r\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Set our first system model to active.\r\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateCurrentElement: function( element ) {\r\n\t\t\tthis.currentElement = element;\r\n\t\t},\r\n\r\n\t\tupdateCurrentSetting: function( settingModel ) {\r\n\t\t\tthis.settingModel = settingModel;\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.tagSectionCollection;\r\n\t\t},\r\n\r\n\t\tgetSectionModel: function( id ) {\r\n\t\t\treturn this.tagSectionCollection.get( id );\r\n\t\t},\r\n\r\n\t\tupdateOpen: function( open ) {\r\n\t\t\tthis.open = open;\r\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\r\n\t\t\t\tmodel.set( 'active', false );\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tupdateKey: function( fieldModel ) {\r\n\t\t\tvar newKey = fieldModel.get( 'key' );\r\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\r\n\t\t\tif ( 'undefined' != typeof oldTag ) {\r\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetFieldKeyFormat: function( key ) {\r\n\t\t\treturn '{field:' + key + '}';\r\n\t\t},\r\n\r\n\t\tgetFieldKeyFormatCalc: function( key ) {\r\n\t\t\treturn '{field:' + key + ':calc}';\r\n\t\t},\r\n\r\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\r\n\t\t\tvar oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\r\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\r\n\t\t\tvar settingName = settingModel.get( 'name' );\r\n\t\t\tvar oldVal = dataModel.get( settingName );\r\n\t\t\tif ( 'string' == typeof oldVal ) {\r\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\r\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\r\n\t\t\t\tdataModel.set( settingName, newVal );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagLookupCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\r\n    var collection = Backbone.Collection.extend( {\r\n        model: mergeTagModel\r\n    } );\r\n    return collection;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTag',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        tagName: 'li',\r\n        template: '#tmpl-nf-merge-tag-box-tag',\r\n\r\n        events: {\r\n            \"click\": \"insertTag\"\r\n        },\r\n\r\n        insertTag: function() {\r\n            nfRadio.channel( 'mergeTags' ).request( 'insert:tag', this.model.get( 'tag' ) );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagList',[ 'views/app/drawer/mergeTag' ], function( mergeTagView ) {\r\n    var view = Marionette.CollectionView.extend({\r\n        tagName: 'ul',\r\n        childView: mergeTagView,\r\n\r\n        initialize: function() {\r\n            nfRadio.channel( 'merge-tags' ).reply( 'update:taglist', this.sectionFilter, this );\r\n            nfRadio.channel( 'merge-tags' ).reply( 'filtersearch', this.searchFilter, this );\r\n        },\r\n\r\n        filter: function( child, index, collection ){\r\n            return 'fields' == child.get( 'section' );\r\n        },\r\n\r\n        sectionFilter: function( section ){\r\n            this.filter = function( child, index, collection ){\r\n                return section == child.get( 'section' );\r\n            }\r\n            this.render();\r\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\r\n        },\r\n\r\n        searchFilter: function( term ){\r\n            this.filter = function( child, index, collection ){\r\n                var label = child.get( 'label' ).toLowerCase().indexOf( term.toLowerCase().replace( ':', '' ) ) >= 0;\r\n                var tag   = child.get( 'tag' ).toLowerCase().indexOf( term.toLowerCase() ) >= 0;\r\n                return label || tag;\r\n            }\r\n            this.render();\r\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\r\n\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagGroup',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        tagName: 'li',\r\n        template: '#tmpl-nf-merge-tag-box-section',\r\n        events: {\r\n            \"click\": \"onClick\"\r\n        },\r\n\r\n        initialize: function () {\r\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'after:filtersearch', this.removeActive );\r\n        },\r\n\r\n        onClick: function(){\r\n          this.updateTags();\r\n          this.setActive();\r\n        },\r\n\r\n        updateTags: function() {\r\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', this.model.get( 'id' ) );\r\n        },\r\n\r\n        setActive: function(){\r\n            this.$el.addClass( 'active' );\r\n            this.$el.siblings().removeClass( 'active' );\r\n        },\r\n\r\n        removeActive: function(){\r\n            this.$el.removeClass( 'active' );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagGroupList',[ 'views/app/drawer/mergeTagGroup' ], function( mergeTagGroupView ) {\r\n    var view = Marionette.CollectionView.extend({\r\n        tagName: 'ul',\r\n        childView: mergeTagGroupView,\r\n\r\n        initialize: function(){\r\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'open', this.render, this );\r\n        },\r\n\r\n        // TODO: Update filter when a new tag is added. ie Calculations.\r\n        filter: function( child, index, collection ){\r\n            return 0 < child.get( 'tags' ).length;\r\n        },\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagFilter',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        template: '#tmpl-nf-merge-tag-box-filter',\r\n        events: {\r\n            \"keyup input\": \"updateFilter\",\r\n        },\r\n        updateFilter: function( event ) {\r\n\r\n            if( /* ENTER */ 13 == event.keyCode ){ // Copied from Keyup Callback.\r\n                // Get top listed merge tag.\r\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\r\n\r\n                // COPIED FROM BELOW\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                return;\r\n            }\r\n            var value = this.$el.find( 'input' ).val();\r\n            nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagBox',[], function() {\r\n    var view = Marionette.LayoutView.extend({\r\n        el: '#merge-tags-box',\r\n        template: \"#tmpl-nf-merge-tag-box\",\r\n\r\n        regions: {\r\n            filter:   '.merge-tag-filter',\r\n            sections: '.merge-tag-sections',\r\n            tags:     '.merge-tag-list'\r\n        },\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage Merge Tag Box\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1\r\n */\r\n\r\ndefine( 'controllers/app/mergeTagBox',[\r\n    'models/app/mergeTagModel',\r\n    'models/app/mergeTagLookupCollection',\r\n    'views/app/drawer/mergeTag',\r\n    'views/app/drawer/mergeTagList',\r\n    'views/app/drawer/mergeTagGroup',\r\n    'views/app/drawer/mergeTagGroupList',\r\n    'views/app/drawer/mergeTagFilter',\r\n    'views/app/drawer/mergeTagBox'\r\n], function(\r\n    MergeTagModel,\r\n    MergeTagLookupCollection,\r\n    MergeTagView,\r\n    MergeTagListView,\r\n    MergeTagGroupView,\r\n    MergeTagGroupListView,\r\n    MergeTagFilterView,\r\n    MergeTagBoxLayout\r\n) {\r\n    var controller = Marionette.Object.extend( {\r\n\r\n        caret: 0, // Track the caret position of the current setting's input.\r\n        old: '', // THe old merge tag that will be replaced.\r\n\r\n        initialize: function(){\r\n\r\n            this.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterAppStart );\r\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\r\n                jQuery( '.merge-tags' ).on( 'click', function( e ){\r\n                    var $this = jQuery( this );\r\n                    if( $this.siblings().hasClass( 'merge-tag-focus' ) ){\r\n                        jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                        jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                        jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                        return;\r\n                    }\r\n                    var text = $this.closest( '.nf-setting' ).find( '.setting' ).val();\r\n                    if( undefined != text ) {\r\n                        $this.closest( '.nf-setting' ).find( '.setting' ).val( text + '{' ).change();\r\n                        nfRadio.channel('mergeTags').request('set:caret', text.length + 1 );\r\n                    } else {\r\n                        $this.closest( '.nf-setting' ).find( '.setting' ).val( '{' ).change();\r\n                        nfRadio.channel('mergeTags').request('set:caret', 1 );\r\n                    }\r\n\r\n                    nfRadio.channel('mergeTags').request('set:old', '{' );\r\n\r\n                    // $this.closest( '.nf-setting' ).find( '.setting' ).focus(); //.addClass( 'merge-tag-focus' );\r\n                    $this.closest( '.nf-setting' ).find( '.setting' ).addClass( 'merge-tag-focus' ); //.addClass( 'merge-tag-focus' );\r\n\r\n                    // Disable browser autocomplete.\r\n                    var autocomplete = $this.attr( 'autocomplete' );\r\n                    $this.attr( 'autocomplete', 'off' );\r\n                    $this.data( 'autocomplete', autocomplete );\r\n\r\n                    var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\r\n                    if( 0 != $overlayElement.find( '.note-editor' ).length ){\r\n                        $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\r\n                    } else {\r\n                        $overlayElement.addClass('merge-tag-focus-overlay');\r\n                    }\r\n\r\n                    jQuery( '#merge-tags-box' ).css( 'display', 'block' );\r\n                    setTimeout(function(){\r\n                        jQuery( '#merge-tags-box' ).find( '.merge-tag-filter' ).find( 'input' ).focus();\r\n                    }, 500 );\r\n                });\r\n            } );\r\n\r\n            var that = this;\r\n            nfRadio.channel( 'mergeTags' ).reply( 'set:caret', function( position ){\r\n               that.caret = position;\r\n            });\r\n            nfRadio.channel( 'mergeTags' ).reply( 'get:caret', function(){\r\n                return that.caret;\r\n            });\r\n\r\n            var that = this;\r\n            nfRadio.channel( 'mergeTags' ).reply( 'set:old', function( value ){\r\n                that.old = value;\r\n            });\r\n            nfRadio.channel( 'mergeTags' ).reply( 'get:old', function(){\r\n                return that.old;\r\n            });\r\n\r\n            nfRadio.channel( 'mergeTags' ).reply( 'insert:tag', this.insertTag.bind( this ) );\r\n            \r\n            /* CALCULATIONS */\r\n            this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', this.renderSetting );\r\n\r\n            /* SUMMERNOTE */\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'focus', function( e, selector ) {\r\n                that.focusCallback( false, selector );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keydown', function( e, selector ){\r\n                jQuery( selector ).closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keyup', function( e, selector ){\r\n                that.keyupCallback( e, selector );\r\n            } );\r\n        },\r\n\r\n        afterAppStart: function() {\r\n            var mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n            var mergeTags = [];\r\n            mergeTagCollection.each( function( section ){\r\n                section.get( 'tags' ).each( function( tag ){\r\n                    mergeTags.push({\r\n                        label: tag.get( 'label' ),\r\n                        tag:   tag.get( 'tag' ),\r\n                        section: section.get( 'id' )\r\n                    });\r\n                });\r\n            });\r\n            var layout = new MergeTagBoxLayout();\r\n            layout.render();\r\n            var tagCollection = new MergeTagLookupCollection( mergeTags );\r\n            var mergeTagListView = new MergeTagListView({\r\n                collection: tagCollection\r\n            });\r\n            var mergeTagGroupListView = new MergeTagGroupListView({\r\n                collection: mergeTagCollection\r\n            });\r\n\r\n            layout.getRegion('tags').show(mergeTagListView);\r\n            layout.getRegion('sections').show(mergeTagGroupListView);\r\n            layout.getRegion('filter').show(new MergeTagFilterView);\r\n\r\n            var that = this;\r\n            this.listenTo( nfRadio.channel( 'mergeTags' ), 'open', function(){\r\n                // layout.destroy();\r\n                that.afterAppStart();\r\n            });\r\n        },\r\n\r\n        beforeRenderSetting: function( settingModel, dataModel ){\r\n            if( 'undefined' == typeof settingModel.get( 'use_merge_tags' ) ) return;\r\n            if( ! settingModel.get( 'use_merge_tags' ) ) return;\r\n            var name = settingModel.get( 'name' );\r\n            this.listenTo( nfRadio.channel( 'setting-' + name ), 'render:setting', this.renderSetting );\r\n        },\r\n\r\n        renderSetting: function( settingModel, dataModel, view ){\r\n\r\n            if( 0 == jQuery( '#merge-tags-box' ).length ) this.afterAppStart();\r\n\r\n            // Track Scrolling.\r\n            jQuery( '#nf-drawer' ).on( 'scroll', function(){\r\n               // COPIED AND MODIFIED FROM FOCUS\r\n                if( 0 == jQuery( '.merge-tag-focus' ).length ) return;\r\n\r\n                var rteEditor = jQuery( '.merge-tag-focus' ).closest( '.nf-setting' ).find( '.note-editor' );\r\n                if( 0 != rteEditor.length ){\r\n                    var posY = rteEditor.offset().top - jQuery(window).scrollTop();\r\n                    var height = rteEditor.outerHeight();\r\n                } else {\r\n                    var posY = jQuery('.merge-tag-focus').offset().top - jQuery(window).scrollTop();\r\n                    var height = jQuery('.merge-tag-focus').outerHeight();\r\n                }\r\n                jQuery( '#merge-tags-box' ).css( 'top', posY + height );\r\n\r\n                var repeaterRow = jQuery( '.merge-tag-focus' ).closest( '.nf-list-options-tbody' );\r\n                if( 0 != repeaterRow.length ){\r\n                    var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\r\n                    jQuery( '#merge-tags-box' ).css( 'left', left );\r\n                } else {\r\n                    var posX = jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\r\n                    jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                    jQuery( '#merge-tags-box' ).css( 'width', jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).width() );\r\n                }\r\n            });\r\n\r\n            // On input focus, move the Merge Tag Box into position.\r\n            jQuery( view.el ).find( '.setting' ).on( 'focus', this.focusCallback );\r\n\r\n            // TODO: Maybe move to view events.\r\n            // On input keyup, maybe show Merge Tag Box.\r\n            jQuery( view.el ).find( '.setting' ).on( 'keyup', this.keyupCallback );\r\n        },\r\n\r\n        // TODO: Maybe move to view class.\r\n        beforeDrawerClose: function(){\r\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n            // jQuery( 'body' ).append( jQuery( '#merge-tags-box' ) );\r\n            nfRadio.channel( 'mergeTags' ).trigger( 'open' );\r\n        },\r\n\r\n        insertTag: function( tag ) {\r\n\r\n            var $input = jQuery( '.merge-tag-focus' );\r\n\r\n            if( 0 != $input.closest( '.nf-setting' ).first().find( '.note-editable' ).length ){\r\n                $input = $input.closest( '.nf-setting' ).first().find( '.note-editable' );\r\n            }\r\n\r\n            if( 1 < $input.length ){ $input = $input.first(); }\r\n\r\n            if( $input.hasClass( 'note-editable' ) ){\r\n                var str = $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code' );\r\n            } else {\r\n                var str = $input.val();\r\n            }\r\n\r\n            var find = nfRadio.channel( 'mergeTags' ).request( 'get:old' );\r\n            var replace = tag;\r\n            var caretPos = nfRadio.channel( 'mergeTags' ).request( 'get:caret' );\r\n\r\n            var patt = /{([a-z0-9]|:|_|})*/g;\r\n\r\n            // Loop through matches to find insert/replace index range.\r\n            // Reference: http://codepen.io/kjohnson/pen/36c3a782644dfff40fe3c1f05f8739d9?editors=0012\r\n            while (match = patt.exec(str)) {\r\n                if (find != match[0]) continue; // This isn't the match you are looking for...\r\n                var string = str.slice(0, match.index) + replace + str.slice(patt.lastIndex); // Fancy replace for the specifc match, using the index/position.\r\n\r\n                if( $input.hasClass( 'note-editable' ) ){\r\n                    $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code', string );\r\n\r\n                    // Reposition the caret. http://stackoverflow.com/a/6249440 TODO: Determine the appropriate childNode.\r\n                    var el = $input;\r\n                    var childNode = null; // Default to first childNode.\r\n                    _.each( el[0].childNodes, function( node, index ){\r\n                        if( childNode ) return;\r\n                        if( ! node.nodeValue && ! node.innerHTML ) return;\r\n                        if( node.nodeValue ) {\r\n                            var position = node.nodeValue.indexOf(replace) + find.length;\r\n                        } else if( node.innerHTML ){\r\n                            var position = node.innerHTML.indexOf(replace) + find.length;\r\n                        }\r\n                        if( caretPos == position ) childNode = el[0].childNodes[index];\r\n                    });\r\n                    if( ! childNode ) childNode = el[0].childNodes[0];\r\n                    var offset = caretPos - find.length + replace.length;\r\n                    var range = document.createRange();\r\n                    var sel = window.getSelection();\r\n                    if( 0 != childNode.childNodes.length ) {\r\n                        range.setStart(childNode.childNodes[0], offset);\r\n                    } else {\r\n                        range.setStart(childNode, offset);\r\n                    }\r\n                    range.collapse(true);\r\n                    sel.removeAllRanges();\r\n                    sel.addRange(range);\r\n\r\n\r\n                } else {\r\n                    $input.val(string); // Update input value with parsed string.\r\n                    $input.change(); // Trigger a change event after inserting the merge tag so that it saves to the model.\r\n                    $input.caret(caretPos - find.length + replace.length); // Update Carept Position.\r\n                }\r\n\r\n            }\r\n\r\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n            $input.removeClass( 'merge-tag-focus' );\r\n            $input.closest( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n        },\r\n\r\n        focusCallback: function( e, target ){\r\n\r\n            jQuery( '.merge-tag-focus' ).each(function(index, el){\r\n                if( this == el ) return;\r\n                el.removeClass( 'merge-tag-focus' );\r\n            });\r\n\r\n            if( 'undefined' != typeof target ) {\r\n                var posY = jQuery( target ).closest( '.nf-setting' ).find( '.note-editor' ).offset().top - jQuery(window).scrollTop();\r\n                var height = jQuery( target ).closest( '.nf-setting' ).find( '.note-editor' ).outerHeight();\r\n            } else {\r\n                var posY = jQuery(this).offset().top - jQuery(window).scrollTop();\r\n                var height = jQuery(this).outerHeight();\r\n            }\r\n            jQuery( '#merge-tags-box' ).css( 'top', posY + height );\r\n\r\n            var repeaterRow = jQuery( this ).closest( '.nf-list-options-tbody' );\r\n            if( 0 != repeaterRow.length ) {\r\n                var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', left );\r\n            } else if( 'undefined' != typeof target ) {\r\n                var posX = jQuery( target ).closest( '.nf-setting' ).find( '.note-editor' ).offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                jQuery( '#merge-tags-box' ).css( 'width', jQuery( target ).closest( '.nf-setting' ).find( '.note-editor' ).width() );\r\n            }\r\n            else\r\n            {\r\n                var posX = jQuery( this ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                jQuery( '#merge-tags-box' ).css( 'width', jQuery( this ).closest( '.nf-settings' ).width() );\r\n            }\r\n\r\n            var dataID = jQuery( this ).data( 'id' );\r\n            if( dataID && 'eq' != dataID ) return;\r\n\r\n            // var offset = jQuery( view.el ).find( '.setting' ).parent().outerHeight();\r\n            // jQuery( view.el ).find( '.setting' ).parent().append( jQuery( '#merge-tags-box' ) );\r\n            // jQuery( '#merge-tags-box' ).css( 'top', offset );\r\n        },\r\n\r\n        keyupCallback: function( event, target ){\r\n\r\n            if( /* ENTER */ 13 == event.keyCode ){\r\n\r\n                // Get top listed merge tag.\r\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\r\n\r\n                // COPIED FROM BELOW\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n\r\n                return;\r\n            }\r\n\r\n            // Get the value.\r\n            // var value = jQuery( summernote ).summernote( 'code' );\r\n            // Update the value.\r\n            // jQuery( summernote ).closest( '.nf-setting' ).find( '.note-editable' ).html( value );\r\n\r\n            if( 'undefined' != typeof target ) {\r\n                var $this = jQuery(target);\r\n            } else {\r\n                var $this = jQuery( this );\r\n            }\r\n\r\n            // TODO: Disable Browser Autocomplete\r\n            // $this.attr()\r\n\r\n\r\n            var dataID = jQuery( this ).data( 'id' );\r\n            if( dataID && 'eq' != dataID ) return;\r\n\r\n            // Store the current caret position.\r\n            if( 'undefined' != typeof target ){\r\n                var range = $this.summernote('createRange');\r\n                if( range ) {\r\n                    var caretPos = range.so; // or .eo?\r\n                } else {\r\n                    var caretPos = 0;\r\n                }\r\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\r\n            } else {\r\n                var caretPos = $this.caret();\r\n            }\r\n            nfRadio.channel( 'mergeTags' ).request( 'set:caret', caretPos );\r\n\r\n            // Find merge tags.\r\n            if( 'undefined' == typeof target ) {\r\n                var mergetags = $this.val().match(new RegExp(/{([a-z0-9]|:|_|})*/g));\r\n            } else {\r\n                var mergetags = $this.summernote( 'code' ).match(new RegExp(/{([a-z0-9]|:|_|})*/g));\r\n            }\r\n\r\n            // Filter out closed merge tags.\r\n            mergetags = _.filter(mergetags, function(mergetag) {\r\n                return -1 == mergetag.indexOf( '}' ); // Filter out \"closed\" merge tags.\r\n            });\r\n\r\n            // If an open merge tag is found, show the Merge Tag Box, else hide.\r\n            if( 0 !== mergetags.length ) {\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'set:old', mergetags[0] );\r\n\r\n                jQuery('#merge-tags-box').css( 'display', 'block' );\r\n                $this.addClass('merge-tag-focus');\r\n\r\n                // Disable browser autocomplete.\r\n                var autocomplete = $this.attr( 'autocomplete' );\r\n                $this.attr( 'autocomplete', 'off' );\r\n                $this.data( 'autocomplete', autocomplete );\r\n\r\n                var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\r\n                if( 0 != $overlayElement.find( '.note-editor' ).length ){\r\n                    $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\r\n                } else {\r\n                    $overlayElement.addClass('merge-tag-focus-overlay');\r\n                }\r\n\r\n                var value = mergetags[0].replace( '{', '' );\r\n                nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\r\n            } else {\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n            }\r\n        }\r\n\r\n    } );\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/itemSettingFill',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\r\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Modify the user's browser history when they click on a domain\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/confirmPublish',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\r\n\t\t},\r\n\r\n\t\tconfirmPublish: function() {\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t// Check to see if we need to add a submit button.\r\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\r\n\t\t\t}\r\n\t\t\tformModel.set( 'show_publish_options', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to settings that utilise the Rich Text Editor\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App - Settings Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/rte',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\r\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\r\n\r\n\t\t\t// When an RTE setting is shown, re-render RTE.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\r\n\r\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\r\n\r\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\r\n\r\n\t\t\t// Instantiates the variable that holds the media library frame.\r\n\t\t\tthis.meta_image_frame;\r\n\r\n\t\t\tjQuery.summernote.options.icons = {\r\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\r\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\r\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\r\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\r\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\r\n\t\t        'indent': 'dashicons dashicons-editor-indent',\r\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\r\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\r\n\t\t        'bold': 'dashicons dashicons-editor-bold',\r\n\t\t        'caret': 'dashicons dashicons-arrow-down',\r\n\t\t        // 'circle': 'dashicons fa-circle',\r\n\t\t        'close': 'dashicons dashicons-dismiss',\r\n\t\t        'code': 'dashicons dashicons-editor-code',\r\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\r\n\t\t        // 'font': 'dashicons fa-font',\r\n\t\t        // 'frame': 'dashicons fa-frame',\r\n\t\t        'italic': 'dashicons dashicons-editor-italic',\r\n\t\t        'link': 'dashicons dashicons-admin-links',\r\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\r\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\r\n\t\t        // 'menuCheck': 'dashicons fa-check',\r\n\t\t        'minus': 'dashicons dashicons-minus',\r\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\r\n\t\t        // 'pencil': 'dashicons fa-pencil',\r\n\t\t        // 'picture': 'dashicons fa-picture-o',\r\n\t\t        // 'question': 'dashicons fa-question',\r\n\t\t        'redo': 'dashicons dashicons-redo',\r\n\t\t        'square': 'dashicons fa-square',\r\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\r\n\t\t        // 'subscript': 'dashicons fa-subscript',\r\n\t\t        // 'superscript': 'dashicons fa-superscript',\r\n\t\t        'table': 'dashicons dashicons-editor-table',\r\n\t\t        // 'textHeight': 'dashicons fa-text-height',\r\n\t\t        // 'trash': 'dashicons fa-trash',\r\n\t\t        'underline': 'dashicons dashicons-editor-underline',\r\n\t\t        'undo': 'dashicons dashicons-undo',\r\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\r\n\t\t        // 'video': 'dashicons fa-youtube-play'\r\n\t\t      }\r\n\r\n\t\t      this.currentContext = {};\r\n\t\t},\r\n\r\n\t\tinitSettingModel: function( settingModel ) {\r\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\r\n\t\t},\r\n\r\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\r\n\t\t\t/*\r\n\t\t\t * Custom Button for links\r\n\t\t\t */\r\n\t\t\tvar that = this;\r\n\t\t\t// var linkButton = this.linkButton();\r\n\t\t\tvar linkButton = function( context ) {\r\n\t\t\t\treturn that.linkButton( context );\r\n\t\t\t}\r\n\t\t\tvar mediaButton = function( context ) {\r\n\t\t\t\treturn that.mediaButton( context );\r\n\t\t\t}\r\n\t\t\tvar mergeTags = this.mergeTags();\r\n\r\n\t\t\tvar toolbar = [\r\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\r\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\r\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\r\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\r\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\r\n\t\t\t    [ 'table', [ 'table' ] ],\r\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\r\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\r\n\t\t\t];\r\n\r\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\r\n\t\t\t\ttoolbar: toolbar,\r\n\t\t\t\tbuttons: {\r\n\t\t\t\t\tlinkButton: linkButton,\r\n\t\t\t\t\tmergeTags: mergeTags,\r\n\t\t\t\t\tmediaButton: mediaButton\r\n\t\t\t\t},\r\n\t\t\t\theight: 150,   //set editable area's height\r\n\t\t\t\tcodemirror: { // codemirror options\r\n\t\t\t\t    theme: 'monokai',\r\n\t\t\t\t    lineNumbers: true,\r\n\t\t\t\t    callbacks: {\r\n\t\t\t\t    \tonBlur: function( editor ) {\r\n\t\t\t\t    \t\tvar value = editor.getValue();\r\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\r\n\t\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t},\r\n\t\t\t\tprettifyHtml: true,\r\n\t\t\t\tcallbacks: {\r\n\t\t\t\t\tonBlur: function( e, context ) {\r\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\r\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\r\n                        nfRadio.channel( 'summernote' ).trigger( 'blur', settingModel, dataModel, value );\r\n\t\t\t\t\t},\r\n                    onFocus: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'focus', e, this, context );\r\n                    },\r\n                    onKeydown: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'keydown', e, this, context );\r\n                    },\r\n                    onKeyup: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'keyup', e, this, context );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\r\n\t\t\tvar name = settingModel.get( 'name' );\r\n\t\t\tvar before = dataModel.get( name );\r\n\t\t\tvar after = value;\r\n\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\r\n\r\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\r\n\t\t},\r\n\r\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\r\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\r\n\t\t\tlinkMenu.replaceWith(function () {\r\n\t\t\t    return jQuery( '<div/>', {\r\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\r\n\t\t\t        html: this.innerHTML\r\n\t\t\t    } );\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\r\n\t\t},\r\n\r\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\r\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\r\n\t\t},\r\n\r\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\r\n\t\t},\r\n\r\n\t\tlinkButton: function( context ) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\r\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\r\n\t\t\treturn ui.buttonGroup([\r\n\t\t\t\tui.button({\r\n\t            className: 'dropdown-toggle link-button',\r\n\t            contents: linkButton({}),\r\n\t            tooltip: 'Insert Link',\r\n\t            click: function( e ) {\r\n\t            \tthat.clickLinkButton( e, context );\r\n\t            },\r\n\t            data: {\r\n\t              toggle: 'dropdown'\r\n\t            }\r\n\t          }),\r\n\t\t\t\tui.dropdown([\r\n\t            ui.buttonGroup({\r\n\t              children: [\r\n\t                ui.button({\r\n\t                  contents: linkDropdown({}),\r\n\t                  tooltip: ''\r\n\t                }),\r\n\t              ]\r\n\t            })\r\n\t          ])\r\n\t\t\t]).render();\r\n\t\t},\r\n\r\n\t\tmergeTags: function( context ) {\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\r\n\t\t\treturn ui.button({\r\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\r\n\t\t\t\tcontents: mergeTagsButton({}),\r\n\t\t\t\ttooltip: 'Merge Tags'\r\n\t\t\t}).render();\r\n\t\t},\r\n\r\n\t\tmediaButton: function( context ) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\r\n\t\t\treturn ui.button({\r\n\t            className: 'dropdown-toggle',\r\n\t            contents: mediaButton({}),\r\n\t            tooltip: 'Insert Media',\r\n\t            click: function( e ) {\r\n\t            \tthat.openMediaManager( e, context );\r\n\t            }\r\n\t          }).render();\r\n\t\t},\r\n\r\n\t\topenMediaManager: function( e, context ) {\r\n\t\t\tcontext.invoke( 'editor.saveRange' );\r\n\t\t\t// If the frame already exists, re-open it.\r\n\t\t\tif ( this.meta_image_frame ) {\r\n\t\t\t\tthis.meta_image_frame.open();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Sets up the media library frame\r\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\r\n\t\t\t\ttitle: 'Select a file',\r\n\t\t\t\tbutton: { text:  'insert' }\r\n\t\t\t});\r\n\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t// Runs when an image is selected.\r\n\t\t\tthis.meta_image_frame.on('select', function(){\r\n\r\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\r\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\r\n\t\t\t\tthat.insertMedia( media_attachment, context );\r\n\t\t\t});\r\n\r\n\t\t\t// Opens the media library frame.\r\n\t\t\tthis.meta_image_frame.open();\r\n\t\t},\r\n\r\n\t\tclickLinkButton: function ( e, context ) {\r\n\t\t\tvar range = context.invoke( 'editor.createRange' );\r\n\t\t\tcontext.invoke( 'editor.saveRange' );\r\n\t\t\tvar text = range.toString()\r\n\t\t\tthis.currentContext = context;\r\n\r\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\r\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\r\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\r\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\r\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\r\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\r\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\r\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\r\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\r\n\t\t\t\tvar text = textEl.val();\r\n\t\t\t\tvar url = urlEl.val();\r\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\r\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\r\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttextEl.val( '' );\r\n\t\t\turlEl.val( '' );\r\n\t\t\tisNewWindowEl.prop( 'checked', false );\r\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\r\n\t\t},\r\n\r\n\t\tinsertMedia: function( media, context ) {\r\n\t\t\tcontext.invoke( 'editor.restoreRange' );\r\n\t\t\tif ( 'image' == media.type ) {\r\n\t\t\t\tcontext.invoke( 'editor.insertImage', media.url );\r\n\t\t\t} else {\r\n\t\t\t\tcontext.invoke( 'editor.createLink', { text: media.filename, url: media.url } );\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingFieldSelect',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n\r\n        initialize: function() {\r\n\r\n            // Bind field key listener to field-select setting type.\r\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\r\n\r\n            // Add setting change listener only in drawers with a field-select setting.\r\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\r\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\r\n            });\r\n\r\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\r\n\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\r\n        },\r\n\r\n        trackKeyChanges: function( settingModel ) {\r\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\r\n\r\n            // Update selected field if the selected field's key changes.\r\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\r\n        },\r\n\r\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\r\n\r\n            var oldKey = keyModel._previousAttributes[ 'key' ];\r\n            var newKey = keyModel.get( 'key' );\r\n\r\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\r\n\r\n                dataModel.set( settingModel.get( 'name' ), newKey );\r\n            }\r\n        },\r\n\r\n        beforeRender: function( settingModel, dataModel ) {\r\n\r\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n            var fieldTypes = settingModel.get( 'field_types' );\r\n\r\n            var options = [\r\n                {\r\n                    label: '--',\r\n                    value: 0\r\n                }\r\n            ];\r\n            _.each( fieldCollection.models, function( field ){\r\n\r\n                if( dataModel.cid == field.cid ) return;\r\n\r\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\r\n\r\n                var fieldFilter = settingModel.get( 'field_filter' );\r\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\r\n                    var bail = false;\r\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\r\n                        console.log( value + \":\" + field.get( setting )  );\r\n                        if( value != field.get( setting ) ) bail = true;\r\n                    } );\r\n                    if( bail ) return;\r\n                }\r\n\r\n                var value = field.get( 'key' );\r\n                switch ( settingModel.get( 'field_value_format' ) ) {\r\n                    case 'key':\r\n                        value = field.get( 'key' );\r\n                        break;\r\n                    case 'merge_tag':\r\n                    default:\r\n                        value = '{field:' + field.get( 'key' ) + '}';\r\n                }\r\n\r\n                options.push({\r\n                    label: field.get( 'label' ),\r\n                    value: value\r\n                });\r\n            });\r\n\r\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\r\n                _.each( fieldTypes, function( fieldType ){\r\n\r\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\r\n\r\n                    options.push({\r\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\r\n                        value: 'addField:' + fieldType,\r\n                    });\r\n                } );\r\n            }\r\n\r\n            settingModel.set( 'options', options );\r\n        },\r\n\r\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\r\n\r\n            if( 'field-select' != model.get( 'type' ) ) return;\r\n\r\n            var name = model.get( 'name' );\r\n            var value = dataModel.get( name );\r\n\r\n            if( ! value ) return;\r\n\r\n            var rubble = value.split( ':' );\r\n\r\n            if( 'addField' != rubble[0] ) return;\r\n\r\n            this.openDrawer = 'addField';\r\n            this.filterDrawer = rubble[1];\r\n\r\n            dataModel.set( name, '' );\r\n\r\n            this.switchDomain = true;\r\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\r\n        },\r\n\r\n        SwitchToFieldsDomain: function() {\r\n            if( this.switchDomain ) {\r\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\r\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\r\n                this.switchDomain = null;\r\n            }\r\n        },\r\n\r\n        autoOpenDrawer: function() {\r\n            if( this.openDrawer ) {\r\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\r\n                this.openDrawer = null;\r\n            }\r\n        },\r\n\r\n        filterDrawerContents: function() {\r\n            if( this.filterDrawer ) {\r\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\r\n                this.filterDrawer = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\r\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\r\n *\r\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\r\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Action Settings\r\n * @copyright (c) 2016 WP Ninjas\r\n * @author Kyle B. Johnson\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\r\n    return Marionette.Object.extend( {\r\n\r\n        /**\r\n         * A reference list of Field List setting models.\r\n         */\r\n        fieldListSettings: [],\r\n\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\r\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\r\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\r\n        },\r\n\r\n        /**\r\n         * Build a reference list of Field List setting models for later reference.\r\n         *\r\n         * @param settingModel\r\n         */\r\n        registerFieldListSettings: function( settingModel ){\r\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\r\n        },\r\n\r\n        /**\r\n         * Field List settings contain field keys in the setting names.\r\n         * When a field key changes, so too must the Field List setting name.\r\n         *\r\n         * @param fieldModel\r\n         */\r\n        updateFieldListSettingKeys: function( fieldModel ){\r\n\r\n            // We are only interested in field key changes.\r\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\r\n\r\n            var oldKey = fieldModel._previousAttributes.key;\r\n            var newKey = fieldModel.changed.key;\r\n\r\n            /*\r\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\r\n             *\r\n             * Each setting of each action model must be checked against each registered Field List setting.\r\n             */\r\n            var that = this;\r\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\r\n                _.each( actionModel.attributes, function( value, setting ) {\r\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\r\n                    _.each( that.fieldListSettings, function( prefix ) {\r\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\r\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\r\n                        actionModel.set( prefix + '-' + newKey, oldValue );\r\n                        actionModel.set( prefix + '-' + oldKey, 0 );\r\n                        lastChanged = oldKey;\r\n                    });\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\r\n         *\r\n         * @param settingModel\r\n         * @returns {*}\r\n         */\r\n        getSettingChildView: function( settingModel ) {\r\n\r\n            /**\r\n             * Dynamically build field-list settings as needed for the view.\r\n             */\r\n\r\n            // Filter fields based on the field_types setting property.\r\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\r\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\r\n            });\r\n\r\n            // Map fields into setting definitions.\r\n            var settings = _.map( fields, function( field ) {\r\n                return {\r\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\r\n                    type: 'toggle',\r\n                    label: field.get( 'label' ),\r\n                    width: 'full'\r\n                };\r\n            });\r\n\r\n            settingModel.set( 'settings', new settingCollection( settings ) );\r\n\r\n            // return the child view.\r\n            return fieldsetView;\r\n        },\r\n\r\n    });\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n *\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingHTML',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\r\n        },\r\n\r\n        init: function( settingModel, dataModel ) {\r\n\r\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\r\n\r\n            // Listen to a setting change inside of the dataModel.\r\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\r\n        },\r\n\r\n        update: function( dataModel, changedSettingValue ) {\r\n\r\n            // Mirror the default value setting value.\r\n            dataModel.set( this.get( 'name' ), changedSettingValue );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingColor',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // We don't want to re-render this setting type when the data changes.\r\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\r\n            // We want to close any color pickers before we close our styling tab or drawer.\r\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\r\n        },\r\n\r\n        initColorPicker: function( settingModel, dataModel, view ) {\r\n\r\n            var name = settingModel.get( 'name' );\r\n            var el = jQuery( view.el ).find( 'input' );\r\n\r\n            jQuery( el ).wpColorPicker( {\r\n                change: function( event, ui ){\r\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\r\n                }\r\n            } );\r\n        },\r\n\r\n        setRenderFalse: function() {\r\n            return false;\r\n        },\r\n\r\n        closeColorPickers: function( settingModel, dataModel, view ) {\r\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for the app to start.\r\n *\r\n * If the form is a new form, then highlight the Add New submenu item.\r\n * Otherwise, append an Edit Form submenu for context.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeMenu',[], function() {\r\n    var controller = Marionette.Object.extend({\r\n\r\n        editFormText: '',\r\n\r\n        initialize: function () {\r\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\r\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\r\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\r\n        },\r\n\r\n        changeMenu: function () {\r\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n            if ( this.isNewForm( form.id ) ) {\r\n                this.highlightAddNew();\r\n            } else {\r\n                this.appendEditForm();\r\n            }\r\n        },\r\n\r\n        isNewForm: function( form_id ) {\r\n            return isNaN( form_id );\r\n        },\r\n\r\n        highlightAddNew: function() {\r\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\r\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\r\n        },\r\n\r\n        appendEditForm: function() {\r\n            var html = '<li class=\"current\"><a href=\"#\">' + this.editFormText + '</a></li>';\r\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length == 0 ) {\r\n                jQuery( '.wp-submenu li' ).removeClass( 'current' );\r\n                jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().after( html );\r\n            }\r\n        },\r\n\r\n        formPublish: function( response ) {\r\n            if ( 'publish' !== response.action ) return false;\r\n            this.changeMenu();\r\n        }\r\n    });\r\n\r\n    return controller;\r\n});\n","/**\r\n * When we click on a domain link, close the mobile menu.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/mobile',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for clicks on our app menu.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\r\n\t\t},\r\n\r\n\t\tcloseMobileMenu: function() {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Add a jBox notice to the screen.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/notices',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\r\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\r\n\t\t\tthis.notices = {};\r\n\t\t},\r\n\r\n\t\taddNotice: function( key, msg, options ) {\r\n\r\n\t\t\tvar appDefaults = {\r\n\t\t\t\tcontent: msg,\r\n\t\t\t\tcolor: 'green',\r\n\t\t\t\tzIndex:12000,\r\n\t\t\t\tconstructOnInit: true,\r\n\t\t\t\tstack: true,\r\n\t\t\t\tanimation: {\r\n\t\t\t\t\topen: 'flip',\r\n\t\t\t\t\tclose: 'flip'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar mobileDefaults = {\r\n\t\t\t\tposition: {\r\n\t\t\t\t\tx: 'center',\r\n\t\t\t\t\ty: 'top'\r\n\t\t\t\t},\r\n\t\t\t\tanimation: {\r\n\t\t\t\t\topen:'slide:top',\r\n\t\t\t\t\tclose:'slide:left'\r\n\t\t\t\t},\r\n\t\t\t\tautoClose: 2000,\r\n\t\t\t\toffset: {\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 55\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar desktopDefaults = {\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\tx: 'left',\r\n\t\t\t\t\ty: 'bottom'\r\n\t\t\t\t},\r\n\t\t\t\tautoClose: 4000\r\n\t\t\t};\r\n\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tvar defaults = mobileDefaults;\t\r\n\t\t\t} else {\r\n\t\t\t\tvar defaults = desktopDefaults;\r\n\t\t\t}\r\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\r\n\r\n\t\t\tvar options = jQuery.extend( defaults, options );\r\n\t\t\t// console.log( options );\r\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\r\n\t\t},\r\n\r\n\t\tcloseNotice: function( key ) {\r\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\r\n\t\t\t\tthis.notices[ key ].close();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\topenNotice: function( key ) {\r\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\r\n\t\t\t\tthis.notices[ key ].open();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/unloadCheck',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\r\n\t\t},\r\n\r\n\t\tmaybePrompt: function( model ) {\r\n\t\t\t// If our app is clean, don't show a warning.\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t\t\t\treturn 'You have unsaved changes.';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\r\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\r\n * for custom display of form fields. i.e. layout rows.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formContentFilters',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Init our formContent view filter array.\r\n\t\t\t */\r\n\t\t\tthis.viewFilters = [];\r\n\t\t\tthis.saveFilters = [];\r\n\t\t\tthis.loadFilters = [];\r\n\r\n\t\t\t/*\r\n\t\t     * Listen for requests to add formContent filters.\r\n\t\t\t */\r\n\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our formContent filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * -- DEPRECATED RADIO REPLIES --\r\n\t\t\t * \r\n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\r\n\t\t\t * Listen for requests to add new fieldContent filters.\r\n\t\t\t * \r\n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\r\n\t\t\t */\r\n\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our fieldContent filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * -- END DEPRECATED --\r\n\t\t\t */\r\n\t\t},\r\n\r\n\t\taddViewFilter: function( callback, priority ) {\r\n\t\t\tthis.viewFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetViewFilters: function() {\r\n\t\t\treturn this.viewFilters;\r\n\t\t},\r\n\r\n\t\taddSaveFilter: function( callback, priority ) {\r\n\t\t\tthis.saveFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetSaveFilters: function() {\r\n\t\t\treturn this.saveFilters;\r\n\t\t},\r\n\r\n\t\taddLoadFilter: function( callback, priority ) {\r\n\t\t\tthis.loadFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetLoadFilters: function() {\r\n\t\t\treturn this.loadFilters;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles filters for our main content gutter views.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Init our gutter view filter array.\r\n\t\t\t */\r\n\t\t\tthis.leftFilters = [];\r\n\t\t\tthis.rightFilters = [];\r\n\t\t\t/*\r\n\t\t     * Listen for requests to add gutter filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our content gutter filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\r\n\t\t},\r\n\r\n\t\taddLeftFilter: function( callback, priority ) {\r\n\t\t\tthis.leftFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\taddRightFilter: function( callback, priority ) {\r\n\t\t\tthis.rightFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetLeftFilters: function() {\r\n\t\t\treturn this.leftFilters;\r\n\t\t},\r\n\r\n\t\tgetRightFilters: function() {\r\n\t\t\treturn this.rightFilters;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\r\n\t\t},\r\n\r\n\t\tcloneCollectionDeep: function( collection ) {\r\n\t\t\tvar models = [];\r\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\r\n\t\t\t_.each( collection.models, function( model ) {\r\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\t\t\t\tmodels.push( newModel );\r\n\t\t\t} );\r\n\t\t\t// Create a new instance of our collection\r\n\t\t\treturn new collection.constructor( models, collection.options );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Tracks which keys have been pressed.\r\n * Currently only used by fields to see if they should duplicate or delete on click.\r\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/trackKeyDown',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tkeys: [],\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * Track keydowns and store the keys pressed.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\r\n\t\t\t\tthat.keyDown( e, that );\r\n\t\t\t} );\r\n\r\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\r\n\t\t\t\tthat.keyUp( e, that );\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Get the keys currently being pressed, if any\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\r\n\t\t},\r\n\r\n\t\tkeyDown: function( e, context ) {\r\n\t\t\t/*\r\n\t\t\t * Add our keycode to our keys array.\r\n\t\t\t */\r\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, context ) {\r\n\t\t\t/*\r\n\t\t\t * Remove our keycode from our keys array.\r\n\t\t\t */\r\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\r\n\t\t\t\tdelete context.keys[ e.keyCode ];\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetKeyDown: function() {\r\n\t\t\treturn this.keys;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Initialize the perfectscroll jQuery plugin\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/perfectScroll',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tmovedPos: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * When we init the main view, init our perfectscroll\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\r\n\t\t},\r\n\r\n\t\tinitPerfectScroll: function( view ) {\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\r\n\t\t\t\t\tsuppressScrollX: true\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\r\n\t\t},\r\n\r\n\t\tmoveRail: function() {\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\r\n\r\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\r\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tresetRail: function() {\r\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our type settings groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdisplay: false\r\n\t\t},\r\n\r\n\t\tinitialize: function( options ) {\r\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\r\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection of our type settings groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: settingGroupModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Returns a new setting group collection.\r\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App - Edit Settings Drawer\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for a new setting group collection\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a new instance of the setting group collection.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @return backbone.collection\r\n\t\t */\r\n\t\tgetNewSettingGroupCollection: function() {\r\n\t\t\treturn SettingGroupCollection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.0.30\r\n */\r\ndefine( 'controllers/app/settingMedia',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // When the media button is clicked, open the media manager.\r\n            this.listenTo( nfRadio.channel( 'setting-type-media' ), 'click:extra', this.clickExtra );\r\n        },\r\n\r\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\r\n            var textEl = jQuery( e.target ).parent().find( '.setting' );\r\n\r\n            if ( jQuery( e.target ).hasClass( 'open-media-manager' ) ) {\r\n                // If the frame already exists, re-open it.\r\n                if ( this.meta_image_frame ) {\r\n                    this.meta_image_frame.open();\r\n                    return;\r\n                }\r\n\r\n                // Sets up the media library frame\r\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\r\n                    title: 'Select a file',\r\n                    button: { text:  'insert' }\r\n                });\r\n\r\n                var that = this;\r\n\r\n                // Runs when an image is selected.\r\n                this.meta_image_frame.on('select', function(){\r\n                    // Grabs the attachment selection and creates a JSON representation of the model.\r\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\r\n                    textEl.val( media_attachment.url ).change();\r\n                });\r\n\r\n                // Opens the media library frame.\r\n                this.meta_image_frame.open();\r\n            }\r\n        },\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Model for our field type\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\r\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field type models. \r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: typeModel,\r\n\t\ttype: false,\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\t_.each( options, function( option, key ) {\r\n\t\t\t\tthis[ key ] = option;\r\n\t\t\t}, this );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Model that represents our field type section on the add new field drawer.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/typeSectionModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tclasses: ''\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: typeSectionModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\r\n *\r\n * 1) Create our settings sections config\r\n * 2) Loops over our preloaded data and adds that to our field type collection\r\n *\r\n * Also responds to requests for data about field types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/types',[\r\n\t\t'models/app/typeCollection',\r\n\t\t'models/fields/typeSectionCollection'\r\n\t],\r\n\tfunction(\r\n\t\tTypeCollection,\r\n\t\tSectionCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Config for our settings sections\r\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\r\n\r\n\t\t\t// Create our field type collection\r\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\r\n\r\n\t\t\t// Listen to clicks on field types\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\r\n\t\t},\r\n\r\n\t\tregisterSection: function( typeModel ) {\r\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\r\n\r\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetFieldType: function( id ) {\r\n        \treturn this.collection.get( id );\r\n        },\r\n\r\n        /**\r\n         * Return the entire field type collection\r\n         *\r\n         * @since  3.0\r\n         * @param  string \t\t\t\tid \t[description]\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetTypeCollection: function( id ) {\r\n        \treturn this.collection;\r\n        },\r\n\r\n        /**\r\n         * Add a field type to our fields sortable when the field type button is clicked.\r\n         *\r\n         * @since 3.0\r\n         * @param Object e event\r\n         * @return void\r\n         */\r\n        addField: function( e ) {\r\n\t\t\tvar type = jQuery( e.target ).data( 'id' );\r\n\r\n\t\t\tif( e.shiftKey ){\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\r\n\t\t\t\ttype: type,\r\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\r\n\t\t\t});\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\r\n\r\n\t\t\t// Re-Draw the Field Collection\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\r\n        },\r\n\r\n        /**\r\n         * Return our field type settings sections\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection field type settings sections\r\n         */\r\n        getTypeSections: function() {\r\n            return this.sections;\r\n        },\r\n\r\n        /**\r\n         * Return our saved fields\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection\r\n         */\r\n        getSavedFields: function() {\r\n        \tthis.sections.get( 'saved' );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Handles the logic for our field type draggables.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our field type draggables and run the appropriate function.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging:\r\n\t\t * get our drawer element\r\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\r\n\t\t * get our main element\r\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\r\n\t\t * set our dragging helper clone\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return {[type]}         [description]\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t},\r\n\r\n\t\tgetCurrentDraggableHelperClone: function() {\r\n\t\t\treturn this.draggableHelperClone;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the dragging of our field staging area\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the start and stop of our field staging dragging\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user starts dragging the staging area, we have to:\r\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\r\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\r\n\t\t * replace our helper with the stacked \"x fields\" template.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t context jQuery UI Draggable\r\n\t\t * @param  Object\t ui      jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\r\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\r\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t context jQuery UI Draggable\r\n\t\t * @param  Object\t ui      jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles most things related to our staging area:\r\n * 1) Creates a collection\r\n * 2) Listens for requests to CRUD items from the collection\r\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Create our staged fields collection\r\n\t\t\tthis.collection = new stagingCollection();\r\n\t\t\t// Respond to requests related to our staging area.\r\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\r\n\t\t\t// Listen to our remove staged field click event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\r\n\t\t\t// Listen to our event that fires just before a drawer is closed.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\r\n\t\t},\r\n\r\n\t\tgetStagingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our staging area\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param string type Type of field we're adding\r\n\t\t * @return tmpID\r\n\t\t */\r\n\t\taddStagedField: function( type, silent ) {\r\n\t\t\tvar silent = silent || false;\r\n\t\t\t// Get our type model from the string.\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\r\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\r\n\t\t\t// Object that will be added to our staging collection.\r\n\t\t\tvar data = {\r\n\t\t\t\tid: tmpID,\r\n\t\t\t\t// i.e. firstname, textbox, etc.\r\n\t\t\t\tslug: fieldType.get( 'type' ),\r\n\t\t\t\t// i.e. First Name, Textbox, etc.\r\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\r\n\t\t\t\t// i.e. calendar, envelope, etc.\r\n\t\t\t\ticon: fieldType.get( 'icon' )\r\n\t\t\t}\r\n\t\t\t// \r\n\t\t\tvar model = this.collection.add( data );\r\n\r\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\r\n\r\n\t\t\treturn tmpID;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove a field from staging\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te     \tEvent\r\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveStagedField: function( e, model ) {\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tbeforeCloseDrawer: function() {\r\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\r\n\t\t\t\t// Get our field collection.\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n\t\t\t\tvar fields = [];\r\n\t\t\t\t// Loop through our staging collection\r\n\t\t\t\t_.each( this.collection.models, function( model ) {\r\n\t\t\t\t\t// Get a tmp ID for our new field.\r\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t\t\t// Create an object that can be added as a model.\r\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\r\n\t\t\t\t\t// Add our new field.\r\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\r\n\t\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\t\tvar label = {\r\n\t\t\t\t\t\tobject: 'Field',\r\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\t\t\tchange: 'Added',\r\n\t\t\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar data = {\r\n\t\t\t\t\t\tcollection: fieldCollection\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\t\t} );\r\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\r\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t\t// Empty the staging collection\r\n\t\t\t\tthis.collection.reset();\r\n\t\t\t}\r\n\t\t\t// Sort our fields.\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sort our staging area by the 'order' attribute.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsortStagedFields: function() {\r\n\t\t\t// Get our staged fields sortable.\r\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\r\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\r\n\t\t\t// Loop through our models\r\n\t\t\t_.each( this.collection.models, function( field ) {\r\n\t\t\t\t// Search our order array for this field.\r\n\t\t\t\tvar search = field.get( 'id' );\r\n\t\t\t\tvar pos = order.indexOf( search );\r\n\t\t\t\t// Update our staged field model with the new order.\r\n\t\t\t\tfield.set( 'order', pos );\r\n\t\t\t} );\r\n\t\t\t// Sort our staging collection.\r\n\t\t\tthis.collection.sort();\r\n\t\t},\r\n\r\n\t\tclearStagedFields: function() {\r\n\t\t\tthis.collection.reset();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to our staged fields sortable.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our field type draggables\r\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\r\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\r\n\t\t\t// Listen to our sortable events\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI item\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveStagedFields: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an active class to our sortable when a field type item is dragged\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t */\r\n\t\taddActiveClass: function() {\r\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove the active class from our sortable when the field type item is dropped.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveActiveClass: function() {\r\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te  event\r\n\t\t * @param  Object \tui jQuery UI Element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toverStagedFields: function( e, ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\r\n\t\t\t\tthis.currentHelper = ui.helper \r\n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\r\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toutStagedFields: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\r\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\r\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\r\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartStagedFields: function( ui ) {\r\n\t\t\tjQuery( ui.item ).show();\r\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\r\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopStagedFields: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Filters our field type collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our change filter event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Filter our field types in the add new field drawer\r\n\t\t * \r\n\t\t * Takes a search string and finds any field types that match either the name or alias.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string\t search \tstring being searched for\r\n\t\t * @param  object \t e      \tKeyup event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tfilterFieldTypes: function( search, e ) {\r\n\t\t\t// Make sure that we aren't dealing with an empty string.\r\n\t\t\tif ( '' != jQuery.trim( search ) ) {\r\n        \t\tvar filtered = [];\r\n        \t\t/**\r\n        \t\t * Call the function that actually filters our collection,\r\n        \t\t * and then loop through our collection, adding each model to our filtered array.\r\n        \t\t */\r\n        \t\t_.each( this.filterCollection( search ), function( model ) {\r\n        \t\t\tfiltered.push( model.get( 'id' ) );\r\n        \t\t} );\r\n\r\n        \t\t// Create a new Field Type Section collection with the filtered array.\r\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\r\n\t\t\t\t{ \r\n\t\t\t\t\tid: 'filtered',\r\n\t\t\t\t\tnicename: 'Filtered Fields',\r\n\t\t\t\t\tfieldTypes: filtered\r\n\t\t\t\t}\r\n\t\t\t\t] );\r\n\r\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\r\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\r\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\r\n        \t\t\tif ( 0 < filtered.length ) {\r\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\r\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n        \t\t\t}\r\n        \t\t}\r\n        \t} else {\r\n        \t\t// Clear our filter if the search text is empty.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Search our field type collection for the search string.\r\n         * \r\n         * @since  3.0\r\n         * @param  string\t search \tstring being searched for\r\n         * @return backbone.collection\r\n         */\r\n        filterCollection: function( search ) {\r\n        \tsearch = search.toLowerCase();\r\n        \t// Get our list of field types\r\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\r\n        \t/*\r\n        \t * Backbone collections have a 'filter' method that loops through every model,\r\n        \t * waiting for you to return true or false. If you return true, the model is kept.\r\n        \t * If you return false, it's removed from the filtered result.\r\n        \t */\r\n\t\t\tvar filtered = collection.filter( function( model ) {\r\n\t\t\t\tvar found = false;\r\n\t\t\t\t\r\n\t\t\t\t// If we match either the ID or nicename, return true.\r\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\r\n\t\t\t\t */\r\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\r\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\r\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we match any of the aliases, return true.\r\n\t\t\t\tif ( model.get( 'alias' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\r\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn found;\r\n\t\t\t} );\r\n\t\t\t// Return our filtered collection.\r\n\t\t\treturn filtered;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles all the actions/functions related to our main field sortable.\r\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/sortable',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\r\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Handles all the events fired by our sortable:\r\n\t\t\t * receive - dropped from type button or staging\r\n\t\t\t * over - dragging within or over the sortable\r\n\t\t\t * out - leaving the sortable\r\n\t\t\t * stop - stopped sorting/dragging\r\n\t\t\t * start - started sorting/dragging\r\n\t\t\t * update - stopped sorting/dragging and order has changed\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add the active class to our sortable so that its border is blue.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\taddActiveClass: function() {\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove the active class from our sortable\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveActiveClass: function() {\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires when we drop a field type button or staging onto our sortable\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveFieldsSortable: function( ui ) {\r\n\t\t\t/*\r\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\r\n\t\t\t */ \r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\r\n\t\t\t\t// Get our type string\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\t// Add a field (returns the tmp ID )\r\n\t\t\t\tvar tmpID = this.addField( type, false );\r\n\t\t\t\t/*\r\n\t\t\t\t * Update our helper id to the tmpID.\r\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\r\n\t\t\t\t */ \r\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\r\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t\t// Trigger a drop field type event.\r\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\t// Grab our staged fields.\r\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\t\t// Get our current field order.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\t\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\r\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\r\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\r\n\t\t\t\t} else { // Sortable is empty\r\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\r\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our droped element.\r\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\r\n\r\n\t\t\t\t// Loop through each staged fields model and insert a field.\r\n\t\t\t\tvar tmpIDs = [];\r\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\r\n\t\t\t\t\t// Add our field.\r\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\r\n\t\t\t\t\t// Add this newly created field to our order array.\r\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// Remove our dropped element from our order array.\r\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\r\n\t\t\t\torder.splice( insertedAt, 1 );\r\n\t\t\t\t// Sort our fields\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\r\n\t\t\t\t// Clear our staging\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\r\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field.\r\n\t\t * Builds the object necessary to add a field to the field model collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \ttype   field type\r\n\t\t * @param  boolean \tsilent add silently\r\n\t\t * @return string \ttmpID\r\n\t\t */\r\n\t\taddField: function( type, silent ) {\r\n\t\t\t// Default to false\r\n\t\t\tsilent = silent || false;\r\n\t\t\t// Get our field type model\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \r\n\t\t\t// Get our tmp ID\r\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t// Add our field\r\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\r\n\t\t\treturn tmpID;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toverfieldsSortable: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\r\n\t\t\t\t// String type\r\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\r\n\t\t\t\t// Get our field type model.\r\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t\t// Get our field type nicename.\r\n\t\t\t\tvar label = fieldType.get( 'nicename' );\r\n\t\t\t\t// Get our sortable element.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\t// Get our fieldwidth.\r\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\r\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\r\n\t\t\t\tthis.currentHelper = ui.helper;\r\n\t\t\t\t// Update our helper label.\r\n\t\t\t\tjQuery( ui.helper ).html( label );\r\n\t\t\t\t// Remove the field type draggable classes and add sortable classes.\r\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-field-wrap' ).css( { 'width': fieldWidth, 'height': '50px' } );\t\t\t\t\t\t\r\n\t\t\t\t// Add our hover class if our sortable has been initialized.\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\r\n\t\t * This returns the item to its pre-over state.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toutFieldsSortable: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\r\n\t\t\t\t/*\r\n\t\t\t\t * Get our helper clone.\r\n\t\t\t\t * This will let us access the previous label and classes of our helper.\r\n\t\t\t\t */ \r\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\r\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\r\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\r\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\r\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging in the sortable:\r\n\t\t * remove our opacity setting\r\n\t\t * remove our ui helper\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopFieldsSortable: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging in the sortable:\r\n\t\t * add an opacity setting of 0.5\r\n\t\t * show our item (jQuery hides the original item by default)\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartFieldsSortable: function( ui ) {\r\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\r\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \r\n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sort our fields when we change the order.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateFieldsSortable: function( ui, sortable ) {\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\r\n\r\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\r\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \r\n\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\r\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\r\n\r\n\t\t\t\t// Add our change event to the change tracker.\r\n\t\t\t\tvar data = { fields: [] };\r\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\r\n\t\t\t\t\tvar newPos = field.get( 'order' );\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata.fields.push( {\r\n\t\t\t\t\t\tmodel: field,\r\n\t\t\t\t\t\tattr: 'order',\r\n\t\t\t\t\t\tbefore: oldPos,\r\n\t\t\t\t\t\tafter: newPos\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar label = {\r\n\t\t\t\t\tobject: 'Field',\r\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\r\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\r\n\t\t\t\t\tdashicon: 'sort'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles interactions with our field collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tadding: false,\r\n\t\tremoving: false,\r\n\t\t\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our field collection from our localized form data\r\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\r\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\r\n\t\t\tthis.collection.removedIDs = {};\r\n\r\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\r\n\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\r\n\t\t\t * we should run animations in our fields collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\r\n\t\t},\r\n\r\n\t\tgetFieldCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tredrawFieldCollection: function() {\r\n\t\t\tthis.collection.trigger( 'reset', this.collection );\r\n\t\t},\r\n\r\n\t\tgetField: function( id ) {\r\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * First we check to see if a key matches what we were sent.\r\n\t\t\t\t */\t\t\t\t\r\n\t\t\t\treturn this.collection.findWhere( { key: id } );\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\r\n\t\t\t\t */\r\n\t\t\t\treturn this.collection.get( id );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \t\t\tfield data to insert\r\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\r\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\r\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\r\n\t\t */\r\n\t\taddField: function( data, silent, renderTrigger, action ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\r\n\r\n\t\t\tsilent = silent || false;\r\n\t\t\taction = action || '';\r\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\r\n\r\n\t\t\tif ( false === data instanceof Backbone.Model ) {\r\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\r\n\t\t\t\t\tdata.id = this.getTmpFieldID();\r\n\t\t\t\t}\r\n\t\t\t\tvar model = new fieldModel( data );\r\n\t\t\t} else {\r\n\t\t\t\tvar model = data;\r\n\t\t\t}\r\n\r\n\t\t\t// console.log( model );\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\r\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\r\n\t\t\t * \r\n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\r\n\t\t\t */\r\n\r\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\r\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\r\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\r\n\t\t\t}\r\n\r\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\r\n\t\t\t\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\r\n\t\t\tif ( renderTrigger ) {\r\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\r\n\t\t\t\r\n\t\t\treturn model;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update a field setting by ID\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  int \t\tid    field id\r\n\t\t * @param  string \tname  setting name\r\n\t\t * @param  mixed \tvalue setting value\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateFieldSetting: function( id, name, value ) {\r\n\t\t\tvar fieldModel = this.collection.get( id );\r\n\t\t\tfieldModel.set( name, value );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get our fields sortable EL\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsortFields: function( order, ui, updateDB ) {\r\n\t\t\tif ( null == updateDB ) {\r\n\t\t\t\tupdateDB = true;\r\n\t\t\t}\r\n\t\t\t// Get our sortable element\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\r\n\t\t\t\t// JS ternerary for setting our order\r\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\r\n\r\n\t\t\t\t// Loop through all of our fields and update their order value\r\n\t\t\t\t_.each( this.collection.models, function( field ) {\r\n\t\t\t\t\t// Get our current position.\r\n\t\t\t\t\tvar oldPos = field.get( 'order' );\r\n\t\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\r\n\t\t\t\t\t\tvar search = 'field-' + id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar search = id;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\r\n\t\t\t\t\tfield.set( 'order', newPos );\r\n\t\t\t\t} );\r\n\t\t\t\tthis.collection.sort();\r\n\r\n\t\t\t\tif ( updateDB ) {\r\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t\t\t// Update our preview\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a field from our collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteField: function( model ) {\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\r\n\t\t\tthis.removing = true;\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\t\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a new tmp id for our fields.\r\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return string\r\n\t\t */\r\n\t\tgetTmpFieldID: function() {\r\n\t\t\tvar tmpNum = this.collection.tmpNum;\r\n\t\t\tthis.collection.tmpNum++;\r\n\t\t\treturn 'tmp-' + tmpNum;\r\n\t\t},\r\n\r\n\t\tgetAdding: function() {\r\n\t\t\treturn this.adding;\r\n\t\t},\r\n\r\n\t\tsetAdding: function( val ) {\r\n\t\t\tthis.adding = val;\r\n\t\t},\r\n\r\n\t\tgetRemoving: function() {\r\n\t\t\treturn this.removing;\r\n\t\t},\r\n\r\n\t\tsetRemoving: function( val ) {\r\n\t\t\tthis.removing = val;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our repeater option.\r\n * \r\n * @package Ninja App builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/optionRepeaterModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\terrors: {},\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// When we add errors to the option row, run a function.\r\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the errors on our model, check to see if we should add or remove \r\n\t\t * the error from the setting that this option is a part of.\r\n\t\t *\r\n\t\t * Adding an error to the setting model simply disables the drawer and other\r\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeErrors: function( model ) {\r\n\t\t\t/*\r\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\r\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\r\n\t\t\t */\r\n\r\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Loop through our collection to see if we have any other errors.\r\n\t\t\t\t */\r\n\t\t\t\tvar errorsFound = false;\r\n\t\t\t\t_.each( model.collection.models, function( opt ) {\r\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\r\n\t\t\t\t\t\terrorsFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tif ( ! errorsFound ) {\r\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\r\n\t\t\t\t */\r\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Model that represents our list options.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: listOptionModel,\r\n\t\tcomparator: 'order',\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\t// Listen to the 'sort' event\r\n\t\t\tthis.on( 'sort', this.changeCollection, this );\r\n\t\t\t// Listen to the 'add' event\r\n\t\t\tthis.on( 'add', this.addOption, this );\r\n\t\t\tthis.settingModel = options.settingModel;\r\n\t\t},\r\n\r\n\t\tchangeCollection: function() {\r\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'sort:options', this );\r\n\t\t},\r\n\r\n\t\taddOption: function( model, collection ) {\r\n\t\t\tmodel.set( 'settingModel', this.settingModel );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\tclassName: 'nf-error',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error',\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\trenderErrors: function() {\r\n\t\t\t\t    if ( 'undefined' != typeof that.errors ) {\r\n    \t\t\t\t\treturn that.errors[ Object.keys( errors )[0] ];\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\treturn '';\r\n \t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\tclassName: 'nf-table-row',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-default-row',\r\n\t\tid: function() {\r\n\t\t\treturn this.model.cid;\r\n\t\t},\r\n\r\n\t\tregions: {\r\n\t\t\terror: '.nf-option-error'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.settingModel = data.settingModel;\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tthis.collection = data.collection;\r\n\t\t\tthis.columns = data.columns;\r\n\t\t\tthis.parentView = data.parentView;\r\n\t\t\tthis.model.on( 'change:errors', this.renderErrors, this );\r\n\r\n\t\t\t// Removed because the re-render was breaking tag insertion for merge tags.\r\n\t\t\t// this.model.on( 'change', this.render, this );\r\n\r\n\t\t\tif ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\r\n\t\t\t\tthis.template = '#' + this.settingModel.get( 'tmpl_row' );\r\n\t\t\t}\r\n\r\n\t\t\tthis.hasErrors = false;\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\t\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t\tthis.model.off( 'change:errors', this.renderErrors );\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\t/*\r\n\t\t\t * We want to escape any HTML being output for our label.\r\n\t\t\t */\r\n\t\t\tif ( this.model.get( 'label' ) ) {\r\n\t\t\t\tvar label = this.model.get( 'label' );\r\n\t\t\t\tthis.model.set( 'label', _.escape( label ), { silent: true } );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\t/*\r\n\t\t\t * We want to unescape any HTML being output for our label.\r\n\t\t\t */\r\n\t\t\tif ( this.model.get( 'label' ) ) {\r\n\t\t\t\tvar label = this.model.get( 'label' );\r\n\t\t\t\tthis.model.set( 'label', _.unescape( label ), { silent: true } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tif ( this.model.get( 'new' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( 'input:first' ).focus();\r\n\t\t\t\tthis.model.set( 'new', false );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change .setting': 'changeOption',\r\n\t\t\t'click .nf-delete': 'deleteOption',\r\n\t\t\t'keyup': 'keyupOption'\r\n\t\t},\r\n\r\n\t\tchangeOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\r\n\t\t},\r\n\r\n\t\tdeleteOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tkeyupOption: function( e ) {\r\n\t\t\tthis.maybeAddOption( e );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\r\n\t\t},\r\n\r\n\t\tmaybeAddOption: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode ) {\r\n\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\r\n\t\t\t\tjQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trenderErrors: function() {\r\n\t\t\t\r\n\t\t\t// if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\r\n\t\t\t// \treturn false;\r\n\t\t\t// }\r\n\r\n\t\t\t/*\r\n\t\t\t * We don't want to redraw the entire row, which would remove focus from the eq textarea,\r\n\t\t\t * so we add and remove error classes manually.\r\n\t\t\t */\r\n\t\t\tif ( 0 == Object.keys( this.model.get( 'errors' ) ) && this.hasErrors ) {\r\n\t\t\t\tthis.error.empty();\r\n\t\t\t\tjQuery( this.el ).removeClass( 'nf-error' );\r\n\t\t\t} else {\r\n\t\t\t\tthis.hasErrors = true;\r\n\t\t\t\tthis.error.show( new ErrorView( { model: this.model } ) );\r\n\t\t\t\tjQuery( this.el ).addClass( 'nf-error' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\tgetColumns: function() {\r\n\t\t\t\t\treturn that.columns;\r\n\t\t\t\t},\r\n\t\t\t\trenderOptions: function( column, value ) {\r\n\r\n\t\t\t\t\tif( 'undefined' == typeof that.options.columns[ column ] ) return;\r\n\r\n\t\t\t\t\tvar html = '';\r\n\t\t\t\t\t_.each( that.options.columns[ column ].options, function( option ){\r\n\t\t\t\t\t\tvar selected = ( value == option.value ) ? ' selected' : '';\r\n\t\t\t\t\t\thtml += '<option value=\"' + option.value + '\"' +  selected + '>' + option.label + '</option>';\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn html;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'tr',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-wrap',\r\n\t\tchildView: listOptionView,\r\n\t\temptyView: listEmptyView,\r\n\t\treorderOnSort: false,\r\n\r\n\t\tinitialize: function( data ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * Our options are stored in our database as objects, not collections.\r\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n\t\t\t */ \r\n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\r\n\r\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\r\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\r\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\r\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\r\n\t\t\t}\r\n\r\n\t\t\tthis.collection = optionCollection;\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\t\t\r\n\t\t\tvar that = this;\r\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\r\n\t\t\t\thandle: '.handle',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\r\n\t\t\t\tforcePlaceholderSize: true,\r\n\t\t\t\topacity: 0.95,\r\n\t\t\t\ttolerance: 'pointer',\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\r\n            \r\n\t\t\tvar importLink = jQuery( this.el ).find( '.nf-open-import-tooltip' );\r\n\t\t\tvar jBox = jQuery( importLink ).jBox( 'Tooltip', {\r\n                title: '<h3>Please enter your options below:</h3>',\r\n                content: jQuery( this.el ).find( '.nf-import-options' ),\r\n                trigger: 'click',\r\n                closeOnClick: 'body',\r\n                closeButton: 'box',\r\n                offset: { x: 20, y: 0 },\r\n                addClass: 'import-options',\r\n\r\n                onOpen: function() {\r\n                \tvar that = this;\r\n                \tsetTimeout( function() { jQuery( that.content ).find( 'textarea' ).focus(); }, 200 );\r\n                }\r\n            } );\r\n\r\n\t\t\tjQuery( this.el ).find( '.nf-import' ).on( 'click', { view: this, jBox: jBox }, this.clickImport );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderHeaders: function() {\r\n\t    \t\t\tvar columns = '<div>&nbsp;</div>';\r\n\t    \t\t\t_.each( this.columns, function( col ) {\r\n\t    \t\t\t\tcolumns += '<div>' + col.header + '</div>';\r\n\t    \t\t\t} );\r\n\t    \t\t\tcolumns += '<div>&nbsp;</div>';\r\n\t\t\t\t\treturn columns;\r\n\t\t\t\t},\r\n\r\n\t    \t\trenderSetting: function() {\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\r\n\t\t\t\trenderError: function() {\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\treturn this.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderFieldsetClasses: function() {\r\n\t\t\t\t\treturn that.model.get( 'name' );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcurrencySymbol: function() {\r\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-add-new': 'clickAddOption',\r\n\t\t\t'click .extra': 'clickExtra'\r\n\t\t},\r\n\r\n\t\tclickAddOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\r\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\r\n\t\t},\r\n\r\n\t\tclickImport: function( e ) {\r\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\r\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\r\n\t\t\t/*\r\n\t\t\t * Return early if we have no strings.\r\n\t\t\t */\r\n\t\t\tif ( 0 == value.length ) {\r\n\t\t\t\te.data.jBox.close();\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Split our value based on new lines.\r\n\t\t\t */\r\n\r\n\t\t\tvar lines = value.split(/\\n/);\r\n\t\t\tif ( _.isArray( lines ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Loop over \r\n\t\t\t\t */\r\n\t\t\t\t_.each( lines, function( line ) {\r\n\t\t\t\t\tvar row = line.split( ',' );\r\n\t\t\t\t\tvar label = row[0];\r\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( label, { separator: '-' } );\r\n\t\t\t\t\tvar calc = row[2] || '';\r\n\r\n\t\t\t\t\tlabel = label.trimLeft().trimRight();\r\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\r\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Add our row to the collection\r\n\t\t\t\t\t */\r\n\t\t\t\t\tvar model = e.data.view.collection.add( { label: row[0], value: value, calc: calc } );\r\n\t\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\t\tvar label = {\r\n\t\t\t\t\t\tobject: 'field',\r\n\t\t\t\t\t\tlabel: row[0],\r\n\t\t\t\t\t\tchange: 'Option Added',\r\n\t\t\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\r\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\r\n\t\t\t\t}, this );\r\n\t\t\t\t/*\r\n\t\t\t\t * Set our state to unclean so that the user can publish.\r\n\t\t\t\t */\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Error Handling Here\r\n\t\t\t\t */\r\n\t\t\t}\r\n\t\t\ttextarea.val( '' );\r\n\t\t\te.data.jBox.close();\r\n\t\t},\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Handles tasks associated with our option-repeater.\r\n * \r\n * Return our repeater child view.\r\n *\r\n * Also listens for changes to the options settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for the childView for list type fields.\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t\t\r\n\t\t\t// Listen for changes to our list options.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\r\n\r\n\t\t\t// Respond to requests related to our list options sortable.\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update an option value in our model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te          event\r\n\t\t * @param  backbone.model \tmodel      option model\r\n\t\t * @param  backbone.model \tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\r\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\r\n\t\t\tif ( 'selected' == name ) {\r\n\t\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\r\n\t\t\t\t\tvar value = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar value = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar value = jQuery( e.target ).val();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar before = model.get( name );\r\n\t\t\t\r\n\t\t\tmodel.set( name, value );\r\n\t\t\t// Trigger an update on our dataModel\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\r\n\t\t\tvar after = value;\r\n\t\t\t\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\r\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an option to our list\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\taddOption: function( collection, dataModel ) {\r\n\t\t\tvar modelData = {\r\n\t\t\t\torder: collection.length,\r\n\t\t\t\tnew: true,\r\n\t\t\t\toptions: {}\r\n\t\t\t};\r\n\t\t\t_.each( collection.settingModel.get( 'columns' ), function( col, key ) {\r\n\t\t\t\tmodelData[ key ] = col.default;\r\n\r\n\t\t\t\tif( 'undefined' != typeof col.options ){\r\n\t\t\t\t\tmodelData.options[ key ] = col.options;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\tvar model = new listOptionModel( modelData );\r\n\t\t\tcollection.add( model );\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'add:option', model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete an option from our list\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param backbone.model \t\tmodel       list option model\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteOption: function( model, collection, dataModel ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\r\n\t\t\t// Add our field deletion to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\r\n\t\t\t\tdashicon: 'dismiss'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: collection\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\r\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\r\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\r\n\t\t\t\t\t\t\tdataModel.model = newModel;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tchangeModel.set( 'model', newModel );\r\n\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t} );\r\n\r\n\t\t\tcollection.remove( model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\r\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttriggerDataModel: function( model, dataModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return our list composite view to the setting collection view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tsettings model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\treturn listCompositeView;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\r\n\t\t * @param  backbone.view \tsetting  \tSetting view\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\r\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: setting.collection,\r\n\t\t\t\tobjModels: []\r\n\t\t\t};\r\n\r\n\t\t\t_.each( newOrder, function( cid, index ) {\r\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\r\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\r\n\t\t\t\toptionModel.set( 'order', index );\r\n\t\t\t\tvar newPos = index;\r\n\r\n\t\t\t\tdata.objModels.push( {\r\n\t\t\t\t\tmodel: optionModel,\r\n\t\t\t\t\tattr: 'order',\r\n\t\t\t\t\tbefore: oldPos,\r\n\t\t\t\t\tafter: newPos\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\tsetting.collection.sort( { silent: true } );\r\n\t\t\t\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\r\n\t\t\t\tdashicon: 'sort'\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\r\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop sorting our list options, reset our item opacity.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopOptionSortable: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Objects ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartOptionSortable: function( ui ) {\r\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Convert settings from an array/object to a collection/model\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.Model dataModel\r\n\t\t * @param  Backbone.Model settingModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tconvertSettings: function( dataModel, settingModel ) {\r\n\t\t\t/*\r\n\t\t\t * Our options are stored in our database as objects, not collections.\r\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n\t\t\t */ \r\n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\r\n\r\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\r\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\r\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\r\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from a field currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our fields.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our fields collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n            _.each( fieldCollection.models, function( field ) {\r\n\t\t\t\tfield.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\r\n\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\t\t\t\r\n\t\t\t// Responds to requests for our collection.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t},\r\n\r\n\t\tgetSettingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual Credit Card Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\r\n        },\r\n\r\n        dropCreditCardField: function( fieldModel ) {\r\n\r\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\r\n\r\n                var order = fieldModel.get( 'order' );\r\n\r\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\r\n\r\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\r\n\r\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\r\n                    var newField = {\r\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\r\n                        type: type,\r\n                        label: fieldType.get( 'nicename' ),\r\n                        order: order\r\n                    };\r\n\r\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        stageCreditCardField: function( model ) {\r\n\r\n            if( 'creditcard' == model.get( 'slug' ) ) {\r\n\r\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\r\n\r\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\r\n                    nfRadio.channel('fields').request('add:stagedField', type );\r\n                });\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual List Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\r\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\r\n            \r\n            /*\r\n             * When we init our model, convert our options from an array of objects to a collection of models.\r\n             */\r\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\r\n        },\r\n\r\n        updateOptionLabel: function( e, model, dataModel, settingModel, optionView ) {\r\n\r\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\r\n\r\n            if( model.get( 'manual_value' ) ) return;\r\n\r\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\r\n\r\n            model.set( 'value', value );\r\n            model.trigger( 'change', model );\r\n\r\n            // Set focus on value input\r\n            jQuery( optionView.el ).find( '[data-id=\"value\"]' ).focus().select();\r\n        },\r\n\r\n        updateOptionValue: function( e, model, dataModel, settingModel, optionView ) {\r\n\r\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\r\n\r\n            model.set( 'manual_value', true );\r\n            \r\n            // Set focus on calc input\r\n            jQuery( optionView.el ).find( '[data-id=\"calc\"]' ).focus().select();\r\n        },\r\n\r\n        convertOptions: function( fieldModel ) {\r\n            /*\r\n             * Our options are stored in our database as objects, not collections.\r\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n             */ \r\n            var options = fieldModel.get( 'options' );\r\n\r\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\r\n\r\n            if ( false == options instanceof Backbone.Collection ) {\r\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\r\n                options.add( fieldModel.get( 'options' ) );\r\n                fieldModel.set( 'options', options, { silent: true } );\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual Credit Card Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldPassword',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.addField );\r\n        },\r\n\r\n        addField: function( model ) {\r\n\r\n            if( 'password' == model.get( 'type' ) ) {\r\n\r\n                var order = model.get( 'order' );\r\n\r\n                var confirm = this.insertField( 'passwordconfirm', order + 1 );\r\n\r\n                confirm.set( 'confirm_field', model.get( 'key' ) );\r\n            }\r\n        },\r\n\r\n        insertField: function( type, order ) {\r\n            var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\r\n            var newField = {\r\n                id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\r\n                type: type,\r\n                label: fieldType.get( 'nicename' ),\r\n                order: order\r\n            };\r\n\r\n            return nfRadio.channel('fields').request('add', newField );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldQuantity',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\r\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\r\n\t\t\t\tsettingModel.set( 'options', productFields );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetProductFields: function( settingModel ) {\r\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\r\n\t\t\t// Update our dataModel with all of our product fields.\r\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields.models, function( field ) {\r\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\r\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\treturn productFields;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldShipping',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\r\n\t\t},\r\n\r\n\t\taddMask: function( settingModel, dataModel, view ) {\r\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\r\n\t\t\t\tjQuery( this ).autoNumeric({\r\n\t\t\t\t\taSign: '$', // TODO: Use form setting\r\n\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t});\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * When we add a new field, update its key.\r\n *\r\n * When we change the key, update any refs to the key.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/key',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When we add a field, update its key.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\r\n\r\n\t\t\t// When we edit a label, update our key.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\r\n\r\n\t\t\t// When we edit a key, check for places that key might be used.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\r\n\r\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a key to our new field model.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param backbone.model model new field model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tnewFieldKey: function( model ) {\r\n\t\t\tvar d = new Date();\r\n\t\t\tvar n = d.valueOf();\r\n\t\t\tvar key = this.slugify( model.get( 'type' ) + '_' + n );\r\n\r\n\t\t\tmodel.set( 'key', key, { silent: true } );\r\n\r\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\r\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateLabel: function( model ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\r\n\t\t\t */\r\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\r\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\r\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\r\n\t\t\t\t *\r\n\t\t\t\t */\r\n\t\t\t\tdelete model.changed.label;\r\n\t\t\t\tvar d = new Date();\r\n\t\t\t\tvar n = d.valueOf();\r\n\t\t\t\tvar key = this.slugify( model.get( 'label' ) + '_' + n );\r\n\t\t\t\tmodel.set( 'key', key );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field key is updated, find any merge tags using the key and update them.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model model field model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateKey: function( dataModel ) {\r\n\t\t\tvar key = dataModel.get( 'key' );\r\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\r\n\t\t\tthis.setError( key, dataModel );\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, settingModel, dataModel ) {\r\n\t\t\tdataModel.set( 'manual_key', true );\r\n\t\t\tthis.settingModel = settingModel;\r\n\t\t\tvar key = jQuery( e.target ).val();\r\n\t\t\tthis.setError( key, dataModel );\r\n\t\t},\r\n\r\n\t\tsetError: function( key, dataModel ) {\r\n\t\t\tvar error = false;\r\n\t\t\tif ( '' == jQuery.trim( key ) ) {\r\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\r\n\t\t\t} else if ( key != key.toLowerCase() ) {\r\n\t\t\t\terror = 'Field keys must be lowercase.';\r\n\t\t\t} else if ( key != key.replace( ' ', '_' ) ) {\r\n\t\t\t\terror = 'Field keys must cannot use spaces. Separate with \"_\" instead.';\r\n\t\t\t} else if ( '_' == key.slice( -1 ) ) {\r\n\t\t\t\terror = 'Field keys cannot end with a \"_\"';\r\n\t\t\t} else if ( key != this.slugify( key ) ) {\r\n\t\t\t\terror = 'Invalid Format.';\r\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\r\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\r\n\t\t\t}\r\n\r\n\t\t\tif ( error ) {\r\n\t\t\t\tthis.settingModel.set( 'error', error );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\r\n\t\t\t\tthis.settingModel.set( 'error', false );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tkeyExists: function( key, dataModel ) {\r\n\t\t\tvar newKey = this.slugify( key );\r\n\t\t\tif ( 0 != newKey.length ) {\r\n\t\t\t\tkey = newKey;\r\n\t\t\t}\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tvar x = 1;\r\n\t\t\tvar testKey = key;\r\n\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\r\n\t\t\t\t\ttestKey = key + '_' + x;\r\n\t\t\t\t\tx++;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tkey = testKey;\r\n\r\n\t\t\treturn key;\r\n\t\t},\r\n\r\n\t\tslugify: function( string ){\r\n\t\t\treturn jQuery.slugify( string, { separator: '_' } )\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Creates notices for our fields domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/notices',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\r\n\t\t},\r\n\r\n\t\taddStagedField: function( model ) {\r\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles mobile-specific JS for our fields domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/mobile',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the start of our sorting.\r\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\r\n\t\t\t// Listen for when we start sorting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\r\n\t\t\t// Listen for when we stop sorting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\r\n\t\t},\r\n\r\n\t\tinitWiggle: function( view ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\r\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartWiggle: function( ui ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\r\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstopWiggle: function( ui ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\r\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/savedFields',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tignoreAttributes: [\r\n\t\t\t'editActive',\r\n\t\t\t'order',\r\n\t\t\t'saved',\r\n\t\t\t'jBox'\r\n\t\t],\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\r\n\t\t\t// Listen to clicks on our add saved field button.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\r\n\t\t},\r\n\r\n\t\tupdateField: function( dataModel ) {\r\n\t\t\tif ( dataModel.get( 'saved' ) ) {\r\n\t\t\t\t\r\n\t\t\t\tvar modified = false;\r\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t_.each( changedAttributes, function( changed ) {\r\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\r\n\t\t\t\t\t\tmodified = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\t\r\n\t\t\t\tif ( modified ) {\r\n\t\t\t\t\tdataModel.set( 'saved', false );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclickAddSavedField: function( e, dataModel ) {\r\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\r\n\r\n\t\t\tvar fieldData = modelClone.attributes;\r\n\t\t\tfieldData.saved = true;\r\n\r\n\t\t\tdelete fieldData.jBox;\r\n\t\t\tdelete fieldData.editActive;\r\n\t\t\tdelete fieldData.created_at;\r\n\t\t\tdelete fieldData.order;\r\n\t\t\tdelete fieldData.id;\r\n\t\t\tdelete fieldData.formID;\r\n\t\t\tdelete fieldData.parent_id;\r\n\t\t\t\r\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\r\n\t\t\tvar newType = _.clone( type.attributes );\r\n\r\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\r\n\t\t\tconsole.log( nicename );\r\n\t\t\tnewType.nicename = nicename;\r\n\t\t\tfieldData.label = nicename;\r\n\t\t\tfieldData.nicename = nicename;\r\n\t\t\tdataModel.set( 'addSavedLoading', true );\r\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\r\n\r\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\r\n\t\t\t\tresponse = JSON.parse( response );\r\n\t\t\t\tnewType.id = response.data.id;\r\n\t\t\t\tnewType.nicename = nicename;\r\n\t\t\t\tnewType.settingDefaults = fieldData;\r\n\r\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\r\n\t\t\t\tvar newModel = typeCollection.add( newType );\r\n\r\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\r\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\r\n\r\n\t\t\t\t// dataModel.set( 'type', response.data.id );\r\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\r\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\r\n\t\t\t\tdataModel.get( 'jBox' ).close();\r\n\t\t\t\t// dataModel.set( 'saved', true );\r\n\r\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a datepicker setting, add our datepicker.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\r\n\t\t},\r\n\r\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\r\n\t\t\tvar dateObject = pikadayResponsive( jQuery( view.el ).find( '.setting' )[0] );\t\t\t\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\t\t\t// console.log( 'render!' );\r\n\t\t},\r\n\r\n\t\tgetProductFields: function( settingModel ) {\r\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\r\n\t\t\t// Update our dataModel with all of our product fields.\r\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields.models, function( field ) {\r\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\r\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\treturn productFields;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\r\n *\r\n * Loops over our preloaded data and adds that to our action type collection\r\n *\r\n * Also responds to requests for data about action types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\r\n\t\t\t/*\r\n\t\t\t * Instantiate \"installed\" actions collection.\r\n\t\t\t */\r\n\t\t\tthis.installedActions = new TypeCollection(\r\n\t\t\t\t_.filter( actionTypeData, function( type ) {\r\n\t\t\t\t\treturn type.section == 'installed';\r\n\t\t\t\t\t} \r\n\t\t\t\t),\r\n\t\t\t\t{\r\n\t\t\t\t\tslug: 'installed',\r\n\t\t\t\t\tnicename: nfi18n.installed\r\n\t\t\t\t} \r\n\t\t\t);\r\n\r\n\t\t\tthis.availableActions = new TypeCollection(\r\n\t\t\t\t_.filter( actionTypeData, function( type ) {\r\n\t\t\t\t\treturn type.section == 'available';\r\n\t\t\t\t\t} \r\n\t\t\t\t),\r\n\t\t\t\t{\r\n\t\t\t\t\tslug: 'available',\r\n\t\t\t\t\tnicename: nfi18n.available\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetType: function( id ) {\r\n\t\t\t// Search our installed actions first\r\n\t\t\tvar type = this.installedActions.get( id );\r\n\t\t\tif ( ! type ) {\r\n\t\t\t\ttype = this.availableActions.get( id );\r\n\t\t\t}\r\n        \treturn type;\r\n        },\r\n\r\n        /**\r\n         * Return the installed action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetInstalledActions: function() {\r\n        \treturn this.installedActions;\r\n        },\r\n\r\n        /**\r\n         * Return the available action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetAvailableActions: function() {\r\n        \treturn this.availableActions;\r\n        },\r\n\r\n        /**\r\n         * Add a field type to our staging area when the field type button is clicked.\r\n         *\r\n         * @since 3.0\r\n         * @param Object e event\r\n         * @return void\r\n         */\r\n        addStagedField: function( e ) {\r\n        \tvar type = jQuery( e.target ).data( 'id' );\r\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n        },\r\n\r\n        /**\r\n         * Return our field type settings sections\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection field type settings sections\r\n         */\r\n        getTypeSections: function() {\r\n            return this.fieldTypeSections;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Model that represents our form action.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/actionModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Action',\r\n\t\t\tobjectDomain: 'actions',\r\n\t\t\teditActive: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.on( 'change', this.changeSetting, this );\r\n\r\n\t\t\t// Get our parent field type.\r\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\r\n\r\n\t\t\tif( 'undefined' == typeof actionType ) return;\r\n\r\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\r\n\t\t\t\tif ( ! that.get( key ) ) {\r\n\t\t\t\t\tthat.set( key, val, { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Trigger an init event on three channels:\r\n\t\t\t * \r\n\t\t\t * actions\r\n\t\t\t * action-type\r\n\t\t\t *\r\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\r\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options ) {\r\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\r\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\r\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our action models. \r\n * This is the actual action data created by the user.\r\n *\r\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: actionModel,\r\n\t\tcomparator: 'order',\r\n\t\ttmpNum: 1,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.on( 'add', this.addAction, this );\r\n\t\t\tthis.on( 'remove', this.removeAction, this );\r\n\t\t\tthis.newIDs = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we add a field, push the id onto our new action property.\r\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\taddAction: function( model ) {\r\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we remove a field, push the id onto our removed action property.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\tremoveAction: function( model ) {\r\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Handles interactions with our actions collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our action collection from our localized form data\r\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\r\n\t\t\tthis.collection.tmpNum = 1;\r\n\r\n\t\t\tif ( 0 != this.collection.models.length ) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t_.each( this.collection.models, function( action ) {\r\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\r\n\t\t\t\t\t\tthat.collection.tmpNum++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\r\n\t\t\tthis.collection.removedIDs = {};\r\n\r\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\r\n\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetAction: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \taction data to insert\r\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\r\n\t\t */\r\n\t\taddAction: function( data, silent ) {\r\n\t\t\tsilent = silent || false;\r\n\r\n\t\t\tif ( false === data instanceof Backbone.Model ) {\r\n\t\t\t\tvar model = new actionModel( data );\r\n\t\t\t} else {\r\n\t\t\t\tvar model = data;\r\n\t\t\t}\r\n\r\n\t\t\tthis.collection.add( model, { silent: silent } );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\r\n\t\t\treturn model;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a action from our collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteAction: function( model ) {\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Return a new tmp id for our actions.\r\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return string\r\n\t\t */\r\n\t\tgetTmpID: function() {\r\n\t\t\tvar tmpNum = this.collection.tmpNum;\r\n\t\t\tthis.collection.tmpNum++;\r\n\t\t\treturn 'tmp-' + tmpNum;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\r\n\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from a action currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - Edit Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our actions.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our actions collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n            _.each( actionCollection.models, function( action ) {\r\n\t\t\t\taction.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Handles clicks and dragging for our action types.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\r\n\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \taction data to insert\r\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\r\n\t\t */\r\n\t\taddAction: function( type ) {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\r\n\t\t\t\ttype: type.get( 'id' ),\r\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\r\n\t\t\t}\r\n\r\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Action',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the logic for our action type draggables.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/typeDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our action type draggables and run the appropriate function.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging:\r\n\t\t * get our drawer element\r\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\r\n\t\t * get our main element\r\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\r\n\t\t * set our dragging helper clone\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return {[type]}         [description]\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t},\r\n\r\n\t\tgetCurrentDraggableHelperClone: function() {\r\n\t\t\treturn this.draggableHelperClone;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the logic for our action type droppable.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/droppable',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\r\n\t\t},\r\n\r\n\t\tdropActionType: function( e, ui ) {\r\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\r\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\r\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our action type\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/typeModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our action type models. \r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: actionTypeModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Filters our action type collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our change filter event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Filter our action types in the add new action drawer\r\n\t\t * \r\n\t\t * Takes a search string and finds any action types that match either the name or alias.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string\t search \tstring being searched for\r\n\t\t * @param  object \t e      \tKeyup event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tfilterActionTypes: function( search, e ) {\r\n\r\n\t\t\t// Make sure that we aren't dealing with an empty string.\r\n\t\t\tif ( '' != jQuery.trim( search ) ) {\r\n\r\n        \t\tvar filteredInstalled = [];\r\n        \t\t/**\r\n        \t\t * Call the function that actually filters our collection,\r\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\r\n        \t\t */\r\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\r\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\r\n        \t\t\tfilteredInstalled.push( model );\r\n        \t\t} );\r\n\r\n        \t\tvar filteredAvailable = [];\r\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\r\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\r\n        \t\t\tfilteredAvailable.push( model );\r\n        \t\t} );\r\n\r\n        \t\t// Create a new Action Type Section collection with the filtered array.\r\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\r\n        \t\tnewInstalled.slug = 'installed';\r\n        \t\tnewInstalled.nicename = 'Installed';\r\n\r\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\r\n        \t\tnewAvailable.slug = 'available';\r\n        \t\tnewAvailable.nicename = 'Available';\r\n\r\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\r\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\r\n        \t\tif ( e.addObject ) {\r\n        \t\t\tif ( 0 < newInstalled.length ) {\r\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\r\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n        \t\t\t}\r\n        \t\t}\r\n        \t} else {\r\n        \t\t// Clear our filter if the search text is empty.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Search our action type collection for the search string.\r\n         * \r\n         * @since  3.0\r\n         * @param  string\t search \tstring being searched for\r\n         * @return backbone.collection\r\n         */\r\n        filterCollection: function( search, collection ) {\r\n        \tsearch = search.toLowerCase();\r\n        \t/*\r\n        \t * Backbone collections have a 'filter' method that loops through every model,\r\n        \t * waiting for you to return true or false. If you return true, the model is kept.\r\n        \t * If you return false, it's removed from the filtered result.\r\n        \t */\r\n\t\t\tvar filtered = collection.filter( function( model ) {\r\n\t\t\t\tvar found = false;\r\n\t\t\t\t\r\n\t\t\t\t// If we match either the ID or nicename, return true.\r\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\r\n\t\t\t\t */\r\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\r\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\r\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we match any of the aliases, return true.\r\n\t\t\t\tif ( model.get( 'alias' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\r\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn found;\r\n\t\t\t} );\r\n\r\n\t\t\t// Return our filtered collection.\r\n\t\t\treturn filtered;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/newsletterList',[], function( ) {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\r\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\r\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\r\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\r\n        },\r\n\r\n        defaultFields: function( settingModel, dataModel ) {\r\n            this.maybeRenderFields( dataModel, settingModel );\r\n            this.maybeRenderGroups( dataModel, settingModel );\r\n        },\r\n\r\n        registerFieldsListener: function ( model ) {\r\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\r\n        },\r\n\r\n        registerGroupsListener: function ( model ) {\r\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\r\n        },\r\n\r\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\r\n\r\n            var data = {\r\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\r\n                security: nfAdmin.ajaxNonce\r\n            };\r\n\r\n            var that = this;\r\n            jQuery( e.srcElement ).addClass( 'spin' );\r\n            jQuery.post( ajaxurl, data, function( response ){\r\n                var response = JSON.parse( response );\r\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\r\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\r\n            }).always( function() {\r\n                jQuery( e.srcElement ).removeClass( 'spin' );\r\n            });\r\n        },\r\n\r\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\r\n            settingModel.set( 'options', lists );\r\n            settingView.render();\r\n        },\r\n\r\n        maybeRenderFields: function( dataModel, settingModel ) {\r\n\r\n            if( 'undefined' == typeof settingModel ) return;\r\n\r\n            var selectedList = dataModel.get( 'newsletter_list' );\r\n            var lists = settingModel.get( 'options' );\r\n            _.each( lists, function( list ) {\r\n                if ( selectedList == list.value ) {\r\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\r\n                }\r\n            } );\r\n\r\n            dataModel.set( 'newsletter_list_fields', 0 );\r\n        },\r\n\r\n        maybeRenderGroups: function( dataModel, settingModel ) {\r\n            if( 'undefined' == typeof settingModel ) return;\r\n\r\n            var selectedList = dataModel.get( 'newsletter_list' );\r\n            var lists = settingModel.get( 'options' );\r\n            _.each( lists, function( list ) {\r\n                if ( selectedList == list.value ) {\r\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\r\n                }\r\n            } );\r\n\r\n            dataModel.set( 'newsletter_list_fields', 0 );\r\n        },\r\n\r\n        updateFieldMapping: function( fields ) {\r\n           var settings = this.get( 'settings' );\r\n            settings.reset();\r\n            _.each( fields, function( field ){\r\n\r\n                settings.add({\r\n                    name: field.value,\r\n                    type: 'textbox',\r\n                    label: field.label,\r\n                    width: 'full',\r\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\r\n                });\r\n            });\r\n            this.set( 'settings', settings );\r\n        },\r\n\r\n        updateInterestGroups: function( groups ) {\r\n            var settings = this.get( 'settings' );\r\n            settings.reset();\r\n            _.each( groups, function( group ){\r\n\r\n                settings.add({\r\n                    name: group.value,\r\n                    type: 'toggle',\r\n                    label: group.label,\r\n                    width: 'full',\r\n                });\r\n            });\r\n            this.set( 'settings', settings );\r\n        },\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\r\n\n","/**\r\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\r\n *\r\n * Loops over our preloaded data and adds that to our form setting type collection\r\n *\r\n * Also responds to requests for data about form setting types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/types',[\r\n\t\t'models/app/typeCollection'\r\n\t],\r\n\tfunction(\r\n\t\tTypeCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Create our field type collection\r\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetType: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n        },\r\n\r\n        /**\r\n         * Return the installed action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetCollection: function() {\r\n        \treturn this.collection;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Model that represents our form settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Form Settings\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/advanced/settingsModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Form Setting',\r\n\t\t\teditActive: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.bind( 'change', this.changeSetting, this );\r\n\t\t\t/*\r\n\t\t\t * Check to see if we have any setting defaults to set.\r\n\t\t\t */\r\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\r\n\t\t\t_.each( formSettings.models, function( settingModel ) {\r\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\r\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\r\n\t\t\t}, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Handles interactions with our form settings collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our action collection from our localized form data\r\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\r\n\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\r\n\t\t},\r\n\r\n\t\tgetSettings: function() {\r\n\t\t\treturn this.model;\r\n\t\t},\r\n\r\n\t\tupdateSetting: function( name, value, silent ) {\r\n\t\t\tsilent = silent || false;\r\n\t\t\tthis.model.set( name, value, { silent: silent } );\r\n\t\t},\r\n\r\n\t\tgetSetting: function( name ) {\r\n\t\t\treturn this.model.get( name );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\r\n\t\t\t\t\t\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\r\n\t\t\t// Responds to requests for our setting collection\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t},\r\n\r\n\t\tgetSettingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from form settings currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our fields.\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our fields collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\r\n            _.each( collection.models, function( field ) {\r\n\t\t\t\tfield.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Listens for clicks on our form settings sections.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e, typeModel ) {\r\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\r\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\r\n\t\t\tif ( ! preventClose ) {\r\n\t\t\t\ttypeModel.set( 'editActive', true );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Makes sure that calculations don't reference calculations with a lower order.\r\n *\r\n * For example, our first caclulation can't reference the second, but the second can reference the first.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/calculations',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\r\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\r\n\t\t\t/*\r\n\t\t\t * Same thing for when our calculation option is updated\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\r\n\t\t\t/*\r\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\r\n\t\t\t * references.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, optionModel ) {\r\n\t\t\t// Get our current value\r\n\t\t\tvar value = jQuery( e.target ).val();\r\n\t\t\t// Check to see if we're editing a name or eq\r\n\t\t\tif( 'name' == jQuery( e.target ).data( 'id' ) ) { // We are editing the name field\r\n\t\t\t\t// Check to see if our name already exists.\r\n\t\t\t\tthis.checkName( value, optionModel );\r\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\r\n\t\t\t} else { // We're editing the eq\r\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\r\n\t\t\t\tthis.checkEQ( value, optionModel );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateCalc: function( optionModel ) {\r\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\r\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\r\n\t\t},\r\n\r\n\t\tsortCalc: function( optionModel, setting ) {\r\n\t\t\tthis.checkAllCalcs( setting.collection );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check to see if a calc name exists.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tname        calc name to check\r\n\t\t * @param  backbone.model \toptionModel \r\n\t\t * @return void\r\n\t\t */\r\n\t\tcheckName: function( name, optionModel, silent ) {\r\n\t\t\tsilent = silent || true;\r\n\t\t\t// Get our current errors, if any.\r\n\t\t\tvar errors = optionModel.get( 'errors' );\r\n\t\t\t// Search our calc collection for our name\r\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\r\n\r\n\t\t\t// If the name that was passed is the same as our current name, return false.\r\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\r\n\t\t\t\tfound = [];\r\n\t\t\t}\r\n\r\n\t\t\t// If our name exists, add an errors to the option model\r\n\t\t\tif ( 0 != found.length ) {\r\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\r\n\t\t\t} else {\r\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\r\n\t\t\t\tdelete errors.nameExists;\r\n\t\t\t}\r\n\r\n\t\t\toptionModel.set( 'errors', errors );\r\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\teq          our equation\r\n\t\t * @param  backbone.model \toptionModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcheckEQ: function( eq, optionModel ) {\r\n\t\t\t// Get any current errors on our optionModel\r\n\t\t\tvar errors = optionModel.get( 'errors' );\r\n\t\t\t/*\r\n\t\t\t * We're looking for two errors:\r\n\t\t\t * - Calculations that are below the current one can't be processed.\r\n\t\t\t * - Calculations can't refer to themselves.\r\n\t\t\t */ \r\n\t\t\tvar errorSelfRef = false;\r\n\t\t\tvar errorFutureCalc = false;\r\n\t\t\t// Regex that searches for {calc:key}\r\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\r\n\t\t\t/*\r\n\t\t\t * Calcs will be an array like:\r\n\t\t\t * ['{calc:test}'], ['{calc:another}']\r\n\t\t\t * \r\n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\r\n\t\t\t */\r\n\t\t\tif ( calcs ) {\r\n\t\t\t\tvar calculations = optionModel.collection;\r\n\t\t\t\t// Maps a function to each item in our calcs array.\r\n\t\t\t\tcalcs = calcs.map( function( calc ) {\r\n\t\t\t\t\t// calc will be {calc:name}\r\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\r\n\t\t\t\t\t// Get our optionModel from our calculations collection.\r\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\r\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\r\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\r\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\r\n\t\t\t\t\t\terrorSelfRef = true;\r\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\r\n\t\t\t\t\t\t// If the calc is after this one, set an error. \r\n\t\t\t\t\t\terrorFutureCalc = true;\r\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\t// If we didn't find any self ref errors, remove the key.\r\n\t\t\tif ( ! errorSelfRef ) {\r\n\t\t\t\tdelete errors.selfRef;\r\n\t\t\t}\r\n\r\n\t\t\t// If we didn't find any future calc errors, remove the key.\r\n\t\t\tif ( ! errorFutureCalc ) {\r\n\t\t\t\tdelete errors.futureCalc;\r\n\t\t\t}\r\n\r\n\t\t\t// Set errors and trigger our optionModel change.\r\n\t\t\toptionModel.set( 'errors', errors );\r\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\r\n\r\n\t\t},\r\n\r\n\t\tcheckAllCalcs: function( collection ) {\r\n\t\t\tvar that = this;\r\n\t\t\tcollection.models.map( function( opt ) {\r\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\r\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Loads all of our controllers using Require JS.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine(\r\n\t'controllers/loadControllers',[\r\n\t\t/*\r\n\t\t * Application controllers\r\n\t\t */\r\n\t\t'controllers/app/remote',\r\n\t\t'controllers/app/drawer',\r\n\t\t'controllers/app/drawerConfig',\r\n\t\t'controllers/app/domainConfig',\r\n\t\t'controllers/app/data',\t\t\r\n\t\t'controllers/app/drawerToggleSettingGroup',\r\n\t\t'controllers/app/updateDB',\r\n\t\t'controllers/app/formData',\r\n\t\t'controllers/app/previewLink',\r\n\t\t'controllers/app/menuButtons',\r\n\t\t'controllers/app/trackChanges',\r\n\t\t'controllers/app/undoChanges',\r\n\t\t'controllers/app/publishResponse',\r\n\t\t'controllers/app/changeDomain',\r\n\t\t'controllers/app/pushstate',\r\n\t\t'controllers/app/hotkeys',\r\n\t\t'controllers/app/cleanState',\r\n\t\t'controllers/app/coreUndo',\r\n\t\t'controllers/app/cloneModelDeep',\r\n\t\t'controllers/app/getSettingChildView',\r\n\t\t'controllers/app/changeSettingDefault',\r\n\t\t'controllers/app/fieldset',\r\n\t\t'controllers/app/toggleSetting',\r\n\t\t'controllers/app/itemControls',\r\n\t\t'controllers/app/mergeTags',\r\n\t\t'controllers/app/mergeTagBox',\r\n\t\t'controllers/app/itemSettingFill',\r\n\t\t'controllers/app/confirmPublish',\r\n\t\t'controllers/app/rte',\r\n\t\t'controllers/app/settingFieldSelect',\r\n\t\t'controllers/app/settingFieldList',\r\n\t\t'controllers/app/settingHTML',\r\n\t\t'controllers/app/settingColor',\r\n\t\t'controllers/app/changeMenu',\r\n\t\t'controllers/app/mobile',\r\n\t\t'controllers/app/notices',\r\n\t\t'controllers/app/unloadCheck',\r\n\t\t'controllers/app/formContentFilters',\r\n\t\t'controllers/app/formContentGutterFilters',\r\n\t\t'controllers/app/cloneCollectionDeep',\r\n\t\t'controllers/app/trackKeyDown',\r\n\t\t'controllers/app/perfectScroll',\r\n\t\t'controllers/app/getNewSettingGroupCollection',\r\n\t\t'controllers/app/settingMedia',\r\n\t\t/*\r\n\t\t * Fields domain controllers\r\n\t\t */\r\n\t\t'controllers/fields/types',\r\n\t\t'controllers/fields/fieldTypeDrag',\r\n\t\t'controllers/fields/stagingDrag',\r\n\t\t'controllers/fields/staging',\r\n\t\t'controllers/fields/stagingSortable',\r\n\t\t'controllers/fields/filterTypes',\r\n\t\t'controllers/fields/sortable',\r\n\t\t'controllers/fields/data',\r\n\t\t'controllers/app/optionRepeater',\r\n\t\t'controllers/fields/editActive',\r\n\t\t'controllers/fields/fieldSettings',\r\n\t\t'controllers/fields/fieldCreditCard',\r\n\t\t'controllers/fields/fieldList',\r\n\t\t'controllers/fields/fieldPassword',\r\n\t\t'controllers/fields/fieldQuantity',\r\n\t\t'controllers/fields/fieldShipping',\r\n\t\t'controllers/fields/key',\r\n\t\t'controllers/fields/notices',\r\n\t\t'controllers/fields/mobile',\r\n\t\t'controllers/fields/savedFields',\r\n\t\t'controllers/fields/fieldDatepicker',\r\n\t\t'controllers/fields/fieldDisplayCalc',\r\n\r\n\t\t/*\r\n\t\t * TODO: Actions domain controllers\r\n\t\t */\r\n\t\t'controllers/actions/types',\r\n\t\t'controllers/actions/data',\r\n\t\t'controllers/actions/actionSettings',\r\n\t\t'controllers/actions/editActive',\r\n\t\t'controllers/actions/addActionTypes',\r\n\t\t'controllers/actions/typeDrag',\r\n\t\t'controllers/actions/droppable',\r\n\t\t'controllers/actions/filterTypes',\r\n\t\t'controllers/actions/newsletterList',\r\n\r\n\t\t/*\r\n\t\t * TODO: Settings domain controllers\r\n\t\t */\r\n\t\t'controllers/advanced/types',\r\n\t\t'controllers/advanced/data',\r\n\t\t'controllers/advanced/formSettings',\r\n\t\t'controllers/advanced/editActive',\r\n\t\t'controllers/advanced/clickEdit',\r\n\t\t'controllers/advanced/calculations'\r\n\t],\r\n\tfunction(\r\n\t\t/*\r\n\t\t * Application controllers\r\n\t\t */\r\n\t\tRemote,\r\n\t\tDrawer,\r\n\t\tDrawerConfig,\r\n\t\tDomainConfig,\r\n\t\tAppData,\r\n\t\tDrawerToggleSettingGroup,\r\n\t\tUpdateDB,\r\n\t\tFormData,\r\n\t\tPreviewLink,\r\n\t\tAppMenuButtons,\r\n\t\tAppTrackChanges,\r\n\t\tAppUndoChanges,\r\n\t\tAppPublishResponse,\r\n\t\tAppChangeDomain,\r\n\t\tPushstate,\r\n\t\tHotkeys,\r\n\t\tCleanState,\r\n\t\tCoreUndo,\r\n\t\tCloneModelDeep,\r\n\t\tDrawerSettingChildView,\r\n\t\tChangeSettingDefault,\r\n\t\tFieldset,\r\n\t\tToggleSetting,\r\n\t\tItemControls,\r\n\t\tMergeTags,\r\n\t\tMergeTagsBox,\r\n\t\tItemSettingFill,\r\n\t\tConfirmPublish,\r\n\t\tRTE,\r\n\t\tSettingFieldSelect,\r\n\t\tSettingFieldList,\r\n\t\tSettingHTML,\r\n\t\tSettingColor,\r\n\t\tChangeMenu,\r\n\t\tAppMobile,\r\n\t\tAppNotices,\r\n\t\tAppUnloadCheck,\r\n\t\tFormContentFilters,\r\n\t\tFormContentGutterFilters,\r\n\t\tCloneCollectionDeep,\r\n\t\tTrackKeyDown,\r\n\t\tPerfectScroll,\r\n\t\tGetNewSettingGroupCollection,\r\n\t\tSettingMedia,\r\n\t\t/*\r\n\t\t * Fields domain controllers\r\n\t\t */\r\n\t\tFieldTypes,\r\n\t\tFieldTypeDrag,\r\n\t\tFieldStagingDrag,\r\n\t\tStagedFieldsData,\r\n\t\tStagedFieldsSortable,\r\n\t\tDrawerFilterFieldTypes,\r\n\t\tMainContentFieldsSortable,\r\n\t\tFieldData,\r\n\t\tOptionRepeater,\r\n\t\tFieldsEditActive,\r\n\t\tFieldSettings,\r\n\t\tFieldCreditCard,\r\n\t\tFieldList,\r\n\t\tFieldPassword,\r\n\t\tFieldQuantity,\r\n\t\tFieldShipping,\r\n\t\tFieldKey,\r\n\t\tNotices,\r\n\t\tFieldsMobile,\r\n\t\tSavedFields,\r\n\t\tFieldDatepicker,\r\n\t\tFieldDisplayCalc,\r\n\t\t/*\r\n\t\t * TODO: Actions domain controllers\r\n\t\t */\r\n\t\tActionTypes,\r\n\t\tActionData,\r\n\t\tActionSettings,\r\n\t\tActionEditActive,\r\n\t\tActionAddTypes,\r\n\t\tActionTypeDrag,\r\n\t\tActionDroppable,\r\n\t\tActionFilterTypes,\r\n\t\tActionNewsletterList,\r\n\t\t/*\r\n\t\t * TODO: Settings domain controllers\r\n\t\t */\r\n\t\tSettingTypes,\r\n\t\tSettingData,\r\n\t\tFormSettings,\r\n\t\tSettingsEditActive,\r\n\t\tSettingsClickEdit,\r\n\t\tAdvancedCalculations\r\n\t\t\r\n\t) {\r\n\t\tvar controller = Marionette.Object.extend( {\r\n\t\t\tinitialize: function() {\r\n\t\t\t\t/*\r\n\t\t\t\t * Application controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew FormContentFilters();\r\n\t\t\t\tnew FormContentGutterFilters();\r\n\t\t\t\tnew Hotkeys();\r\n\t\t\t\tnew Remote();\r\n\t\t\t\tnew Drawer();\r\n\t\t\t\tnew DrawerConfig();\r\n\t\t\t\tnew DomainConfig();\r\n\t\t\t\tnew DrawerToggleSettingGroup();\r\n\t\t\t\tnew PreviewLink();\r\n\t\t\t\tnew AppMenuButtons();\r\n\t\t\t\tnew AppTrackChanges();\r\n\t\t\t\tnew AppUndoChanges();\r\n\t\t\t\tnew AppPublishResponse();\r\n\t\t\t\tnew AppChangeDomain();\r\n\t\t\t\tnew CleanState();\r\n\t\t\t\tnew CoreUndo();\r\n\t\t\t\tnew CloneModelDeep();\r\n\t\t\t\tnew ItemControls();\r\n\t\t\t\tnew ConfirmPublish();\r\n\t\t\t\tnew RTE();\r\n\t\t\t\tnew SettingFieldSelect();\r\n\t\t\t\tnew SettingFieldList();\r\n\t\t\t\tnew SettingHTML();\r\n\t\t\t\tnew SettingColor();\r\n\t\t\t\tnew SettingMedia();\r\n\t\t\t\tnew ChangeMenu();\r\n\t\t\t\tnew AppMobile();\r\n\t\t\t\tnew AppNotices();\r\n\t\t\t\tnew AppUnloadCheck();\r\n\t\t\t\tnew UpdateDB();\r\n\t\t\t\tnew CloneCollectionDeep();\r\n\t\t\t\tnew TrackKeyDown();\r\n\t\t\t\tnew PerfectScroll();\r\n\t\t\t\tnew GetNewSettingGroupCollection();\r\n\t\t\t\t// new Pushstate();\r\n\t\t\t\t/*\r\n\t\t\t\t * Fields domain controllers\r\n\t\t\t\t * \r\n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\r\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\r\n\t\t\t\t */\r\n\t\t\t\tnew Fieldset();\r\n\t\t\t\tnew OptionRepeater();\r\n\r\n\t\t\t\tnew FieldTypes();\r\n\t\t\t\tnew FieldTypeDrag();\r\n\t\t\t\tnew FieldStagingDrag();\r\n\t\t\t\tnew StagedFieldsData();\r\n\t\t\t\tnew StagedFieldsSortable();\r\n\t\t\t\tnew DrawerFilterFieldTypes();\r\n\t\t\t\tnew MainContentFieldsSortable();\r\n\t\t\t\tnew ChangeSettingDefault();\r\n\t\t\t\tnew ToggleSetting();\r\n\t\t\t\tnew DrawerSettingChildView();\r\n\t\t\t\tnew FieldsEditActive();\r\n\t\t\t\tnew FieldSettings();\r\n\t\t\t\tnew FieldCreditCard();\r\n\t\t\t\tnew FieldList();\r\n\t\t\t\tnew FieldPassword;\r\n\t\t\t\tnew FieldQuantity();\r\n\t\t\t\tnew FieldShipping();\r\n\t\t\t\tnew FieldKey();\r\n\t\t\t\tnew Notices();\r\n\t\t\t\tnew FieldsMobile();\r\n\t\t\t\tnew SavedFields();\r\n\t\t\t\tnew FieldDatepicker();\r\n\t\t\t\tnew FieldDisplayCalc();\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Actions domain controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew ActionNewsletterList();\r\n\t\t\t\tnew ActionTypes();\r\n\t\t\t\tnew ActionData();\r\n\t\t\t\tnew ActionSettings();\r\n\t\t\t\tnew ActionEditActive();\r\n\t\t\t\tnew ActionAddTypes();\r\n\t\t\t\tnew ActionTypeDrag();\r\n\t\t\t\tnew ActionDroppable();\r\n\t\t\t\tnew ActionFilterTypes();\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Settings domain controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew SettingTypes();\r\n\t\t\t\tnew FormSettings();\r\n\t\t\t\tnew AdvancedCalculations();\r\n\t\t\t\tnew SettingData();\r\n\t\t\t\tnew SettingsEditActive();\r\n\t\t\t\tnew SettingsClickEdit();\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\r\n\t\t\t\t * AppData() was after FormData();\r\n\t\t\t\t */\r\n\t\t\t\tnew AppData();\r\n\t\t\t\tnew FieldData();\r\n\t\t\t\tnew FormData();\r\n\t\t\t\tnew MergeTags();\r\n\t\t\t\tnew MergeTagsBox();\r\n\t\t\t\tnew ItemSettingFill();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn controller;\r\n} );\r\n\n","define( 'views/fields/fieldItem',['views/app/itemControls'], function( itemControlsView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-field',\r\n\t\tdoingShortcut: false,\r\n\r\n\t\tregions: {\r\n\t\t\titemControls: '.nf-item-controls'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\r\n\t\t\tthis.model.on( 'change:label', this.render, this );\r\n\t\t\tthis.model.on( 'change:required', this.render, this );\r\n\t\t\tthis.model.on( 'change:id', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:editActive', this.render );\r\n\t\t\tthis.model.off( 'change:label', this.render );\r\n\t\t\tthis.model.off( 'change:required', this.render );\r\n\t\t\tthis.model.off( 'change:id', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\r\n\t\t\tjQuery( this.el ).disableSelection();\r\n\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\r\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\r\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\r\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderClasses: function() {\r\n\t    \t\t\tvar classes = 'nf-field-wrap';\r\n\t    \t\t\tif ( this.editActive ) {\r\n\t    \t\t\t\tclasses += ' active';\r\n\t    \t\t\t}\r\n\t    \t\t\treturn classes;\r\n\t    \t\t},\r\n\t    \t\trenderRequired: function() {\r\n\t    \t\t\tif ( 1 == this.required ) {\r\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\t    \t\tgetFieldID: function() {\r\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\r\n\t\t\t\t\t\treturn 'field-' + this.id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn this.id;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trenderIcon: function() {\r\n\t\t\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\r\n\t\t\t\t\treturn '<span class=\"fa fa-' + type.get( 'icon' ) + '\"></span>';\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\r\n\t\t\t'mousedown': 'maybeShortcut',\r\n\t\t\t'click': 'maybeClickEdit',\r\n\t\t\t'singletap': 'maybeTapEdit',\r\n\t\t\t'swipeleft': 'swipeLeft',\r\n\t\t\t'swiperight': 'swipeRight',\r\n\t\t\t'tapend': 'tapend'\r\n\t\t},\r\n\r\n\t\tmaybeClickEdit: function( e ) {\r\n\t\t\tif ( this.doingShortcut ) {\r\n\t\t\t\tthis.doingShortcut = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ':focus' ).blur();\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmaybeShortcut: function( e ) {\r\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\r\n\t\t\t/*\r\n\t\t\t * If the shift key isn't held down, return.\r\n\t\t\t */\r\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * If we are pressing D, delete this field.\r\n\t\t\t */\r\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\r\n\t\t\t\tthis.doingShortcut = true;\r\n\t\t\t\treturn false;\r\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\r\n\t\t\t\tthis.doingShortcut = true;\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmaybeTapEdit: function( e ) {\r\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tswipeLeft: function( e, touch ) {\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\r\n\t\t},\r\n\r\n\t\tswipeRight: function( e, touch ) {\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\r\n\t\t},\r\n\r\n\t\ttapend: function( e, touch ) {\r\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\r\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\r\n\t\t},\r\n\r\n\t\tremove: function(){\r\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\r\n\t\t\t\tthis.$el.hide( 'clip', function(){\r\n\t\t\t\t\tjQuery( this ).remove();\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$el.remove();\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\r\n\t\t},\r\n\r\n\t\tmouseoverItemControl: function( e ) {\r\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/mainContentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\r\n\t\t\t}\r\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\r\n\t\t\tjQuery( this.el ).parent().droppable( {\r\n\t\t\t\taccept: function( draggable ) {\r\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tactiveClass: 'nf-droppable-active',\r\n\t\t\t\thoverClass: 'nf-droppable-hover',\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\t\t\t\tdrop: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t\t},\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our form title.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/formTitle',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-header-form-title',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// When we change the model (to disable it, for example), re-render.\r\n\t\t\tthis.model.on( 'change:title', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderTitle: function(){\r\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t    \t\t\treturn _.escape( formData.get( 'settings' ).get( 'title' ) );\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Return views that might be used in extensions.\r\n * These are un-instantiated views.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Reply to requests for our field item view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\r\n\t\t\r\n\t\t\t// Reply to requests for our empty content view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\r\n\t\t\r\n\t\t\t// Reply to requests for our form title view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\r\n\t\t},\r\n\r\n\t\tgetFieldItem: function( model ) {\r\n\t\t\treturn fieldItemView;\r\n\t\t},\r\n\r\n\t\tgetMainContentEmpty: function() {\r\n\t\t\treturn mainContentEmptyView;\r\n\t\t},\r\n\r\n\t\tgetFormTitle: function() {\r\n\t\t\treturn FormTitleView;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","var nfRadio = Backbone.Radio;\r\n\r\njQuery( document ).ready( function( $ ) {\r\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\r\n\r\n\t\tvar NinjaForms = Marionette.Application.extend( {\r\n\r\n\t\t\tinitialize: function( options ) {\r\n\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tMarionette.Renderer.render = function(template, data){\r\n\t\t\t\t\tvar template = that.template( template );\r\n\t\t\t\t\treturn template( data );\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Trigger an event before we load our controllers.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\r\n\t\t\t\t// Load our controllers.\r\n\t\t\t\tvar loadControllers = new LoadControllers();\r\n\t\t\t\t// Trigger an event after we load our controllers.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\r\n\r\n\t\t\t\t// Trigger an event before we load un-instantiated views\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\r\n\t\t\t\tvar loadViews = new LoadViews();\r\n\t\t\t\t// Trigger an event after we load un-instantiated views.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\r\n\r\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\r\n\t\t\t},\r\n\r\n\t\t\tonStart: function() {\r\n\t\t\t\tvar builderView = new BuilderView();\r\n\t\t\t\t// Trigger our after start event.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\r\n\t\t\t},\r\n\r\n\t\t\ttemplate: function( template ) {\r\n\t\t\t\treturn _.template( $( template ).html(),  {\r\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\r\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\r\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\r\n\t\t\t\t\tvariable:    'data'\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\tvar ninjaForms = new NinjaForms();\r\n\t\tninjaForms.start();\r\n\t} );\r\n} );\ndefine(\"main\", function(){});\n\n"]}