{"version":3,"sources":["../../../config-wrap-start-default.js","../lib/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","models/app/settingModel.js","models/app/settingCollection.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","models/app/mergeTagLookupCollection.js","views/app/drawer/mergeTag.js","views/app/drawer/mergeTagList.js","views/app/drawer/mergeTagGroup.js","views/app/drawer/mergeTagGroupList.js","views/app/drawer/mergeTagFilter.js","views/app/drawer/mergeTagBox.js","controllers/app/mergeTagBox.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","controllers/app/getNewSettingGroupCollection.js","controllers/app/settingMedia.js","models/app/typeModel.js","models/app/typeCollection.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/emailFromSetting.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/actions/collectPaymentFields.js","controllers/actions/collectPaymentCalculations.js","controllers/actions/collectPaymentFixed.js","controllers/actions/collectPayment.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/fieldItem.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","hasProp","obj","prop","hasOwn","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","config","starMap","charAt","length","nodeIdCompat","jsSuffixRegExp","test","replace","slice","concat","splice","join","indexOf","substring","makeRequire","relName","forceSync","args","aps","arguments","push","req","apply","makeNormalize","makeLoad","depName","value","defined","callDep","waiting","defining","main","Error","splitPrefix","prefix","index","makeConfig","makeMap","handlers","Object","prototype","hasOwnProperty","plugin","parts","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","view","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","click a","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","icon","document","createElement","classList","add","outerHTML","renderClasses","classes","currentDomain","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","viewChanges","click .publish","click .viewChanges","clickPublish","clickViewChanges","changeModel","effect","times","click .nf-mobile-menu","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","click #nf-logo","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formData","formSettings","formTitleView","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","viewHeight","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","click .nf-publish","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","drawer","contentView","headerView","footerView","empty","click .nf-toggle-drawer","clickToggleDrawer","clickTag","active","mergeTagItemView","fieldCollection","updateFields","set","Backbone","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","calcMergeTagGroup","useMergeTags","_","each","remove","include","models","sectionModel","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTags","mergeTagsClone","clone","click .nf-open-drawer","click .nf-change-domain","click .nf-close-drawer","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","controller","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","closedPos","width","keys","key","getPreventClose","clearFilter","blurFilter","keyup .nf-filter","input .nf-filter","focus input","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","click .dashicons-dismiss","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","zIndex","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","click .nf-item","keydown .nf-item","mousedown .nf-item","clickFieldType","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","renderType","templateHTML","savedField","htmlFragments","createRange","createContextualFragment","appendChild","innerHTML","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","click .toggle","clickToggleGroup","renderLabel","label","groupLabel","renderArrowDir","display","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","title","renderTypeNicename","domainID","scroll","clickAddAction","open","image","section","renderStyle","actionTypeButtonView","renderNicename","slug","actionTypeCollectionView","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","filteredInstalled","filteredAvailable","click .undoSingle","undoSingle","viewChangesItem","click .undoChanges","clickUndoChanges","settingErrorView","error","renderOnChange","renderError","renderWarning","refresh","labelText","updateIcon","updateLink","labelWrapper","createTextNode","drawerOpened","drawerClosed","setting","unescape","silent","onBeforeRender","escape","next","jBox","maxWidth","theme","closeOnClick","mask","input","autoNumeric","aSep","thousandsSeparator","aDec","decimalPoint","currency","currencySymbol","currencySymbols","aSign","text","format","console","log","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","helpText","helpTextContainer","helpIcon","helpIconLink","helpTextWrapper","setAttribute","renderMergeTags","hide_merge_tags","change .setting","keyup .setting","click .setting","click .extra","changeSetting","keyUpSetting","clickSetting","itemSettingView","formName","formSubmit","titleSettingModel","addSubmitSettingModel","submitButtons","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","typeModel","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","cancel","scrollSensitivity","item","dropping","hide","renderAddButton","button","click .nf-button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","unset","x","y","outside","onCreated","setContent","attach","displayName","saved","realType","renderSavedStar","star","actionCollection","mouseover .nf-item-control","click .nf-edit-settings","singletap .nf-item-control","click .nf-item-delete","click .nf-item-duplicate","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","change input","click","maybeClickEdit","changeToggle","renderToggle","settingName","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectType","objectDomain","order","fieldType","parentType","updateFieldKey","changedAttributes","keyModel","fieldModel","parseInt","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","nfi18n","domainFormFields","Esc","Ctrl+Shift+n","Ctrl+Shift+a","Ctrl+Shift+s","Alt+Ctrl+t","up","down","Shift+return","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","Ctrl+Shift+f","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","stringify","fields","field","parent_id","deleted_fields","actions","deleted_actions","autoClose","form","exception","pluck","isNumeric","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","appDomains","preview","publish","changeCollection","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","undoAll","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","reExp","toString","newUrl","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","attr","changedAttr","after","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","optionModel","cloneModelDeep","attributes","clonedCollection","newModel","getSettingChildView","settingChildView","object","maybePreventUI","updateKey","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","clickDuplicate","tmpID","tagSectionCollection","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","updateID","replaceFieldKey","initMergeTags","mergeTagsView","jBoxes","closeOnEsc","maxHeight","onOpen","prev","onClose","tagModel","currentValue","currentPos","caret","newPos","substr","summernote","calcTag","getFieldKeyFormatCalc","fieldID","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","targetTag","oldTag","fieldMergeTag","newKey","oldKey","_previousAttributes","oldVal","oldCalcKey","newCalcKey","re","RegExp","newVal","insertTag","mergeTagView","sectionFilter","searchFilter","filter","child","term","toLowerCase","removeActive","onClick","updateTags","setActive","siblings","mergeTagGroupView","keyup input","updateFilter","event","firstFilteredTag","sections","MergeTagModel","MergeTagLookupCollection","MergeTagView","MergeTagListView","MergeTagGroupView","MergeTagGroupListView","MergeTagFilterView","MergeTagBoxLayout","old","mergeTagsButtonClick","afterAppStart","beforeRenderSetting","beforeDrawerClose","bind","selector","focusCallback","keyupCallback","closest","Radio","layout","tagCollection","mergeTagListView","mergeTagGroupListView","getRegion","rteEditor","posY","outerHeight","boxHeight","repeaterRow","scrollLeft","posX","$input","hasClass","str","caretPos","patt","match","exec","string","childNode","childNodes","node","nodeValue","range","sel","getSelection","setStart","err","collapse","removeAllRanges","addRange","$this","$inputSetting","autocomplete","$overlayElement","dataID","so","mergetags","mergetag","elementClasses","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","linkButton","mediaButton","toolbar","codemirror","lineNumbers","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","onFocus","onKeydown","onKeyup","linkMenu","replaceWith","class","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","textEl","urlEl","isNewWindowEl","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","contains","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","actionModel","lastChanged","oldValue","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","form_id","isNaN","editFormLinkText","editFormLink","editFormListItem","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","mobileDefaults","desktopDefaults","openNotice","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","SettingCollection","settingGroupModel","SettingGroupCollection","getNewSettingGroupCollection","option","typeSectionModel","TypeCollection","SectionCollection","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","style","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","search","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","found","alias","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","insertedAt","fieldWidth","dragFieldID","dragModel","oldPos","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","max_options","changeErrors","size","errorsFound","opt","listOptionModel","addOption","renderErrors","ErrorView","columns","parentView","hasErrors","click .nf-delete","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","findByIndex","getColumns","renderFieldSelect","initialOption","select","emptyContainer","selected","renderOptions","column","optionNode","listOptionView","listEmptyView","listOptionCollection","optionCollection","maybeHideNew","handle","forcePlaceholderSize","importLink","closeButton","clickImport","renderHeaders","beforeColumns","afterColumns","col","headerText","headerContainer","renderFieldsetClasses","currency_symbol","click .nf-add-new","limit","clickAddOption","textarea","trimLeft","trimRight","lines","isArray","line","row","slugify","separator","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","optionView","triggerDataModel","modelData","new","default","newOrder","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","confirm","insertField","productFields","getProductFields","addMask","newFieldKey","updateLabel","d","Date","valueOf","setError","keyExists","testKey","startWiggle","stopWiggle","initWiggle","ClassyWiggle","degrees","delay","updateField","modified","modelClone","fieldData","created_at","formID","newType","newTypeDefaults","settingDefaults","typeCollection","typeSections","addDatepicker","pikadayResponsive","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","updateFromAddress","isValidEmail","home_url_host","errorInvalidEmailFromAddress","email","dropActionType","type_slug","actionTypeModel","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","group","getFields","field_key","returnFields","sortBy","calcModels","calcs","getCalcs","returnCalcs","isEmpty","initCollectPayment","maybeClearTotal","maybeUpdateTotal","maybeError","oldName","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkDec","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calculations","targetCalc","selfRef","futureCalc","dec","errorNonIntDec","checked","Math","abs","nonIntDec","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ItemControls","MergeTags","MergeTagsBox","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","SettingMedia","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionEmailFromSetting","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","ActionCollectPaymentFields","ActionCollectPaymentCalculations","ActionCollectPaymentFixed","ActionCollectPayment","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","doingShortcut","touch","renderRequired","required","getFieldID","renderIcon","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","NinjaForms","Application","Renderer","onStart","evaluate","interpolate","variable","ninjaForms"],"mappings":"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","file":"builder.js","sourcesContent":["(function () {\n","/**\r\n * @license almond 0.3.1 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.\r\n * Available via the MIT or new BSD license.\r\n * see: http://github.com/jrburke/almond for details\r\n */\r\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\r\n//be followed.\r\n/*jslint sloppy: true */\r\n/*global setTimeout: false */\r\n\r\nvar requirejs, require, define;\r\n(function (undef) {\r\n    var main, req, makeMap, handlers,\r\n        defined = {},\r\n        waiting = {},\r\n        config = {},\r\n        defining = {},\r\n        hasOwn = Object.prototype.hasOwnProperty,\r\n        aps = [].slice,\r\n        jsSuffixRegExp = /\\.js$/;\r\n\r\n    function hasProp(obj, prop) {\r\n        return hasOwn.call(obj, prop);\r\n    }\r\n\r\n    /**\r\n     * Given a relative module name, like ./something, normalize it to\r\n     * a real name that can be mapped to a path.\r\n     * @param {String} name the relative name\r\n     * @param {String} baseName a real name that the name arg is relative\r\n     * to.\r\n     * @returns {String} normalized name\r\n     */\r\n    function normalize(name, baseName) {\r\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\r\n            foundI, foundStarMap, starI, i, j, part,\r\n            baseParts = baseName && baseName.split(\"/\"),\r\n            map = config.map,\r\n            starMap = (map && map['*']) || {};\r\n\r\n        //Adjust any relative paths.\r\n        if (name && name.charAt(0) === \".\") {\r\n            //If have a base name, try to normalize against it,\r\n            //otherwise, assume it is a top-level require that will\r\n            //be relative to baseUrl in the end.\r\n            if (baseName) {\r\n                name = name.split('/');\r\n                lastIndex = name.length - 1;\r\n\r\n                // Node .js allowance:\r\n                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\r\n                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\r\n                }\r\n\r\n                //Lop off the last part of baseParts, so that . matches the\r\n                //\"directory\" and not name of the baseName's module. For instance,\r\n                //baseName of \"one/two/three\", maps to \"one/two/three.js\", but we\r\n                //want the directory, \"one/two\" for this normalization.\r\n                name = baseParts.slice(0, baseParts.length - 1).concat(name);\r\n\r\n                //start trimDots\r\n                for (i = 0; i < name.length; i += 1) {\r\n                    part = name[i];\r\n                    if (part === \".\") {\r\n                        name.splice(i, 1);\r\n                        i -= 1;\r\n                    } else if (part === \"..\") {\r\n                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {\r\n                            //End of the line. Keep at least one non-dot\r\n                            //path segment at the front so it can be mapped\r\n                            //correctly to disk. Otherwise, there is likely\r\n                            //no path mapping for a path starting with '..'.\r\n                            //This can still fail, but catches the most reasonable\r\n                            //uses of ..\r\n                            break;\r\n                        } else if (i > 0) {\r\n                            name.splice(i - 1, 2);\r\n                            i -= 2;\r\n                        }\r\n                    }\r\n                }\r\n                //end trimDots\r\n\r\n                name = name.join(\"/\");\r\n            } else if (name.indexOf('./') === 0) {\r\n                // No baseName, so this is ID is resolved relative\r\n                // to baseUrl, pull off the leading dot.\r\n                name = name.substring(2);\r\n            }\r\n        }\r\n\r\n        //Apply map config if available.\r\n        if ((baseParts || starMap) && map) {\r\n            nameParts = name.split('/');\r\n\r\n            for (i = nameParts.length; i > 0; i -= 1) {\r\n                nameSegment = nameParts.slice(0, i).join(\"/\");\r\n\r\n                if (baseParts) {\r\n                    //Find the longest baseName segment match in the config.\r\n                    //So, do joins on the biggest to smallest lengths of baseParts.\r\n                    for (j = baseParts.length; j > 0; j -= 1) {\r\n                        mapValue = map[baseParts.slice(0, j).join('/')];\r\n\r\n                        //baseName segment has  config, find if it has one for\r\n                        //this name.\r\n                        if (mapValue) {\r\n                            mapValue = mapValue[nameSegment];\r\n                            if (mapValue) {\r\n                                //Match, update name to the new value.\r\n                                foundMap = mapValue;\r\n                                foundI = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (foundMap) {\r\n                    break;\r\n                }\r\n\r\n                //Check for a star map match, but just hold on to it,\r\n                //if there is a shorter segment match later in a matching\r\n                //config, then favor over this star map.\r\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\r\n                    foundStarMap = starMap[nameSegment];\r\n                    starI = i;\r\n                }\r\n            }\r\n\r\n            if (!foundMap && foundStarMap) {\r\n                foundMap = foundStarMap;\r\n                foundI = starI;\r\n            }\r\n\r\n            if (foundMap) {\r\n                nameParts.splice(0, foundI, foundMap);\r\n                name = nameParts.join('/');\r\n            }\r\n        }\r\n\r\n        return name;\r\n    }\r\n\r\n    function makeRequire(relName, forceSync) {\r\n        return function () {\r\n            //A version of a require function that passes a moduleName\r\n            //value for items that may need to\r\n            //look up paths relative to the moduleName\r\n            var args = aps.call(arguments, 0);\r\n\r\n            //If first arg is not require('string'), and there is only\r\n            //one arg, it is the array form without a callback. Insert\r\n            //a null so that the following concat is correct.\r\n            if (typeof args[0] !== 'string' && args.length === 1) {\r\n                args.push(null);\r\n            }\r\n            return req.apply(undef, args.concat([relName, forceSync]));\r\n        };\r\n    }\r\n\r\n    function makeNormalize(relName) {\r\n        return function (name) {\r\n            return normalize(name, relName);\r\n        };\r\n    }\r\n\r\n    function makeLoad(depName) {\r\n        return function (value) {\r\n            defined[depName] = value;\r\n        };\r\n    }\r\n\r\n    function callDep(name) {\r\n        if (hasProp(waiting, name)) {\r\n            var args = waiting[name];\r\n            delete waiting[name];\r\n            defining[name] = true;\r\n            main.apply(undef, args);\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\r\n            throw new Error('No ' + name);\r\n        }\r\n        return defined[name];\r\n    }\r\n\r\n    //Turns a plugin!resource to [plugin, resource]\r\n    //with the plugin being undefined if the name\r\n    //did not have a plugin prefix.\r\n    function splitPrefix(name) {\r\n        var prefix,\r\n            index = name ? name.indexOf('!') : -1;\r\n        if (index > -1) {\r\n            prefix = name.substring(0, index);\r\n            name = name.substring(index + 1, name.length);\r\n        }\r\n        return [prefix, name];\r\n    }\r\n\r\n    /**\r\n     * Makes a name map, normalizing the name, and using a plugin\r\n     * for normalization if necessary. Grabs a ref to plugin\r\n     * too, as an optimization.\r\n     */\r\n    makeMap = function (name, relName) {\r\n        var plugin,\r\n            parts = splitPrefix(name),\r\n            prefix = parts[0];\r\n\r\n        name = parts[1];\r\n\r\n        if (prefix) {\r\n            prefix = normalize(prefix, relName);\r\n            plugin = callDep(prefix);\r\n        }\r\n\r\n        //Normalize according\r\n        if (prefix) {\r\n            if (plugin && plugin.normalize) {\r\n                name = plugin.normalize(name, makeNormalize(relName));\r\n            } else {\r\n                name = normalize(name, relName);\r\n            }\r\n        } else {\r\n            name = normalize(name, relName);\r\n            parts = splitPrefix(name);\r\n            prefix = parts[0];\r\n            name = parts[1];\r\n            if (prefix) {\r\n                plugin = callDep(prefix);\r\n            }\r\n        }\r\n\r\n        //Using ridiculous property names for space reasons\r\n        return {\r\n            f: prefix ? prefix + '!' + name : name, //fullName\r\n            n: name,\r\n            pr: prefix,\r\n            p: plugin\r\n        };\r\n    };\r\n\r\n    function makeConfig(name) {\r\n        return function () {\r\n            return (config && config.config && config.config[name]) || {};\r\n        };\r\n    }\r\n\r\n    handlers = {\r\n        require: function (name) {\r\n            return makeRequire(name);\r\n        },\r\n        exports: function (name) {\r\n            var e = defined[name];\r\n            if (typeof e !== 'undefined') {\r\n                return e;\r\n            } else {\r\n                return (defined[name] = {});\r\n            }\r\n        },\r\n        module: function (name) {\r\n            return {\r\n                id: name,\r\n                uri: '',\r\n                exports: defined[name],\r\n                config: makeConfig(name)\r\n            };\r\n        }\r\n    };\r\n\r\n    main = function (name, deps, callback, relName) {\r\n        var cjsModule, depName, ret, map, i,\r\n            args = [],\r\n            callbackType = typeof callback,\r\n            usingExports;\r\n\r\n        //Use name if no relName\r\n        relName = relName || name;\r\n\r\n        //Call the callback to define the module, if necessary.\r\n        if (callbackType === 'undefined' || callbackType === 'function') {\r\n            //Pull out the defined dependencies and pass the ordered\r\n            //values to the callback.\r\n            //Default to [require, exports, module] if no deps\r\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\r\n            for (i = 0; i < deps.length; i += 1) {\r\n                map = makeMap(deps[i], relName);\r\n                depName = map.f;\r\n\r\n                //Fast path CommonJS standard dependencies.\r\n                if (depName === \"require\") {\r\n                    args[i] = handlers.require(name);\r\n                } else if (depName === \"exports\") {\r\n                    //CommonJS module spec 1.1\r\n                    args[i] = handlers.exports(name);\r\n                    usingExports = true;\r\n                } else if (depName === \"module\") {\r\n                    //CommonJS module spec 1.1\r\n                    cjsModule = args[i] = handlers.module(name);\r\n                } else if (hasProp(defined, depName) ||\r\n                           hasProp(waiting, depName) ||\r\n                           hasProp(defining, depName)) {\r\n                    args[i] = callDep(depName);\r\n                } else if (map.p) {\r\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\r\n                    args[i] = defined[depName];\r\n                } else {\r\n                    throw new Error(name + ' missing ' + depName);\r\n                }\r\n            }\r\n\r\n            ret = callback ? callback.apply(defined[name], args) : undefined;\r\n\r\n            if (name) {\r\n                //If setting exports via \"module\" is in play,\r\n                //favor that over return value and exports. After that,\r\n                //favor a non-undefined return value over exports use.\r\n                if (cjsModule && cjsModule.exports !== undef &&\r\n                        cjsModule.exports !== defined[name]) {\r\n                    defined[name] = cjsModule.exports;\r\n                } else if (ret !== undef || !usingExports) {\r\n                    //Use the return value from the function.\r\n                    defined[name] = ret;\r\n                }\r\n            }\r\n        } else if (name) {\r\n            //May just be an object definition for the module. Only\r\n            //worry about defining if have a module name.\r\n            defined[name] = callback;\r\n        }\r\n    };\r\n\r\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\r\n        if (typeof deps === \"string\") {\r\n            if (handlers[deps]) {\r\n                //callback in this case is really relName\r\n                return handlers[deps](callback);\r\n            }\r\n            //Just return the module wanted. In this scenario, the\r\n            //deps arg is the module name, and second arg (if passed)\r\n            //is just the relName.\r\n            //Normalize module name, if it contains . or ..\r\n            return callDep(makeMap(deps, callback).f);\r\n        } else if (!deps.splice) {\r\n            //deps is a config object, not an array.\r\n            config = deps;\r\n            if (config.deps) {\r\n                req(config.deps, config.callback);\r\n            }\r\n            if (!callback) {\r\n                return;\r\n            }\r\n\r\n            if (callback.splice) {\r\n                //callback is an array, which means it is a dependency list.\r\n                //Adjust args if there are dependencies\r\n                deps = callback;\r\n                callback = relName;\r\n                relName = null;\r\n            } else {\r\n                deps = undef;\r\n            }\r\n        }\r\n\r\n        //Support require(['a'])\r\n        callback = callback || function () {};\r\n\r\n        //If relName is a function, it is an errback handler,\r\n        //so remove it.\r\n        if (typeof relName === 'function') {\r\n            relName = forceSync;\r\n            forceSync = alt;\r\n        }\r\n\r\n        //Simulate async callback;\r\n        if (forceSync) {\r\n            main(undef, deps, callback, relName);\r\n        } else {\r\n            //Using a non-zero value because of concern for what old browsers\r\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\r\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\r\n            //If want a value immediately, use require('id') instead -- something\r\n            //that works in almond on the global level, but not guaranteed and\r\n            //unlikely to work in other AMD implementations.\r\n            setTimeout(function () {\r\n                main(undef, deps, callback, relName);\r\n            }, 4);\r\n        }\r\n\r\n        return req;\r\n    };\r\n\r\n    /**\r\n     * Just drops the config on the floor, but returns req in case\r\n     * the config return value is used.\r\n     */\r\n    req.config = function (cfg) {\r\n        return req(cfg);\r\n    };\r\n\r\n    /**\r\n     * Expose module registry for debugging and tooling\r\n     */\r\n    requirejs._defined = defined;\r\n\r\n    define = function (name, deps, callback) {\r\n        if (typeof name !== 'string') {\r\n            throw new Error('See almond README: incorrect module build, no module name');\r\n        }\r\n\r\n        //This module may not have dependencies\r\n        if (!deps.splice) {\r\n            //deps is not an array, so probably means\r\n            //an object literal or factory function for\r\n            //the value. Adjust args.\r\n            callback = deps;\r\n            deps = [];\r\n        }\r\n\r\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\r\n            waiting[name] = [name, deps, callback];\r\n        }\r\n    };\r\n\r\n    define.amd = {\r\n        jQuery: true\r\n    };\r\n}());\r\n\ndefine(\"../lib/almond\", function(){});\n\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menuItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-app-menu-item',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for domain changes and re-render when we detect one.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t\t// When we change the model (to disable it, for example), re-render.\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\t// Listen for clicks on our app menu.\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickAppMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click on a menu item, fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * We pass this.model so that we know what item was clicked.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\te event\r\n\t\t * @return return\r\n\t\t */\r\n\t\tclickAppMenu: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t\t\t\t * If we have any dashicons in our model, render them.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDashicons: function() {\r\n\t\t\t\t\tif ( ! this.dashicons ) return '';\r\n\r\n\t\t\t\t\tvar icon = document.createElement( 'span' );\r\n\t\t\t\t\ticon.classList.add( 'dashicons' );\r\n\t\t\t\t\ticon.classList.add( this.dashicons );\r\n\r\n\t\t\t\t\treturn icon.outerHTML;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * Render classes for our menu item, including active.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = this.classes;\r\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\r\n\t\t\t\t\t\tclasses += ' active';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its url.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderUrl: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '#';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its target.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderTarget: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\treturn '_blank';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '_self';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu item is disabled, output 'disabled'\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\tif ( this.disabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Collection view that takes our app menu items and renders an individual view for each.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: appMenuItemView,\r\n\r\n\t\t/**\r\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders the action buttons to the right of the app menu. i.e. Publish\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/menuButtons',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'span',\r\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\r\n\t    \t\t/**\r\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\r\n\t    \t\t *\r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\trenderPublish: function() {\r\n\t    \t\t\tif ( that.publishWidth ) {\r\n\t    \t\t\t\tthis.publishWidth = that.publishWidth + 'px';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\tthis.publishWidth = 'auto';\r\n\t    \t\t\t}\r\n\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\r\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\r\n\t    \t\t\t}\r\n\t    \t\t\treturn template( this );\r\n\t    \t\t},\r\n\r\n\t    \t\t/**\r\n\t    \t\t * If our app state is clean, disable publish.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\r\n\t    \t\t/**\r\n\t    \t\t * If our app isn't clean, render our 'viewChanges' button.\r\n\t    \t\t * @since  version\r\n\t    \t\t * @return {[type]} [description]\r\n\t    \t\t */\r\n\t    \t\tmaybeRenderCancel: function() {\r\n\t    \t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\tvar viewChanges = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-view-changes' );\r\n\t    \t\t\t\treturn viewChanges( this );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\r\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Listen for clicks on the Publish or view changes button.\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tevents: {\r\n\t\t\t'click .publish': 'clickPublish',\r\n\t\t\t'click .viewChanges': 'clickViewChanges'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click view changes, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickViewChanges: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\r\n\t\t},\r\n\r\n\t\tbounceIcon: function( changeModel ) {\r\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Renders the action buttons to the right of the app menu. i.e. Publish\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenuButton',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'span',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\t/**\r\n\t    \t\t * If our app state is clean, disable button.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Listen for clicks on the mobile menu button.\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tevents: {\r\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickMobileMenu: function( e) {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Main application header. Includes links to all of our domains.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-app-header',\r\n\r\n\t\tregions: {\r\n\t\t\t// Menu is our main app menu.\r\n\t\t\tmenu: '.nf-app-menu',\r\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\r\n\t\t\tbuttons: '.nf-app-buttons',\r\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// Get our domains\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\r\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\r\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\r\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click #nf-logo': 'clickLogo'\r\n\t\t},\r\n\r\n\t\tclickLogo: function( e ) {\r\n\t\t\t\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our sub-header. i.e. add new field, add new action, etc.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our builder header.\r\n *\r\n * This is a layout view and handles two regions:\r\n * app - menu/buttons\r\n * subapp - title, add new field, etc.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: \"div\",\r\n\t\ttemplate: \"#tmpl-nf-header\",\r\n\r\n\t\tregions: {\r\n\t\t\tapp: \"#nf-app-header\",\r\n\t\t\tformTitle: \"#nf-app-form-title\",\r\n\t\t\tappSub: \"#nf-app-sub-header\"\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tthis.app.show( new appHeaderView() );\r\n\r\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar formSettings = formData.get( 'settings' );\r\n\r\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\r\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\r\n\r\n\t\t\tthis.changeSubHeader();\r\n\t\t},\r\n\r\n\t\tchangeSubHeader: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\r\n\t\t\tthis.appSub.show( subHeaderView );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our builder.\r\n *\r\n * This is a layout view and handles three regions:\r\n * gutterLeft - gutter to the left of our main content area\r\n * body - main content area\r\n * gutterRight - gutter to the right of our main content area\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/main',[], function() {\r\n\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main',\r\n\t\tclassName: 'nf-main-test',\r\n\t\tmaybeDone: false,\r\n\r\n\t\toffsetRight: false,\r\n\t\toffsetLeft: false,\r\n\r\n\t\tregions: {\r\n\t\t\tgutterLeft: '#nf-main-gutter-left',\r\n\t\t\tbody: '#nf-main-body',\r\n\t\t\tgutterRight: '#nf-main-gutter-right'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\r\n\t\t\t */\r\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\r\n\t\t\t// ... or Domain Change.\r\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', function(){\r\n                // @todo Using a timeout feels like a hack, but there may be a timing issue here.\r\n            \tsetTimeout(function(){\r\n                    nfRadio.channel( 'app' ).request( 'update:gutters' );\r\n\t\t\t\t}, 300, this );\r\n\t\t\t}, this );\r\n\r\n\r\n\t\t\t/*\r\n\t\t\t * Reply to messages requesting that we resize our gutters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\r\n\t\t\tthis.body.show( bodyView );\r\n\r\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\r\n\t\t\tthis.gutterLeft.show( gutterLeftView );\r\n\r\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\r\n\t\t\tthis.gutterRight.show( gutterRightView );\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\r\n\t\t},\r\n\r\n\t\tgetMainEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\r\n\t\t\tthis.initialGutterResize();\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( window ).off( 'resize', this.resize );\r\n\t\t},\r\n\r\n\t\tinitialGutterResize: function() {\r\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\r\n\t\t\tthis.resizeGutter( this.gutterRight.el );\r\n\t\t\tthis.setBothGuttersFixed( this );\r\n\t\t},\r\n\r\n\t\tresizeBothGutters: function( e ) {\r\n\t\t\tvar context = ( e ) ? e.data.context : this;\r\n\r\n\t\t\tvar leftEl = context.gutterLeft.el;\r\n\t\t\tvar rightEl = context.gutterRight.el;\r\n\t\t\t\r\n\t\t\tcontext.resizeGutter( leftEl, context );\r\n\t\t\tcontext.resizeGutter( rightEl, context );\r\n\r\n\t\t\tcontext.setBothGuttersAbsolute( context );\r\n\r\n\t\t\t/*\r\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\r\n\t\t\t */\t\r\n\t\t\tclearTimeout( context.maybeDone );\r\n\t\t\t/*\r\n\t\t\t * Add our timeout.\r\n\t\t\t */\r\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\r\n\t\t},\r\n\r\n\t\tresizeGutter: function( el, context ) {\r\n\t\t\tvar top = jQuery( el ).offset().top;\r\n\t\t\tvar viewHeight = jQuery( window ).height();\r\n\t\t\tvar height = viewHeight - top;\r\n\t\t\tjQuery( el ).height( height );\r\n\t\t},\r\n\r\n\t\tsetBothGuttersFixed: function( context ) {\r\n\t\t\tcontext = context || this;\r\n\r\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\tvar topLeft = offsetLeft.top;\r\n\t\t\tvar leftLeft = offsetLeft.left;\r\n\r\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\t\r\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\r\n\t\t\tvar topRight = offsetRight.top;\r\n\t\t\tvar leftRight = offsetRight.left;\r\n\r\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\r\n\t\t},\r\n\r\n\t\tsetBothGuttersAbsolute: function( context ) {\r\n\t\t\tcontext = context || this;\r\n\r\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\r\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\r\n\r\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\r\n\r\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\r\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\r\n\t\t},\r\n\r\n\t\tupdateGutters: function() {\r\n\t\t\tthis.resizeBothGutters();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenuItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\t// Listen for clicks on our app menu.\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickAppMenu'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click on a menu item, fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * We pass this.model so that we know what item was clicked.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\te event\r\n\t\t * @return return\r\n\t\t */\r\n\t\tclickAppMenu: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t\t\t\t * If we have any dashicons in our model, render them.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDashicons: function() {\r\n\t\t\t\t\tif ( ! this.mobileDashicon ) return '';\r\n\r\n                    var icon = document.createElement( 'span' );\r\n                    icon.classList.add( 'dashicons' );\r\n                    icon.classList.add( this.mobileDashicon );\r\n\r\n                    return icon.outerHTML;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * Render classes for our menu item, including active.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = this.classes;\r\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\r\n\t\t\t\t\t\tclasses += ' active';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its url.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderUrl: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '#';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu is a link (like preview), render its target.\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderTarget: function() {\r\n\t\t\t\t\tif ( '' != this.url ) {\r\n\t\t\t\t\t\treturn '_blank';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '_self';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\t/**\r\n\t\t\t\t * If our menu item is disabled, output 'disabled'\r\n\t\t\t\t * \r\n\t\t\t\t * @since  3.0\r\n\t\t\t\t * @return string\r\n\t\t\t\t */\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\tif ( this.disabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Single item view used for the menu drawer.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-mobile-menu',\r\n\t\tchildView: mobileMenuItemView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\t/**\r\n\t    \t\t * If our app state is clean, disable button.\r\n\t    \t\t * \r\n\t    \t\t * @since  3.0\r\n\t    \t\t * @return string\r\n\t    \t\t */\r\n\t    \t\tmaybeDisabled: function() {\r\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t    \t\t\t\treturn 'disabled';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-publish': 'clickPublish'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we click publish, trigger a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Empty drawer content view.\r\n * Called before we close the drawer.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our drawer region\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer',\r\n\r\n\t\tregions: {\r\n\t\t\theader: '#nf-drawer-header',\r\n\t\t\tcontent: '#nf-drawer-content',\r\n\t\t\tfooter: '#nf-drawer-footer'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).parent().perfectScrollbar();\r\n\t\t},\r\n\r\n\t\tloadContent: function( drawerID, data ) {\r\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\r\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\r\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\r\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\r\n\r\n\t\t\tthis.header.show( headerView );\r\n\t\t\tthis.content.show( contentView );\r\n\t\t\tthis.footer.show( footerView );\r\n\r\n\t\t},\r\n\r\n\t\temptyContent: function() {\r\n\t\t\tthis.header.empty();\r\n\t\t\tthis.content.empty();\r\n\t\t\tthis.footer.empty();\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\r\n\t\t},\r\n\r\n\t\tclickToggleDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Single item view used for merge tags.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'li',\r\n\r\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:active', this.render );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:active', this.render, this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click a': 'clickTag'\r\n\t\t},\r\n\r\n\t\tclickTag: function( e ) {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tif ( this.active ) {\r\n\t\t\t\t\t\treturn 'active';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Merge tags popup section\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttagName: 'div',\r\n\t\tchildView: mergeTagItemView,\r\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = this.model.get( 'tags' );\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\r\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\r\n\t\t},\r\n\r\n\t\tupdateFields: function() {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tthis.model.set( 'tags', fieldCollection );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tactive: false,\r\n\t\t\texclude: false\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collections of merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: mergeTagModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Merge tags popup\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\r\n\tvar view = Marionette.CollectionView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\r\n\t\tchildView: mergeTagsSectionView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\r\n\t\t},\r\n\r\n\t\treRender: function( settingModel ) {\r\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\r\n\r\n\t\t\t/*\r\n\t\t\t * For the Actions Domain, Add Calc Merge Tags as a Default Group.\r\n\t\t\t */\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tif( 'actions' == currentDomain.get( 'id' ) ){\r\n\t\t\t\tvar calcMergeTagGroup = mergeTagCollection.where( { id: 'calcs' } );\r\n                defaultGroups = defaultGroups.concat( calcMergeTagGroup );\r\n            }\r\n\r\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\r\n\t\t\tvar that = this;\r\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\r\n\t\t\tif ( 'object' == typeof useMergeTags ) {\r\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\r\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\r\n\t\t\t\t\t\tthat.collection.remove( exclude )\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\r\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\r\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\r\n\t\t\t\t\t\t\t// console.log( sectionModel );\r\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.render();\r\n\t\t},\r\n\r\n\t\tgetMergeTagsView: function() {\r\n\t\t\treturn this;\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Builder view.\r\n *\r\n * This layout view has regions that represent our application areas:\r\n * header\r\n * main\r\n * menuDrawer - Mobile side-menu\r\n * drawer\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: \"#tmpl-nf-builder\",\r\n\t\tel: '#nf-builder',\r\n\r\n\t\tregions: {\r\n\t\t\theader: \"#nf-header\",\r\n\t\t\tmain: \"#nf-main\",\r\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\r\n\t\t\tdrawer: \"#nf-drawer\",\r\n\t\t\tmergeTagsContent: '.merge-tags-content'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests asking for the builder dom element.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\r\n\t\t\t// Respond to requests asking for the builder view\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\r\n\t\t\t// Layout views aren't self-rendering.\r\n\t\t\tthis.render();\r\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n\t\t\tvar mergeTagsClone = mergeTags.clone();\r\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\r\n\t\t\t// Show our header.\r\n\t\t\tthis.header.show( new headerView() );\r\n\t\t\t// Show our main content.\r\n\t\t\tthis.main.show( new mainView() );\r\n\t\t\t// Show our mobile menu\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\r\n\t\t\t// Show our drawer.\r\n\t\t\tthis.drawer.show( new drawerView() );\r\n\r\n\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\r\n\t\t},\r\n\r\n\t\tgetBuilderEl: function() {\r\n\t\t\treturn this.el;\r\n\t\t},\r\n\r\n\t\tgetBuilderView: function() {\r\n\t\t\treturn this;\r\n\t\t},\r\n\r\n\t\t// Listen for clicks\r\n\t\tevents: {\r\n\t\t\t'click .nf-open-drawer': 'openDrawer',\r\n\t\t\t'click .nf-change-domain': 'changeDomain',\r\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Someone clicked to open a drawer, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te \tevent\r\n\t\t * @return void\r\n\t\t */\r\n\t\topenDrawer: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Someone clicked to close a drawer, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcloseDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\r\n\t\t},\r\n\t\t/**\r\n\t\t * Someone clicked to change the domain, so fire a radio event.\r\n\t\t * This lets us separate the logic from the click event and view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te \tevent\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeDomain: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","\r\ndefine( 'controllers/app/remote',[], function() {\r\n    return Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\r\n        },\r\n\r\n        addListener: function( model, dataModel ) {\r\n\r\n            var listenTo = model.get( 'remote' ).listen;\r\n\r\n            // TODO: Change seems to be triggering twice on each update.\r\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\r\n\r\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\r\n\r\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\r\n\r\n            // Auto-trigger get:remote on drawer load.\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\r\n            jQuery( e.srcElement ).addClass( 'spin' );\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        updateSetting: function( dataModel, settingModel ) {\r\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\r\n        },\r\n\r\n        getRemote: function( dataModel ) {\r\n\r\n            var remote = this.get( 'remote' );\r\n\r\n            var data = {\r\n                parentValue: dataModel.get( remote.listen ),\r\n                action: remote.action,\r\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\r\n            };\r\n\r\n            // TODO: Disable setting and lock drawer while updating.\r\n            var that = this;\r\n            jQuery.post( ajaxurl, data, function( response ){\r\n                var response = JSON.parse( response );\r\n\r\n                if( 'textbox' == that.get( 'type' ) ) {\r\n                    dataModel.set( that.get('name'), response.value );\r\n                }\r\n\r\n                if( 'select' == that.get( 'type' ) ) {\r\n                    that.set( 'options', response.options );\r\n                    that.trigger( 'rerender' );\r\n                }\r\n            });\r\n        },\r\n\r\n    });\r\n} );\n","/**\r\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawer',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our drawer-related click events.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\r\n\r\n\t\t\t// Reply to direct requests to open or close the drawer.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\r\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\r\n\t\t\t\r\n\t\t\t// Reply to requests to prevent our drawer from closing\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\r\n\t\t\t// Reply to requests to enable drawer closing\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\r\n\t\t\t// Reply to requests for our disabled/enabled state.\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Object that holds our array of 'prevent close' values.\r\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\r\n\t\t\t */\r\n\t\t\tthis.objPreventClose = {};\r\n\r\n\t\t\t/*\r\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\r\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Handles closing our drawer\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcloseDrawer: function() {\r\n\t\t\t// Get our current domain.\r\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\r\n            if ( ! currentDrawer || this.maybePreventClose() ) {\r\n                return false;\r\n            }\r\n\r\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\r\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\r\n\t\t\t/*\r\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\r\n\t\t\t * TODO: Remove this radio message in the future.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\r\n\t\t\t// Send a message to our drawer to empty its contents.\r\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\r\n\r\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\r\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\r\n\r\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\r\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\r\n\r\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\r\n\r\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\r\n\t\t\t *\r\n\t\t\t * Once our drawer is closed, we:\r\n\t\t\t * clear our interval\r\n\t\t\t * request that the app change it's current drawer to false\r\n\t\t\t * trigger a drawer closed message\r\n\t\t\t */\r\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\r\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\r\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\r\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\r\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\r\n\t\t    \t\t/*\r\n\t\t    \t\t * Reset the add new button z-index to 98.\r\n\t\t    \t\t */\r\n\t\t    \t\tjQuery( '.nf-master-control' ).css( 'z-index', 98 );\r\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\r\n\t        \t}\r\n\t\t\t}, 150 );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Click handler for our 'open drawer' event.\r\n\t\t * @since  3.0\r\n\t\t * @param  e jQuery event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickOpenDrawer: function( e ) {\r\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\r\n\t\t\tthis.openDrawer( drawerID );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Open our drawer.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string drawerID \tID of the drawer we want to open.\r\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\r\n\t\t * @return void\r\n\t\t */\r\n\t\topenDrawer: function( drawerID, data ) {\r\n\t\t\tif ( this.maybePreventClose() ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\r\n\t\t\tdata = data || {};\r\n\r\n\t\t\t/*\r\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\r\n\t\t\t *\r\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\r\n\t\t\t */\r\n\t\t\tif ( 'undefined' != typeof data.model ) {\r\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\r\n\t\t\t\tdata.model.set( 'editActive', true );\r\n\t\t\t\tthis.dataModel = data.model;\r\n\t\t\t}\r\n\r\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\r\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\r\n\t\t\t\r\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\r\n\t\t\t\r\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\r\n\t\t\t\r\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\t\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\r\n\t\t\t *\r\n\t\t\t * Once our drawer is opened, we:\r\n\t\t\t * clear our interval\r\n\t\t\t * focus our filter\r\n\t\t\t * request that the app update its current drawer to the one we opened\r\n\t\t\t * trigger a drawer opened message\r\n\t\t\t */\r\n\t\t\tthis.hasFocus = false;\r\n\r\n\t\t\t/*\r\n\t\t\t * Set our add new button z-index to 0;\r\n\t\t\t */\r\n\t\t\tjQuery( '.nf-master-control' ).css( 'z-index', 0 );\r\n\r\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\r\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\r\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\r\n\t\t\t\t\tif ( ! that.hasFocus ) {\r\n\t\t        \t\tthat.focusFilter();\r\n\t\t\t\t\t\tthat.hasFocus = true;\r\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\r\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\r\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\r\n\t\t\t\t\t}   \t\t\r\n\t        \t}\r\n\t\t\t}, 150 );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Toggle the drawer from half to full screen and vise-versa\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttoggleDrawerSize: function() {\r\n\t\t\t// Get our drawer element.\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\t// toggle our drawer size class.\r\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Focus our filter\r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        focusFilter: function() {\r\n        \t// Get our filter element\r\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\r\n        \t// Focus\r\n        \tjQuery( filterEl ).focus();\r\n        },\r\n\r\n        /**\r\n         * Get the CSS right position (in px) of the closed drawer element.\r\n         * This is calculated by:\r\n         * getting the width of the builder element\r\n         * add 300 pixels\r\n         * make it negative\r\n         * \r\n         * @since  3.0\r\n         * @return void\r\n         */\r\n        getClosedDrawerPos: function() {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\r\n\t\t\treturn '-' + closedPos + 'px';\r\n        },\r\n\r\n        /**\r\n         * Check to see if anything has registered a prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @return boolean\r\n         */\r\n        maybePreventClose: function() {\r\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\r\n        \t\treturn false;\r\n        \t} else {\r\n        \t\treturn true;\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Register a prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent close' setting.\r\n         * @return void\r\n         */\r\n        preventClose: function( key ) {\r\n        \tthis.objPreventClose[ key ] = true;\r\n        \t/*\r\n        \t * When we disable closing the drawer, add the disable class.\r\n        \t */\r\n        \t// Get our current drawer.\r\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\r\n        },\r\n\r\n        /**\r\n         * Remove a previously registered prevent close key.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent close' setting.\r\n         * @return void\r\n         */\r\n        enableClose: function( key ) {\r\n        \tdelete this.objPreventClose[ key ];\r\n        \t /*\r\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\r\n        \t */\r\n        \tif ( ! this.maybePreventClose() && 'undefined' != typeof this.dataModel ) {\r\n\t        \t// Get our current drawer.\r\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );        \t\t\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * When we focus our filter, make sure that our open drawer interval is cleared.\r\n         * \r\n         * @since  3.0\r\n         * @return void\r\n         */\r\n        filterFocused: function() {\r\n        \tclearInterval( this.checkOpenDrawerPos );\r\n        },\r\n\r\n        getPreventClose: function() {\r\n        \treturn this.objPreventClose;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Default drawer header.\r\n *\r\n * Includes our filter/search and 'Done' button.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerDefault',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\t// Listen for our drawer being disabled.\r\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// Remove extra wrapping div.\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t\t// Respond to requests related to our filter.\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\r\n\t\t\t'input .nf-filter'\t: 'changeFilter',\r\n\t\t\t'focus input'\t\t: 'getFocus'\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the filter text is changed, trigger an event on our current drawer.\r\n\t\t * This lets us keep the logic separate from the click event and view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeFilter: function( e ) {\r\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\r\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tmaybeChangeFilter: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode ) {\r\n\t\t\t\te.addObject = true;\r\n\t\t\t\tthis.changeFilter( e );\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Clear our filter.\r\n\t\t *\r\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclearFilter: function() {\r\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\r\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\r\n\t\t\t\tfilterEl.val('');\r\n\t\t\t\tfilterEl.trigger( 'input' );\r\n\t\t\t\tfilterEl.focus();\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tblurFilter: function() {\r\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return our filter dom element.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\r\n\t\t},\r\n\r\n\t\tgetFocus: function() {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\t// Get our current domain.\r\n\t\t\t\t\tif ( this.drawerDisabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Default drawer footer\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/footerDefault',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\treturn new defaultHeaderView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetFooterView: function( data ) {\r\n\t\t\t\treturn new defaultFooterView( data );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds all of our drawer models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: drawerModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\r\n\t\t},\r\n\r\n\t\tremoveStagedField: function( el ) {\r\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: stagedFieldView,\r\n\t\temptyView: stagedFieldsEmptyView,\r\n\r\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\r\n\t\t\tthis.$el = jQuery( this.el ).parent();\r\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tvar that = this;\r\n\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\r\n\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tjQuery( this.el ).parent().draggable( {\r\n\t\t\t\topacity: 0.9,\r\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\trefreshPositions: true,\r\n\t\t\t\tgrid: [ 3, 3 ],\r\n\t\t\t\ttolerance: 'pointer',\r\n\r\n\t\t\t\thelper: function( e ) {\r\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\r\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\r\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\r\n\t\t\t\t\tvar left = width / 4;\r\n\t\t\t\t\tvar top = height / 2;\r\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\r\n\t\t\t\t\tjQuery( element ).zIndex( 1000 );\r\n\t\t\t\t\treturn element;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\r\n\t\t\t\t},\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tgetStagedFieldsEl: function() {\r\n\t\t\treturn jQuery( this.el );\r\n\t\t},\r\n\r\n\t\tonAddChild: function() {\r\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\r\n\t\t},\r\n\r\n\t\tonRemoveChild: function() {\r\n\t\t\tif( this.hasStagedFields() ) return;\r\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\r\n\t\t},\r\n\r\n\t\thasStagedFields: function() {\r\n\t\t\treturn  0 != this.collection.length;\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model for our staged field.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/stagingModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection of staged fields.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: stagingModel,\r\n\t\tcomparator: 'order'\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t_.bindAll( this, 'render' );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tthis.dragging = false;\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\r\n\t\t\t */\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\r\n\t\t\t\t\topacity: 0.9,\r\n\t\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\r\n\t\t\t\t\trefreshPositions: true,\r\n\t\t\t\t\tgrid: [ 5, 5 ],\r\n\t\t\t\t\tappendTo: '#nf-builder',\r\n\r\n\t\t\t\t\thelper: function( e ) {\r\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\r\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\r\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\r\n\t\t\t\t\t\tvar left = width / 4;\r\n\t\t\t\t\t\tvar top = height / 2;\r\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\r\n\t\t\t\t\t\tjQuery( element ).zIndex( 1000 );\r\n\t\t\t\t\t\treturn element;\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = true;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = false;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tdrag: function(e, ui) {\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} ).disableSelection();\r\n\r\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\r\n\t\t\t    \tjQuery( this ).addClass( 'active' );\r\n\t\t\t    } ).blur( function() {\r\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\r\n\t\t\t    } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-item': 'clickFieldType',\r\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\r\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\r\n\t\t},\r\n\r\n\t\tclickFieldType: function( e ) {\r\n\t\t\tif ( ! this.dragging ) {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmousedownFieldType: function( e ) {\r\n\t\t\tjQuery( e.target).addClass( 'clicked' );\r\n\t\t\tsetTimeout( function() {\r\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\r\n\t\t\t}, 1500 );\r\n\t\t},\r\n\r\n\t\tmaybeClickFieldType: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode ) {\r\n\t\t\t\tthis.clickFieldType( e );\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderFieldTypes: function() {\r\n\t\t\t        var html = document.createElement( 'span' );\r\n\t\t\t        var that = this;\r\n\t\t\t        _.each( this.fieldTypes, function( id ) {\r\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\r\n\t\t\t            var nicename = type.get( 'nicename' );\r\n\t\t\t            var icon = type.get( 'icon' );\r\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\r\n\t\t\t            var templateHTML = renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField } );\r\n                        var htmlFragments = document.createRange().createContextualFragment( templateHTML );\r\n                        html.appendChild( htmlFragments );\r\n\t\t\t        } );\r\n\t\t\t        return html.innerHTML;\r\n\t\t\t\t},\r\n\r\n\t\t\t\tsavedField: function() {\r\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\r\n\t\t\t\t\t\treturn 'nf-saved';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetTypeSection: function() {\r\n\t\t\treturn this.el;\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: fieldTypeSectionView,\r\n\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\r\n\r\n\t\tregions: {\r\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\r\n\t\t\tprimary: '#nf-drawer-primary',\r\n\t\t\tsecondary: '#nf-drawer-secondary'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\r\n\r\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\r\n\t\t\tthis.primaryCollection = this.savedCollection;\r\n\r\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\r\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\r\n\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\r\n\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\r\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\r\n\t\t\tthis.primary.reset();\r\n\t\t\tthis.secondary.reset();\r\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\r\n\t\t},\r\n\r\n\t\tremoveFieldTypeFilter: function () {\r\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\r\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t},\r\n\r\n\t\tgetChildView: function( model ) {\r\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\r\n\t\t\r\n\t\tregions: {\r\n\t\t\tsettings: '.nf-field-settings'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.model.on( 'change', this.render, this );\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.model.get( 'display' ) ) {\r\n\t\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\r\n\t\t\t} else {\r\n\t\t\t\tthis.settings.empty();\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .toggle': 'clickToggleGroup'\r\n\t\t},\r\n\r\n\t\tclickToggleGroup: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderLabel: function() {\r\n\t\t\t\t\tif ( '' != this.label ) {\r\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\r\n\t\t\t\t\t\treturn groupLabel( this );\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderArrowDir: function() {\r\n\t\t\t\t\tif ( this.display ) {\r\n\t\t\t\t\t\treturn 'down';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn 'right';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\tchildView: itemSettingGroupView,\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\r\n\r\n\t\tregions: {\r\n\t\t\tsettingTitle: '.nf-setting-title',\r\n\t\t\tsettingGroups: '.nf-setting-groups'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.dataModel = data.model;\r\n\t\t\tthis.groupCollection = data.groupCollection;\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\r\n\r\n\t\t\tthis.settingTitle.show( titleView );\r\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\tmaybeRenderTitle: function() {\r\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\r\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\r\n\t    \t\t\t\treturn title( this );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\treturn type.get( 'nicename' );\r\n\t\t\t\t},\r\n\t\t\t};\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Edit Settings drawer header.\r\n *\r\n * Includes our 'Done' button.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\t// Listen for our drawer being disabled.\r\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tif ( this.model ) {\r\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderDisabled: function() {\r\n\t\t\t\t\t// Get our current domain.\r\n\t\t\t\t\tif ( this.drawerDisabled ) {\r\n\t\t\t\t\t\treturn 'disabled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Button to add an action to the form.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/drawer/typeButton',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t\t\r\n\t\t\tjQuery( this.el ).disableSelection();\r\n\t\t\t\r\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tjQuery( this.el ).draggable( {\r\n\t\t\t\t\topacity: 0.9,\r\n\t\t\t\t\ttolerance: 'intersect',\r\n\t\t\t\t\tscroll: false,\r\n\t\t\t\t\thelper: 'clone',\r\n\r\n\t\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = true;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\t\tthat.dragging = false;\r\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-item': 'clickAddAction'\r\n\t\t},\r\n\r\n\t\tclickAddAction: function( e ) {\r\n\t\t\tif ( ! this.dragging ) {\r\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\r\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\r\n\t\t\t\t} else { // This isn't an installed action\r\n\t\t\t\t\twindow.open( this.model.get( 'link' ), '_blank' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-item';\r\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\r\n\t\t\t\t\t\tclasses += ' nf-has-img';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( 'installed' == this.section ) {\r\n\t\t\t\t\t\tclasses += ' nf-action-type';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderStyle: function() {\r\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\r\n\r\n\t\t\t\t\t\t// This is being used in a template, so carefully consider the order of double/single quotes.\r\n\t\t\t\t\t\treturn \"background-image: url('\" + jQuery.trim( this.image ) + \"')\";\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\r\n\t\tchildView: actionTypeButtonView,\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\trenderNicename: function() {\r\n\t\t\t\t\treturn that.collection.nicename;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\treturn that.collection.slug;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Add action drawer.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection'], function( actionTypeCollectionView ) {\r\n\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\r\n\r\n\t\tregions: {\r\n\t\t\tprimary: '#nf-drawer-primary',\r\n\t\t\tsecondary: '#nf-drawer-secondary'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\r\n\t\t\r\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\r\n\t\t\tthis.primaryCollection = this.installedActions;\r\n\r\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\r\n\t\t\tthis.secondaryCollection = this.availableActions;\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.secondaryCollection } ) );\r\n\t\t},\r\n\r\n\t\tgetEl: function() {\r\n\t\t\treturn jQuery( this.el ).parent();\r\n\t\t},\r\n\r\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\r\n\t\t\tthis.primary.reset();\r\n\t\t\tthis.secondary.reset();\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: filteredAvailable } ) );\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tremoveactionTypeFilter: function () {\r\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.installedActions } ) );\r\n\t\t\tthis.secondary.show( new actionTypeCollectionView( { collection: this.availableActions } ) );\r\n\t\t}\r\n\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Individual change item.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:disabled', this.render );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .undoSingle': 'undoSingle'\r\n\t\t},\r\n\r\n\t\tundoSingle: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Changes collection view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'table',\r\n        className: 'nf-changes',\r\n\t\tchildView: viewChangesItem\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Handles clicks on the 'view changes' button in the header.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\r\n\r\n\t\tevents: {\r\n\t\t\t'click .undoChanges': 'clickUndoChanges'\r\n\t\t},\r\n\r\n\t\tclickUndoChanges: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Error view used for settings.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/settingError',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\r\n\r\n\t\tregions: {\r\n\t\t\terror: '.nf-setting-error'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\t/*\r\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\r\n\t\t\t * Defaults to false.\r\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\r\n\t\t\t */\r\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\r\n\t\t\t\r\n\t\t\tif ( renderOnChange ) {\r\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\r\n\t\t\tthis.model.on( 'change:warning', this.renderWarning, this );\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            /**\r\n\t\t\t * For settings that require a remote refresh\r\n\t\t\t *   add an \"update\"/refresh icon to the label.\r\n             */\r\n            var remote = this.model.get( 'remote' );\r\n\t\t\tif( remote ) {\r\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\r\n\t\t\t\t\tvar labelText, updateIcon, updateLink, labelWrapper;\r\n\r\n                    labelText = document.createTextNode( this.model.get('label') );\r\n\r\n                    updateIcon = document.createElement( 'span' );\r\n                    updateIcon.classList.add( 'dashicons', 'dashicons-update' );\r\n\r\n                    updateLink = document.createElement( 'a' );\r\n                    updateLink.classList.add( 'extra' );\r\n                    updateLink.appendChild( updateIcon );\r\n\r\n                    // Wrap the label text and icon/link in a parent element.\r\n                    labelWrapper = document.createElement( 'span' );\r\n                    labelWrapper.appendChild( labelText );\r\n                    labelWrapper.appendChild( updateLink );\r\n\r\n                    // The model expects a string value.\r\n                    this.model.set('label', labelWrapper.innerHTML );\r\n                }\r\n\r\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\r\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\r\n\t\t\tthis.model.off( 'change:error', this.renderError );\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif( this.model.get( 'remote' ) ) {\r\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * Unescape any HTML being saved if we are a textbox.\r\n\t\t\t */\r\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\r\n\t\t\t\tvar setting = this.model.get( 'name' );\r\n\t\t\t\tvar value = this.dataModel.get( setting );\r\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\t/*\r\n\t\t\t * We want to escape any HTML being output if we are a textbox.\r\n\t\t\t */\r\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\r\n\t\t\t\tvar setting = this.model.get( 'name' );\r\n\t\t\t\tvar value = this.dataModel.get( setting );\r\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.mergeTagsContentView = false;\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\r\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\r\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\r\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\r\n\t\t\t\t\tcontent: content,\r\n\t\t\t\t\tmaxWidth: 200,\r\n\t\t\t\t\ttheme: 'TooltipBorder',\r\n\t\t\t\t\ttrigger: 'click',\r\n\t\t\t\t\tcloseOnClick: true\r\n\t\t\t\t})\r\n\t\t    });\r\n\t\t\t\r\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\r\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t    }\r\n\r\n\t\t\t/*\r\n\t\t\t * Apply Setting Field Masks\r\n\t\t\t */\r\n\t\t\tvar mask = this.model.get( 'mask' );\r\n\r\n\t\t\tif( typeof mask != \"undefined\" ){\r\n\r\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\r\n\r\n\t\t\t\tswitch( mask.type ){\r\n\t\t\t\t\tcase 'numeric':\r\n\t\t\t\t\t\tinput.autoNumeric({\r\n\t\t\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'currency':\r\n\r\n\t\t\t\t\t\tvar currency = nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' );\r\n\t\t\t\t\t\tvar currencySymbol = nfAdmin.currencySymbols[ currency ] || '';\r\n\r\n\t\t\t\t\t\tinput.autoNumeric({\r\n\t\t\t\t\t\t\taSign:  jQuery('<div />').html(currencySymbol).text(),\r\n\t\t\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'custom':\r\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format )\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t// TODO: Error Logging.\r\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.renderError();\r\n\t\t},\r\n\r\n\t\tonShow: function() {\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\trenderError: function() {\r\n\t\t\tif ( this.model.get( 'error' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\r\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\r\n\t\t\t\tthis.error.empty();\r\n\t\t\t}\r\n\t\t},\r\n\r\n        renderWarning: function() {\r\n            if ( this.model.get( 'warning' ) ) {\r\n                jQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-warning' );\r\n                this.error.show( new settingErrorView( { model: this.model } ) );\r\n            } else {\r\n                jQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-warning' );\r\n                this.error.empty();\r\n            }\r\n        },\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\r\n\t    \t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) != this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\r\n\t    \t\trenderSetting: function(){\r\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\r\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\r\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\r\n\t    \t\t\t\tthis.value = '';\r\n\t    \t\t\t}\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderLabelClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( this.use_merge_tags ) {\r\n\t\t\t\t\t\tclasses += ' has-merge-tags';\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif ( 'rte' == this.type ) {\r\n\t\t\t\t\t\tclasses += ' rte';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-setting ';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' nf-one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderTooltip: function() {\r\n\t\t\t\t\tif ( ! this.help ) return '';\r\n\t\t\t\t\tvar helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\r\n\r\n\t\t\t\t\thelpText = document.createTextNode( this.help );\r\n\t\t\t\t\thelpTextContainer = document.createElement( 'div' );\r\n\t\t\t\t\thelpTextContainer.classList.add( 'nf-help-text' );\r\n\t\t\t\t\thelpTextContainer.appendChild( helpText );\r\n\r\n\t\t\t\t\thelpIcon = document.createElement( 'span' );\r\n\t\t\t\t\thelpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\r\n                    helpIconLink = document.createElement( 'a' );\r\n                    helpIconLink.classList.add( 'nf-help' );\r\n                    helpIconLink.setAttribute( 'href', '#' );\r\n                    helpIconLink.setAttribute( 'tabindex', '-1' );\r\n                    helpIconLink.appendChild( helpIcon );\r\n\r\n                    helpTextWrapper = document.createElement( 'span' );\r\n                    helpTextWrapper.appendChild( helpIconLink );\r\n                    helpTextWrapper.appendChild( helpTextContainer );\r\n\r\n                    // The template expects a string value.\r\n\t\t\t\t\treturn helpTextWrapper.innerHTML;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderMergeTags: function() {\r\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change .setting': 'changeSetting',\r\n\t\t\t'keyup .setting': 'keyUpSetting',\r\n\t\t\t'click .setting': 'clickSetting',\r\n\t\t\t'click .extra': 'clickExtra'\r\n\t\t},\r\n\r\n\t\tchangeSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\r\n\t\t},\r\n\r\n\t\tkeyUpSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\r\n\t\t},\r\n\r\n\t\tclickSetting: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e ) {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tdrawerOpened: function() {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tdrawerClosed: function() {\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Changes collection view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\r\n\tvar view = Marionette.LayoutView.extend( {\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\r\n\r\n\t\tregions: {\r\n\t\t\tformName: '.new-form-name',\r\n\t\t\tformSubmit: '.new-form-submit'\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\r\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\r\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\r\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\r\n\t\t\t/*\r\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\r\n\t\t\t */\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\r\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\r\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\r\n\t\t\t} else {\r\n\t\t\t\tdataModel.set( 'add_submit', 0 );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .publish': 'clickPublish'\r\n\t\t},\r\n\r\n\t\tclickPublish: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Handles clicks on the 'view changes' button in the header.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/headerNewForm',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Config file for our app drawers.\r\n *\r\n * this.collection represents all of our registered drawers.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawerConfig',[\r\n\t'models/app/drawerCollection',\r\n\t'views/fields/drawer/addField',\r\n\t'views/app/drawer/editSettings',\r\n\t'views/app/drawer/headerEditSettings',\r\n\t'views/actions/drawer/addAction',\r\n\t'views/app/drawer/contentViewChanges',\r\n\t'views/app/drawer/headerViewChanges',\r\n\t'views/app/drawer/contentNewForm',\r\n\t'views/app/drawer/headerNewForm'\r\n\t], function(\r\n\t\tdrawerCollection,\r\n\t\taddFieldView,\r\n\t\teditSettingsView,\r\n\t\teditSettingsHeaderView,\r\n\t\taddActionView,\r\n\t\tviewChangesView,\r\n\t\tviewChangesHeaderView,\r\n\t\tnewFormView,\r\n\t\tnewFormHeaderView,\r\n\t\tmobileItemControlsView\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\r\n\t\t\tthis.collection = new drawerCollection( [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'addField',\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new addFieldView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'addAction',\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new addActionView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\t\t\t\t\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'editSettings',\r\n\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\r\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\r\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\r\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn new view( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new editSettingsView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'viewChanges',\r\n\r\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new viewChangesView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'newForm',\r\n\r\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\r\n\t\t\t\t\tgetHeaderView: function( data ) {\r\n\t\t\t\t\t\treturn new newFormHeaderView( data );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetContentView: function( data ) {\r\n\t\t\t\t\t\treturn new newFormView( data );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t] );\r\n\r\n\t\t\t// Listen for requests for our drawer collection.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\r\n\t\t\t// Listen for requests for specific drawer models.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\r\n\t\t},\r\n\r\n\t\tgetDrawerCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetDrawer: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Default settings title view.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\tif ( 'undefined' != typeof type ) {\r\n\t    \t\t\t\treturn type.get( 'nicename' );\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Empty view.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/empty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model for our individual domains.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdashicons: '',\r\n\t\t\tclasses: '',\r\n\t\t\tactive: false,\r\n\t\t\turl: '',\r\n\t\t\thotkeys: false,\r\n\t\t\tdisabled: false,\r\n\r\n\t\t\tgetSettingsTitleView: function( data ) {\r\n\t\t\t\treturn new DefaultSettingsTitleView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\r\n\t\t\t\treturn new DefaultSettingsTitleView( data );\r\n\t\t\t},\r\n\r\n\t\t\tgetGutterLeftView: function( data ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Return empty view\r\n\t\t\t\t */\r\n\t\t\t\treturn new EmptyView();\r\n\t\t\t},\r\n\r\n\t\t\tgetGutterRightView: function( data ) {\r\n\t\t\t\t/* \r\n\t\t\t\t * Return empty view\r\n\t\t\t\t */\r\n\t\t\t\treturn new EmptyView();\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our domain models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: domainModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/fields/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\r\n\tvar view = Marionette.CollectionView.extend( {\r\n\t\ttagName: 'div',\r\n\t\treorderOnSort: true,\r\n\r\n\t\tgetChildView: function() {\r\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\r\n\t\t},\r\n\r\n\t\tgetEmptyView: function() {\r\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.collection.models.length > 0 ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\r\n\r\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\r\n\t\t\t\t *\r\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\r\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\r\n\t\t\t\t * destroy it when the drag stops.\r\n\t\t\t\t */\r\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\t\tthis.initSortable();\r\n\t\t\t\t// }\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\r\n\t\t},\r\n\r\n\t\tgetSortableEl: function() {\r\n\t\t\treturn this.el;\r\n\t\t},\r\n\r\n\t\tinitSortable: function() {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tvar tolerance = 'pointer';\r\n\t\t\t} else {\r\n\t\t\t\tvar tolerance = 'intersect';\r\n\t\t\t}\r\n\r\n\t\t\tjQuery( this.el ).sortable( {\r\n\t\t\t\t//containment: '#nf-main',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\tcancel: '.nf-item-controls',\r\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\r\n\t\t\t\topacity: 0.95,\r\n\t\t\t\tgrid: [ 5, 5 ],\r\n\t\t\t\t// scroll: false,\r\n\t\t\t\tappendTo: '#nf-main',\r\n\t\t\t\tscrollSensitivity: 10,\r\n\r\n\t\t\t\treceive: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tif ( ui.item.dropping ) return;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdestroySortable: function() {\r\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonAddChild: function( childView ) {\r\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\r\n\t\t\t\tchildView.$el.hide().show( 'clip' );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-add-saved-field',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.renderAddButton();\r\n\t\t},\r\n\r\n\t\trenderAddButton: function() {\r\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\r\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\r\n\t\t\t} else {\r\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\r\n\t\t\t}\r\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-button': 'clickAddSavedField'\r\n\t\t},\r\n\r\n\t\tclickAddSavedField: function( e ) {\r\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Fields settings title view.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:saved', this.render, this );\r\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\r\n\t\t},\r\n\r\n\t\tregions: {\r\n\t\t\taddSaved: '.nf-add-saved-field'\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:saved', this.render );\r\n\t\t\tthis.addSavedjBox.destroy();\r\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.renderjBoxContent();\r\n\t\t\tvar that = this;\r\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\r\n\t\t\t\ttrigger: 'click',\r\n\t\t\t\ttitle: 'Add to Saved Fields',\r\n\t\t\t\tposition: {\r\n\t\t\t\t\tx:'left',\r\n\t\t\t\t\ty:'center'\r\n\t\t\t\t},\r\n\t\t\t\toutside:'x',\r\n\t\t\t\tcloseOnClick: 'body',\r\n\r\n\t\t\t\tonCreated: function() {\r\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\r\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\r\n\t\t},\r\n\r\n\t\trenderjBoxContent: function() {\r\n\t\t\tif ( this.addSaved ) {\r\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderTypeNicename: function() {\r\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\r\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\r\n\t    \t\t\tvar displayName = type.get( 'nicename' );\r\n\r\n\t    \t\t\tif ( this.saved ) {\r\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\r\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\r\n\t    \t\t\t}\r\n\t    \t\t\treturn displayName;\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\trenderSavedStar: function() {\r\n\t\t\t\t\tif ( this.saved ) {\r\n\t\t\t\t\t\tvar star = 'filled';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar star = 'empty';\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Add main header.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/mainHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-header-actions',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\r\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\tif ( actionCollection.models.length == 0 ) {\r\n\t\t\t\tjQuery( this.el ).hide();\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).show();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Actions subheader view.\r\n *\r\n * TODO: make dynamic\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders an application menu item from a domain model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/itemControls',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-item-controls',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for domain changes and re-render when we detect one.\r\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tonRender: function() {\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\t\t\t// \r\n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\r\n\t\t\t'click .nf-edit-settings': 'clickEdit',\r\n\t\t\t'singletap .nf-item-control': 'singleTapEdit',\r\n\t\t\t'click .nf-item-delete': 'clickDelete',\r\n\t\t\t'click .nf-item-duplicate': 'clickDuplicateField'\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e ) {\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsingleTapEdit: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t},\r\n\r\n\t\tclickDelete: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\r\n\t\t},\r\n\r\n\t\tclickDuplicateField: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\r\n\t\t},\r\n\r\n\t\tmouseoverItemControl: function( e ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Single action table row\r\n *\r\n * TODO: make dynamic\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'tr',\r\n\t\ttemplate: '#tmpl-nf-action-item',\r\n\r\n\t\tregions: {\r\n\t\t\titemControls: '.nf-item-controls'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:actionItemTemplate' ) || this.template;\r\n\t\t\tthis.model.on( 'change:label', this.render, this );\r\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\r\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:label', this.render );\r\n\t\t\tthis.model.off( 'change:editActive', this.render );\r\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tif ( this.model.get( 'editActive' ) ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeDeactivate();\r\n\r\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\r\n\t\t},\r\n\r\n\t\tmaybeDeactivate: function() {\r\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\r\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change input': 'changeToggle',\r\n\t\t\t'click': 'maybeClickEdit'\r\n\t\t},\r\n\r\n\t\tmaybeClickEdit: function( e ) {\r\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeToggle: function( e ) {\r\n\t\t\tvar setting = jQuery( e.target ).data( 'setting' );\r\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', setting );\r\n\t\t\tconsole.log( settingModel );\r\n\t\t\tconsole.log( this.model );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderToggle: function( settingName ) {\r\n\t\t\t\t\tthis.settingName = settingName || 'active';\r\n\t\t\t\t\tvar actionLabel = this.label;\r\n\t\t\t\t\tthis.label = '';\r\n\t\t\t\t\tthis.value = this[ this.settingName ];\r\n\t\t\t\t\tthis.name = this.id + '-' + this.settingName;\r\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\r\n\t\t\t\t\thtml = html( this );\r\n\t\t\t\t\tthis.label = actionLabel;\r\n\t\t\t\t\treturn html;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderTypeNicename: function() {\r\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\r\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\r\n\r\n\t\t\t\t\treturn type.get( 'nicename' );\r\n\t\t\t\t},\r\n\r\n                /**\r\n\t\t\t\t * [Deprecated] Tooltips are not currently implemented in the context of the action list.\r\n\t\t\t\t *   However, the template uses a nested template which requires the helper method.\r\n                 * @returns {string}\r\n                 */\r\n\t\t\t\trenderTooltip: function() {\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderMergeTags: function() {\r\n\t\t\t\t\tif ( this.use_merge_tags ) {\r\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn '';\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/actions/mainContentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\r\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\r\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\r\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\r\n\t\t\t// }\r\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\r\n\t\t\t// jQuery( this.el ).parent().droppable( {\r\n\t\t\t// \taccept: function( draggable ) {\r\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\r\n\t\t\t// \t\t\treturn true;\r\n\t\t\t// \t\t}\r\n\t\t\t// \t},\r\n\t\t\t// \thoverClass: 'nf-droppable-hover',\r\n\t\t\t// \ttolerance: 'pointer',\r\n\t\t\t// \tover: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t// \t},\r\n\t\t\t// \tout: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t// \t},\r\n\t\t\t// \tdrop: function( e, ui ) {\r\n\t\t\t// \t\tui.item = ui.draggable;\r\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t// \t},\r\n\t\t\t// } );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Main content view for our actions.\r\n *\r\n * TODO: make dynamic\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\r\n\tvar view = Marionette.CompositeView.extend({\r\n\t\ttemplate: '#tmpl-nf-action-table',\r\n\t\tchildView: actionView,\r\n\t\temptyView: emptyView,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:mainContentTemplate' ) || this.template;\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tjQuery( this.el ).droppable( {\r\n\t\t\t\taccept: '.nf-action-type-draggable',\r\n\t\t\t\tactiveClass: 'nf-droppable-active',\r\n\t\t\t\thoverClass: 'nf-droppable-hover',\r\n\t\t\t\tdrop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\r\n\r\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\r\n\t\t},\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/advanced/mainHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-header-settings'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/subHeader',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/settingItem',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-form-setting-type',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click': 'clickEdit'\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e ) {\r\n\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\treturn {\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\r\n\t    \t\t\tif ( this.editActive ) {\r\n\t    \t\t\t\tclasses += ' active';\r\n\t    \t\t\t}\r\n\t    \t\t\treturn classes;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateActiveClass: function() {\r\n\t\t\tif ( this.model.get( 'editActive' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\r\n\t\t\t} else {\r\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\r\n\tvar view = Marionette.CollectionView.extend({\r\n\t\tchildView: settingItem\r\n\t\t\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our form fields.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/fieldModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Field',\r\n\t\t\tobjectDomain: 'fields',\r\n\t\t\teditActive: false,\r\n\t\t\torder: 999\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tif ( 'undefined' == typeof this.get( 'type' ) ) return;\r\n\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.on( 'change', this.changeSetting, this );\r\n\r\n\t\t\t// Get our parent field type.\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\r\n\t\t\tvar parentType = fieldType.get( 'parentType' );\r\n\r\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\r\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\r\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\r\n\t\t\t\t\tthis.set( key, val, { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * If our field type is a saved field, set our field type to the actual field type\r\n\t\t\t */\r\n\t\t\tif ( 'saved' == fieldType.get( 'section' ) ) {\r\n\t\t\t\tthis.set( 'type', fieldType.get( 'type' ) );\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * Trigger an init event on three channels:\r\n\t\t\t * \r\n\t\t\t * fields\r\n\t\t\t * fields-parentType\r\n\t\t\t * field-type\r\n\t\t\t *\r\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\r\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\r\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options ) {\r\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field models.\r\n * This is the actual field data created by the user.\r\n *\r\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: fieldModel,\r\n\t\tcomparator: function( model ){\r\n\t\t\treturn parseInt( model.get( 'order' ) );\r\n\t\t},\r\n\t\ttmpNum: 1,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.on( 'add', this.addField, this );\r\n\t\t\tthis.on( 'remove', this.removeField, this );\r\n\r\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\r\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\r\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\r\n\t\t\tthis.newIDs = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we add a field, push the id onto our new fields property.\r\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\taddField: function( model ) {\r\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we remove a field, push the id onto our removed fields property.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\tremoveField: function( model ) {\r\n\t\t\tthis.removedIDs = this.removedIDs || {};\r\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\r\n\t\t},\r\n\r\n\t\taddNewField: function( model ) {\r\n\t\t\tthis.add( model );\r\n\t\t},\r\n\r\n\t\tappendNewField: function( model ) {\r\n\t\t\tif ( 0 == this.length ) {\r\n\t\t\t\tvar order = 0;\r\n\t\t\t} else {\r\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\r\n\t\t\t}\r\n\r\n\t\t\tmodel.set( 'order', order, { silent: true } );\r\n\t\t\tthis.add( model );\r\n\t\t},\r\n\r\n\t\tremoveFieldResponse: function( model ) {\r\n\t\t\tthis.remove( model );\r\n\t\t},\r\n\r\n\t\tfieldExists: function( fieldModel ) {\r\n\t\t\treturn -1 != this.indexOf( fieldModel );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\r\n\n","/**\r\n * Config file for our app domains.\r\n * \r\n * this.collection represents all of our app domain (fields, actions, settings) information.\r\n *\r\n * This doesn't store the current domain, but rather all the data about each.\r\n * \r\n * This data includes:\r\n * hotkeys\r\n * header view\r\n * subheader view\r\n * content view\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/domainConfig',[\r\n\t// Require our domain collection\r\n\t'models/app/domainCollection',\r\n\t// Require our fields domain files\r\n\t'views/fields/subHeader',\r\n\t'views/fields/mainContentFieldCollection',\r\n\t'views/fields/drawer/settingsTitle',\r\n\t// Require our actions domain files\r\n\t'views/actions/mainHeader', \r\n\t'views/actions/subHeader',\r\n\t'views/actions/mainContent',\r\n\t// Require our settings domain files\r\n\t'views/advanced/mainHeader',\r\n\t'views/advanced/subHeader',\r\n\t'views/advanced/mainContent',\r\n\t// Empty View\r\n\t'views/app/empty',\r\n\t// FieldCollection: used by the default formContentData filter\r\n\t'models/fields/fieldCollection'\r\n\t], \r\n\tfunction( \r\n\t\tappDomainCollection,\r\n\t\tfieldsSubHeaderView,\r\n\t\tFieldsMainContentFieldCollectionView,\r\n\t\tfieldsSettingsTitleView,\r\n\t\tactionsMainHeaderView,\r\n\t\tactionsSubHeaderView,\r\n\t\tactionsMainContentView,\r\n\t\tsettingsMainHeaderView,\r\n\t\tsettingsSubHeaderView,\r\n\t\tsettingsMainContentView,\r\n\t\tEmptyView,\r\n\t\tFieldCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentView filter.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentData filter.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Add our default formContentGutterView filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\r\n\r\n\t\t\t// Define our app domains\r\n\t\t\tthis.collection = new appDomainCollection( [\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'fields',\r\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\r\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\r\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\t/**\r\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\r\n\t\t\t\t\t * Uses two filters:\r\n\t\t\t\t\t * 1) One for our formContentData\r\n\t\t\t\t\t * 2) One for our formContentView\r\n\t\t\t\t\t *\r\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\r\n\t\t\t\t\t * \r\n\t\t\t\t\t * @since  3.0\r\n\t\t\t\t\t * @return formContentView backbone view.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tgetMainContentView: function( collection ) {\r\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\r\n\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\r\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\r\n\t\t\t\t\t\t * \r\n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\r\n\t\t\t\t\t\t *\r\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( ! formContentData ) {\r\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tformContentView = callback();\r\n\r\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\r\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\r\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetGutterLeftView: function( data ) {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\r\n\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tgutterView = callback();\r\n\r\n\t\t\t\t\t\treturn new gutterView(); \r\n\t\t\t\t\t},\r\n\r\n\t\t\t\t\tgetGutterRightView: function() {\r\n\t\t\t\t\t\t/*\r\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\r\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\r\n\t\t\t\t\t\t */\r\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t/* \r\n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t\t\t\t*/\r\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\r\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t\t\t\tgutterView = callback();\r\n\r\n\t\t\t\t\t\treturn new gutterView(); \r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'actions',\r\n\t\t\t\t\tnicename: nfi18n.domainActions,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\r\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\r\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new actionsSubHeaderView();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\tgetMainContentView: function() {\r\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'settings',\r\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\r\n\t\t\t\t\thotkeys: {\r\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\r\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\r\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\r\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\r\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\r\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\r\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\r\n\r\n\t\t\t\t\tgetSubHeaderView: function() {\r\n\t\t\t\t\t\treturn new settingsSubHeaderView();\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\r\n\t\t\t\t\tgetMainContentView: function() {\r\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\r\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tid: 'preview',\r\n\t\t\t\t\tnicename: 'Preview Form',\r\n\t\t\t\t\tclasses: 'preview',\r\n\t\t\t\t\tdashicons: 'dashicons-visibility',\r\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\r\n\t\t\t\t\turl: nfAdmin.previewurl\r\n\t\t\t\t}\r\n\t\t\t] );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message with our domain config collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to get the app domain collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\r\n\t\t},\r\n\r\n\t\tgetDomainCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetDomainModel: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t},\r\n\r\n\t\tdefaultFormContentView: function( formContentData ) {\r\n\t\t\treturn FieldsMainContentFieldCollectionView;\r\n\t\t},\r\n\r\n\t\tdefaultFormContentLoad: function( formContentData ) {\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t/*\r\n\t\t\t * If we only have one load filter, we can just return the field collection.\r\n\t\t\t */\r\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\r\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\r\n\r\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\r\n\r\n\t\t\t/*\r\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\r\n\t\t\t */\r\n\r\n        \tvar fieldModels = _.map( formContentData, function( key ) {\r\n        \t\treturn fieldCollection.findWhere( { key: key } );\r\n        \t}, this );\r\n\r\n        \treturn new FieldCollection( fieldModels );\r\n\t\t},\r\n\r\n\t\tdefaultFormContentGutterView: function( formContentData ) {\r\n\t\t\treturn EmptyView;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our app data.\r\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/appModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tloading: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to changes to our 'clean' attribute.\r\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\r\n\t\t},\r\n\r\n\t\tchangeStatus: function() {\r\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\r\n *\r\n * clean is a boolean that represents whether or not changes have been made.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Get the collection that represents all the parts of our application.\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\t// Setup our initial model.\r\n\t\t\tthis.model = new appModel( {\r\n\t\t\t\tcurrentDrawer: false,\r\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\r\n\t\t\t\tclean: true\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\r\n\t\t\t */\r\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\r\n\t\t\tthis.model.set( 'mobile', mobile );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to see if we are on mobile.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to app channel requests for information about the state of our app.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\r\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to app channel requests to update app settings.\r\n\t\t\t */\t\t\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\r\n\r\n\t\t},\r\n\r\n\t\tupdateCurrentDomain: function( model ) {\r\n\t\t\tthis.updateSetting( 'currentDomain', model );\r\n\t\t},\r\n\r\n\t\tupdateSetting: function( setting, value ) {\r\n\t\t\tthis.model.set( setting, value );\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetSetting: function( setting ) {\r\n\t\t\treturn this.model.get( setting );\r\n\t\t},\r\n\r\n\t\tgetData: function() {\r\n\t\t\treturn this.model;\r\n\t\t},\r\n\r\n\t\tgetCurrentDomain: function() {\r\n\t\t\treturn this.model.get( 'currentDomain' );\r\n\t\t},\r\n\r\n\t\tupdateCurrentDrawer: function( drawerID ) {\r\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\r\n\t\t\treturn true;\r\n\t\t},\r\n\r\n\t\tgetCurrentDrawer: function() {\r\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\r\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\r\n\t\t},\r\n\r\n\t\tisMobile: function() {\r\n\t\t\treturn this.model.get( 'mobile' );\r\n\t\t}\r\n\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for click events to expand/collapse setting groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for click events on our settings group.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \tgroup setting model\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttoggleSettingGroup: function( e, model ) {\r\n\t\t\tif ( model.get( 'display' ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Make sure that none of our settings have errors\r\n\t\t\t\t */\r\n\t\t\t\tvar errors = false;\r\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\r\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\r\n\t\t\t\t\t\terrors = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tif ( ! errors ) {\r\n\t\t\t\t\tmodel.set( 'display', false );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tmodel.set( 'display', true );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Updates our database with our form data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/updateDB',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\r\n\t\t\t// Respond to requests to update the database.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\r\n\t\t\t/*\r\n\t\t\t * Register our default formContent save filter.\r\n\t\t\t * This converts our collection into an array of keys.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update our database.\r\n\t\t * If action isn't specified, assume we're updating the preview.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \taction preview or publish\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateDB: function( action ) {\r\n\t\t\t// If our app is clean, dont' update.\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Default action to preview.\r\n\t\t\taction = action || 'preview';\r\n\r\n\t\t\t// Setup our ajax actions based on the action we're performing\r\n\t\t\tif ( 'preview' == action ) {\r\n\t\t\t\tvar jsAction = 'nf_preview_update';\r\n\t\t\t} else if ( 'publish' == action ) {\r\n\t\t\t\tvar jsAction = 'nf_save_form';\r\n\t\t\t}\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n\t\t\t/*\r\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\r\n\t\t\t * We need to unset those.\r\n\t\t\t * TODO: Make this more dynamic/filterable.\r\n\t\t\t */\r\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\r\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * The main content of our form is called the formContent.\r\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\r\n\t\t\t * If there aren't any filters found, we default to the field collection.\r\n\t\t\t * \r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\r\n\t\t\t/*\r\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\r\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\r\n\t\t\t * \r\n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\r\n\t\t\t *\r\n\t\t\t * TODO: Remove this backwards compatibility eventually.\r\n\t\t\t */\r\n\t\t\tif ( ! formContentData ) {\r\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\r\n\t\t\t}\r\n\r\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\r\n\t\t\t\t\t\t\r\n\t\t\t/* \r\n\t\t\t* Get our first filter, this will be the one with the highest priority.\r\n\t\t\t*/\r\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\r\n\t\t\tvar callback = _.first( sortedArray );\r\n\t\t\t/*\r\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\r\n\t\t\t */\r\n\t\t\tformContentData = callback( formContentData );\r\n\t\t\t\r\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\r\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Get our form data\r\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n\t\t\t// Turn our formData model into an object\r\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\r\n\t\t\tdata.settings.formContentData = formContentData;\r\n\t\t\t/**\r\n\t\t\t * Prepare fields for submission.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// Get the field IDs that we've deleted.\r\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\r\n\r\n\t\t\t/*\r\n\t\t\t * data.fields is an array of objects like:\r\n\t\t\t * field.label = blah\r\n\t\t\t * field.label_pos = blah\r\n\t\t\t * etc.\r\n\t\t\t *\r\n\t\t\t * And we need that format to be:\r\n\t\t\t * field.settings.label = blah\r\n\t\t\t * field.settings.label_pos = blah\r\n\t\t\t *\r\n\t\t\t * So, we loop through our fields and create a field.settings object.\r\n\t\t\t */\r\n\t\t\t_.each( data.fields, function( field ) {\r\n\t\t\t\tvar id = field.id;\r\n\t\t\t\t// We dont' want to update id or parent_id\r\n\t\t\t\tdelete field.id;\r\n\t\t\t\tdelete field.parent_id;\r\n\t\t\t\tvar settings = {};\r\n\t\t\t\t// Loop through all the attributes of our fields\r\n\t\t\t\tfor (var prop in field) {\r\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\r\n\t\t\t\t    \t// Set our settings.prop value.\r\n\t\t\t\t        settings[ prop ] = field[ prop ];\r\n\t\t\t\t        // Delete the property from the field.\r\n\t\t\t\t        delete field[ prop ];\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor( var setting in settings ){\r\n\t\t\t\t\tif( null === settings[ setting ] ) {\r\n\t\t\t\t\t\tdelete settings[setting];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Update our field object.\r\n\t\t\t\tfield.settings = settings;\r\n\t\t\t\tfield.id = id;\r\n\t\t\t} );\r\n\r\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\r\n\t\t\tdata.deleted_fields = removedIDs;\r\n\r\n\t\t\t/**\r\n\t\t\t * Prepare actions for submission.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\t// Get the action IDs that we've deleted.\r\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\r\n\r\n\t\t\t/*\r\n\t\t\t * data.actions is an array of objects like:\r\n\t\t\t * action.label = blah\r\n\t\t\t * action.label_pos = blah\r\n\t\t\t * etc.\r\n\t\t\t *\r\n\t\t\t * And we need that format to be:\r\n\t\t\t * action.settings.label = blah\r\n\t\t\t * action.settings.label_pos = blah\r\n\t\t\t *\r\n\t\t\t * So, we loop through our actions and create a field.settings object.\r\n\t\t\t */\r\n\t\t\t_.each( data.actions, function( action ) {\r\n\t\t\t\tvar id = action.id;\r\n\t\t\t\t// We dont' want to update id or parent_id\r\n\t\t\t\tdelete action.id;\r\n\t\t\t\tdelete action.parent_id;\r\n\t\t\t\tvar settings = {};\r\n\t\t\t\t// Loop through all the attributes of our actions\r\n\t\t\t\tfor (var prop in action) {\r\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\r\n\t\t\t\t    \t// Set our settings.prop value.\r\n\t\t\t\t        settings[ prop ] = action[ prop ];\r\n\t\t\t\t        // Delete the property from the action.\r\n\t\t\t\t        delete action[ prop ];\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t\t// Update our action object.\r\n\t\t\t\taction.settings = settings;\r\n\t\t\t\taction.id = id;\r\n\t\t\t} );\r\n\r\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\r\n\t\t\tdata.deleted_actions = removedIDs;\r\n\r\n\t\t\t// Turn our object into a JSON string.\r\n\t\t\tdata = JSON.stringify( data );\r\n\t\t\t// Run anything that needs to happen before we update.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\r\n\r\n\t\t\tif ( 'publish' == action ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\r\n\r\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\r\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// Update\r\n\t\t\tjQuery.post( ajaxurl, { action: jsAction, form: data, security: nfAdmin.ajaxNonce }, function( response ) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresponse = JSON.parse( response );\r\n\t\t\t\t\tresponse.action = action;\r\n\t\t\t\t\t// Run anything that needs to happen after we update.\r\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\r\n\t\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\r\n\t\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch( exception ) {\r\n\t\t\t\t\tconsole.log( 'Something went wrong!' );\r\n\t\t\t\t\tconsole.log( exception );\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdefaultSaveFilter: function( formContentData ) {\r\n\t\t\treturn formContentData.pluck( 'key' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our form data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/formModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\r\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\r\n\t\t\t} else {\r\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Stores our form data and responds to requests for it.\r\n * Form data stores fields, actions, and settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Instantiate Form Model\r\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\r\n\t\t\t// Set our field collection\r\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\r\n\t\t\t// Set our actions collection\r\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\r\n\t\t\t// Set our settings collection\r\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\r\n\t\t\t// Respond to requests for form data.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return form data model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return backbone.model\r\n\t\t */\r\n\t\tgetFormModel: function() {\r\n\t\t\treturn this.model;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles changing our preview link when we change the 'clean' state of our app.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/previewLink',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for events that would change our preview link\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Disable our preview link before we send data to update our preview.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdisablePreview: function() {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\r\n\t\t\tpreview.set( 'disabled', true );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  boolean \tclean app data state\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangePreviewNicename: function( clean ) {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\r\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\r\n\t\t\tif ( ! clean ) {\r\n\t\t\t\tvar nicename = 'Preview Changes';\r\n\t\t\t} else {\r\n\t\t\t\tvar nicename = 'Preview Form';\r\n\t\t\t}\r\n\r\n\t\t\tpreview.set( 'nicename', nicename );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Enable our preview button.\r\n\t\t * This is triggered when we get a response from our preview update.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tenablePreview: function() {\r\n\t\t\t// Get our preview domain\r\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar preview = appDomains.get( 'preview' );\r\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\r\n\t\t\tpreview.set( 'disabled', false );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for requests to change the current domain.\r\n *\r\n * The app menu and the main submenu both contain clickable links that change the current domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/menuButtons',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\r\n\t\t},\r\n\r\n\t\tpublish: function() {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\r\n\t\t},\r\n\r\n\t\tviewChanges: function() {\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our change data.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/changeModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdisabled: false\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Holds all of our change models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: domainModel,\r\n\r\n\t\tcomparator: function( model ) {\r\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\r\n\t\t\treturn -id;\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Track settings changes across our app.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new changeCollection();\r\n\t\t\t// Respond to any requests to add a change directly.\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\r\n\t\t\t// Respond to requests for the change collection\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\r\n\t\t},\r\n\r\n\t\tregisterChange: function( action, model, changes, label, data ) {\r\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\r\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\r\n\t\t\t\tlabel.dashicon = 'admin-generic';\r\n\t\t\t}\r\n\t\t\tvar changeModel = new ChangeModel({\r\n\t\t\t\taction: action,\r\n\t\t\t\tmodel: model,\r\n\t\t\t\tchanges: changes,\r\n\t\t\t\tlabel: label,\r\n\t\t\t\tdata: data\t\t\r\n\t\t\t} );\r\n\t\t\tthis.collection.add( changeModel );\r\n\t\t\treturn changeModel;\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tmaybeResetCollection: function( clean ) {\r\n\t\t\tif ( clean ) {\r\n\t\t\t\tthis.collection.reset();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'controllers/app/undoChanges',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\r\n\t\t},\r\n\r\n\t\tundoChanges: function() {\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tchangeCollection.sort();\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( changeCollection.models, function( change ) {\r\n\t\t\t\tthat.undoSingle( change, true );\r\n\t\t\t} );\r\n\t\t\tchangeCollection.reset();\r\n\t\t\t// Update preview.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t},\r\n\r\n\t\tundoSingle: function( change, undoAll ) {\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/publishResponse',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our app channel for the updateDB response.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\r\n\t\t},\r\n\r\n\t\tpublishResponse: function( response ) {\r\n\t\t\t// If we aren't performing a publish action, bail.\r\n\t\t\tif ( 'publish' !== response.action ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// Check to see if we have any new ids. \r\n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\r\n\r\n\t\t\t\t// If we have any new fields, update their models with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\r\n\t\t\t\t\t\tif ( field ) {\r\n\t\t\t\t\t\t\tfield.set( 'id', newID );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we have any new actions, update their models with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\r\n\t\t\t\t\t\tif ( action ) {\r\n\t\t\t\t\t\t\taction.set( 'id', newID );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we have a new form id, update the model with the new id.\r\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\r\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\r\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t\t\t\tformModel.set( 'id', newID );\r\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\r\n\r\n\t\t\t// If we're on mobile, show a notice that we're publishing\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\r\n\t\t\t}\r\n\t\t\t// Add a notice that we've published.\r\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\r\n\r\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t}\r\n\t\t\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for requests to change the current domain.\r\n *\r\n * The app menu and the main submenu both contain clickable links that change the current domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeDomain',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for both menu and submenu clicks.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\r\n\t\t\t// Reply to specific requests to change the domain\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\r\n\r\n\t\t\t// Reply to requests to prevent our drawer from closing\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\r\n\t\t\t// Reply to requests to enable drawer closing\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Object that holds our array of 'prevent change' values.\r\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\r\n\t\t\t */\r\n\t\t\tthis.objPreventChange = {};\r\n\t\t},\r\n\r\n\t\tchangeAppDomain: function( e, model ) {\r\n\t\t\t/*\r\n\t\t\t * If we have disabled movement between domains, return false.\r\n\t\t\t */\r\n\t\t\tif ( this.maybePreventChange() ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t/*\r\n\t\t\t * If we are passed a model, use that model.\r\n\t\t\t * Otherwise, get the domain from the event target data.\r\n\t\t\t */ \r\n\t\t\tif ( 'undefined' == typeof model ) {\r\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\r\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\r\n\t\t\t}\r\n\t\t\t// If a drawer is open, close it.\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\r\n\t\t\t * and trigger a radio message saying we've changed the domain.\r\n\t\t\t */ \r\n\t\t\tif ( 0 == model.get( 'url' ).length ) {\r\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\r\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n         * Check to see if anything has registered a key to prevent changing the domain.\r\n         * \r\n         * @since  3.0\r\n         * @return boolean\r\n         */\r\n        maybePreventChange: function() {\r\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\r\n        \t\treturn false;\r\n        \t} else {\r\n        \t\treturn true;\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Register a key to prevent changing the domain.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\r\n         * @return void\r\n         */\r\n        preventChange: function( key ) {\r\n        \tthis.objPreventChange[ key ] = true;\r\n        },\r\n\r\n        /**\r\n         * Remove a previously registered key that is preventing our domain from changing.\r\n         * \r\n         * @since  3.0\r\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\r\n         * @return void\r\n         */\r\n        enableChange: function( key ) {\r\n        \tdelete this.objPreventChange[ key ];\r\n        },\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Modify the user's browser history when they click on a domain\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/pushstate',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\r\n\t\t},\r\n\r\n\t\tchangePushState: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\r\n\t\t\tvar reExp = /domain=\\\\d+/;\r\n\t\t\tvar url = window.location.toString();\r\n\t\t\tvar newUrl = url.replace( reExp, '' );\r\n\t\t\tconsole.log( newUrl );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\r\n * \r\n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\r\n * \r\n * Currently too much hotkey data is hard-coded here.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/hotkeys',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\r\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\r\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\r\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\r\n\t\t},\r\n\r\n\t\tchangeHotkeys: function() {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\r\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\r\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\r\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\r\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\r\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\r\n\t\t\t\t\t} );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddNewField: function() {\r\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\taddNewAction: function() {\r\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeDomainFields: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\r\n\t\t},\r\n\r\n\t\tchangeDomainActions: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\r\n\t\t},\r\n\r\n\t\tchangeDomainSettings: function() {\r\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\r\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\r\n\t\t},\r\n\r\n\t\tcloseDrawer: function() {\r\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Change the clean state of our app when settings are changed.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cleanState',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Set an array of field model attributes to ignore.\r\n\t\t\t * This list will be filtered just before we ignore anything.\r\n\t\t\t */ \r\n\t\t\tthis.ignoreAttributes = [\r\n\t\t\t\t'editActive'\r\n\t\t\t];\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\r\n\t\t},\r\n\r\n\t\tsetAppClean: function( model ) {\r\n\t\t\tfor( var attr in model.changedAttributes() ) {\r\n\t\t\t\tvar changedAttr = attr;\r\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\r\n\t\t\t}\r\n\r\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\r\n\t\t\t\r\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/coreUndo',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\r\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo settings that have been changed.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoChangeSetting: function( change, undoAll ) {\r\n\t\t\tvar fieldModel = change.get( 'model' );\r\n\t\t\tvar changes = change.get( 'changes' );\r\n\t\t\tvar attr = changes.attr;\r\n\t\t\tvar before = changes.before;\r\n\t\t\tfieldModel.set( attr, before );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo adding a field or an action.\r\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoAddObject: function( change, undoAll ) {\r\n\t\t\tvar objectModel = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\r\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\r\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\r\n\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( model );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcollection.remove( objectModel );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\t\t\r\n\r\n\t\t/**\r\n\t\t * Undo adding a field or an action.\r\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoDuplicateObject: function( change, undoAll ) {\r\n\t\t\tvar objectModel = change.get( 'model' );\r\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( model );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tobjectCollection.remove( objectModel );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo removing a field or an action.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoRemoveObject: function( change, undoAll ) {\r\n\t\t\tvar dataModel = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\r\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\r\n\r\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\r\n\t\t\t\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tmodel.set( 'disabled', false );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\r\n\t\t\tcollection.trigger( 'reset', collection );\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Undo field sorting.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\r\n\t\t * @return void\r\n\t\t */\r\n\t\tundoSortFields: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar fields = data.fields;\r\n\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields, function( changeModel ) {\r\n\t\t\t\tvar before = changeModel.before;\r\n\t\t\t\tvar fieldModel = changeModel.model;\r\n\t\t\t\tfieldModel.set( 'order', before );\r\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\r\n\t\t\t} );\r\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\r\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\r\n\r\n\r\n\t\t\tfieldCollection.sort();\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoAddListOption: function( change, undoAll ) {\r\n\t\t\tvar model = change.get( 'model' );\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\t\tif ( changeModel !== change ) {\r\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tmodel.collection.remove( model );\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoRemoveListOption: function( change, undoAll ) {\r\n\t\t\tvar model = change.get( 'model' );\r\n\t\t\tvar collection = change.get( 'data' ).collection;\r\n\t\t\tcollection.add( model );\r\n\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t\t_.each( results, function( model ) {\r\n\t\t\t\t\tif ( model !== change ) {\r\n\t\t\t\t\t\tmodel.set( 'disabled', false );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\tundoSortListOptions: function( change, undoAll ) {\r\n\t\t\tvar data = change.get( 'data' );\r\n\t\t\tvar collection = data.collection;\r\n\t\t\t\r\n\t\t\tvar objModels = data.objModels;\r\n\r\n\t\t\t_.each( objModels, function( changeModel ) {\r\n\t\t\t\tvar before = changeModel.before;\r\n\t\t\t\tvar optionModel = changeModel.model;\r\n\t\t\t\toptionModel.set( 'order', before );\r\n\t\t\t} );\t\t\t\t\r\n\r\n\r\n\t\t\tcollection.sort();\r\n\t\t\tthis.maybeRemoveChange( change, undoAll );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tchange \tmodel of our change\r\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\r\n\t\t * @return void\r\n\t\t */\r\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\r\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\r\n\t\t\tif ( ! undoAll ) {\r\n\t\t\t\t// Update preview.\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\t\tchangeCollection.remove( change );\r\n\t\t\t\tif ( 0 == changeCollection.length ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cloneModelDeep',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\r\n\t\t},\r\n\r\n\t\tcloneModelDeep: function( model ) {\r\n\t\t\t// Temporary value used to store any new collections.\r\n\t\t\tvar replace = {};\r\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\r\n\t\t\t_.each( model.attributes, function( val, key ) {\r\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\r\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\r\n\t\t\t\t\treplace[ key ] = clonedCollection;\r\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\r\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\r\n\t\t\t\t}\r\n\t\t\t}, this );\r\n\r\n\t\t\t// Clone our original model\r\n\t\t\tvar newModel = model.clone();\r\n\t\t\t// Overwrite any collections we created above.\r\n\t\t\t_.each( replace, function( val, key ) {\r\n\t\t\t\tnewModel.set( key, val );\r\n\t\t\t} );\r\n\r\n\t\t\treturn newModel;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns the appropriate child view for our settings drawer.\r\n *\r\n * This enables settings types to register custom childviews for their settings.\r\n * The option-repeater setting for the list field is an example.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App - Edit Settings Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for field settings child views.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return the appropriate child setting view.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model\tmodel \tField setting\r\n\t\t * @return backbone.view\r\n\t\t */\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\t// Get our setting type.\r\n\t\t\tvar type = model.get( 'type' );\r\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\r\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\r\n\t\t\t\r\n\t\t\treturn settingChildView\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Updates our model when the user changes a setting.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeSettingDefault',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to update settings.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\r\n\r\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change our setting, update the model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te                event\r\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\r\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\r\n\t\t\tvar name = settingModel.get( 'name' );\r\n\t\t\tvar before = dataModel.get( name );\r\n\t\t\tvar value = value || null;\r\n\t\t\tif ( ! value ) {\r\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\r\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\r\n\t\t\t}\r\n\r\n\t\t\tif( 'undefined' == typeof value ){\r\n\t\t\t    value = jQuery( e.target ).val();\r\n            }\r\n\t\t\t\r\n\t\t\t// Update our field model with the new setting value.\r\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\r\n\t\t\tnfRadio.channel( 'setting-' + name ).trigger( 'after:updateSetting', dataModel, settingModel );\r\n\t\t\t// Register our setting change with our change tracker\r\n\t\t\tvar after = value;\r\n\t\t\t\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\r\n\t\tchildView: itemSettingView,\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.collection = this.model.get( 'settings' );\r\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.model.on( 'rerender', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\t    \t\trenderSetting: function(){\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\t\t\t\t\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderError: function() {\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\treturn this.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\r\n\t\t}\r\n\t} );\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Model that represents our setting.\r\n *\r\n * When the model is created, we trigger the init event in two radio channels.\r\n *\r\n * This lets specific types of settings modify the model before anything uses it.\r\n *\r\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tsettings: false,\r\n\t\t\thide_merge_tags: false,\r\n\t\t\terror: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Send out two messages saying that we've initialized a setting model.\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\r\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\r\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\r\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\r\n\t\t\t * If we're using merge tags in this setting\r\n\t\t\t */\r\n\t\t\tif( 'undefined' == typeof this.collection ) return;\r\n\r\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\r\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\r\n\t\t * We want to send the message on the objectType channel.\r\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateKey: function( keyModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\r\n\t\t},\r\n\r\n\t\tmaybePreventUI: function() {\r\n\t\t\tif ( this.get( 'error' ) ) {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collections of settings for each field type.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: settingModel,\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\tthis.options = options || {};\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Handles actions related to field settings that use a fieldset\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t\t// When a list type field is initialized, create an option collection.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\r\n\t\t},\r\n\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\treturn fieldsetView;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Instantiate settings collection when a fieldset type is initialized.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcreateSettingsCollection: function( model ) {\r\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\r\n\t\t},\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to our toggle field.\r\n * When we change the toggle, the setting value will be 'on' or ''.\r\n * We need to change this to 1 or 0.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/toggleSetting',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\r\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\r\n\r\n\t\t\t// Respond to requests for field setting filtering.\r\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return either 1 or 0, depending upon the toggle position.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te                event\r\n\t\t * @param  backbone.model \tfieldModel       field model\r\n\t\t * @param  string \t\t\tname             setting name\r\n\t\t * @param  backbone.model \tsettingTypeModel field type model\r\n\t\t * @return int              1 or 0\r\n\t\t */\r\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\r\n\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\r\n\t\t\t\tvar value = 1;\r\n\t\t\t} else {\r\n\t\t\t\tvar value = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn value;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens for clicks on our action item action buttons.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Main Sortable\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/itemControls',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.clickDelete );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\r\n\r\n\t\t\t// Listen for our drawer close and remove our active edit state\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Open a drawer with our action model for editing settings.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickEdit: function( e, model ) {\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\tvar type = nfRadio.channel( currentDomainID ).request( 'get:type' , model.get( 'type' ) );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: type.get( 'settingGroups' ) } );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a action model from our collection\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickDelete: function( e, dataModel ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\r\n\r\n\t\t\t// Add our action deletion to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Removed',\r\n\t\t\t\tdashicon: 'dismiss'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: dataModel.collection\r\n\t\t\t};\r\n\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\r\n\r\n\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\tvar data = changeModel.get( 'data' );\r\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\r\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\r\n\t\t\t\t\t\tif ( field.model == dataModel ) {\r\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tchangeModel.set( 'data', data );\r\n\t\t\t\tchangeModel.set( 'model', newModel );\r\n\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t} );\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te     \tevent\r\n\t\t * @param  backbone.model \tmodel \taction model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tclickDuplicate: function( e, model ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\r\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\r\n\r\n\t\t\t// Change our label.\r\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy' );\r\n\t\t\t// Update our ID to the new tmp id.\r\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\r\n\t\t\tnewModel.set( 'id', tmpID );\r\n\t\t\t// Add new model.\r\n\t\t\t// Params are: model, silent, renderTrigger, action\r\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\r\n\t\t\t\r\n\t\t\t// Add our action addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: model.get( 'objectType' ),\r\n\t\t\t\tlabel: model.get( 'label' ),\r\n\t\t\t\tchange: 'Duplicated',\r\n\t\t\t\tdashicon: 'admin-page'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tmodel.trigger( 'change:label', model );\r\n\r\n\t\t\t// Update preview.\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Config file for our merge tags.\r\n *\r\n * this.collection represents all of our registered merge tags.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/mergeTags',[\r\n\t'models/app/mergeTagCollection'\r\n\t], function(\r\n\tmergeTagCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( mergeTags, function( tagSection ) {\r\n\t\t\t\tif ( tagSection.tags ) {\r\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar tags = '';\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthat.tagSectionCollection.add( {\r\n\t\t\t\t\tid: tagSection.id,\r\n\t\t\t\t\tlabel: tagSection.label,\r\n\t\t\t\t\ttags: tags,\r\n\t\t\t\t\tdefault_group: tagSection.default_group\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\r\n\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\t// TODO: Make this dynamic\r\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\r\n\t\t\t\t\tfieldTags.add( {\r\n\t\t\t\t\t\tid: field.get( 'id' ),\r\n\t\t\t\t\t\tlabel: field.get( 'label' ),\r\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\r\n\t\t\t\t\t} );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tvar calcTags = new mergeTagCollection();\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\r\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\r\n\t\t\t\tcalcTags.add( {\r\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\r\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\r\n\r\n\t\t\tthis.currentElement = {};\r\n\t\t\tthis.settingModel = {};\r\n\t\t\tthis.open = false;\r\n\r\n\t\t\t// Unhook jBox Merge Tag stuff.\r\n\t\t\t// nfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\r\n\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\r\n\r\n\t\t\t// Listen for requests for our mergeTag collection.\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\r\n\r\n\t\t\t// When a field's ID is changed (ie from a tmpID), update the merge tag.\r\n            this.listenTo( nfRadio.channel( 'fieldSetting-id' ), 'update:setting', this.updateID );\r\n\r\n\t\t\t// When we edit a key, check for places that key might be used.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\r\n\r\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\r\n\r\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Hotkey support for adding tags.\r\n\t\t\t *\r\n\t\t\t\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\r\n\t\t\t*/\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Init merge tags within the passed view.\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.view view to be searched for merge tags.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tinitMergeTags: function( view ) {\r\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * Apply merge tags jQuery plugin.\r\n\t\t\t *\r\n\t\t\t * Prevent jBox from being called multiple times on the same element\r\n\t\t\t */\r\n\t\t\tthis.jBoxes = {};\r\n\t\t\tvar that = this;\r\n\r\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\r\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\r\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\r\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\r\n\t\t\t\t\t\ttrigger: 'click',\r\n\t\t\t\t\t\tposition: {\r\n\t\t\t\t\t\t\tx: 'center',\r\n\t\t\t\t\t\t\ty: 'bottom'\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tcloseOnClick: 'body',\r\n\t\t\t\t\t\tcloseOnEsc: true,\r\n\t\t\t\t\t\ttheme: 'TooltipBorder',\r\n\t\t\t\t\t\tmaxHeight: 200,\r\n\r\n\t\t\t\t\t\tonOpen: function() {\r\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\r\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\r\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\r\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\r\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\r\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\r\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tonClose: function() {\r\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t    });\r\n\t\t},\r\n\r\n\t\tclickMergeTag: function( e, tagModel ) {\r\n\t\t\t/*\r\n\t\t\t * TODO: Make this more dynamic.\r\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\r\n\t\t\t * but another type of setting might need to do this in the future.\r\n\t\t\t */\r\n\r\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\r\n\r\n\t\t\t\tconsole.log( tagModel );\r\n\r\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\r\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\r\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\r\n\r\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\r\n\r\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\r\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\r\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\r\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\r\n\t\t\t} else {\r\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\r\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\r\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\r\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\r\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\taddFieldTags: function( fieldModel ) {\r\n\t\t\t// TODO: Make this dynamic\r\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\r\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\r\n\t\t\t\t\tid: fieldModel.get( 'id' ),\r\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\r\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdeleteFieldTags: function( fieldModel ) {\r\n\t\t\tvar fieldID = fieldModel.get( 'id' );\r\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\r\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\r\n\t\t},\r\n\r\n\t\tupdateCalcTags: function( optionModel ) {\r\n\t\t\tvar calcTags = new mergeTagCollection();\r\n\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\r\n\r\n\t\t\t_.each( calcCollection.models, function( calc ) {\r\n\t\t\t\tcalcTags.add( {\r\n\t\t\t\t\tlabel: calc.get( 'name' ),\r\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\r\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\r\n\t\t},\r\n\r\n\t\topenMergeTags: function( e ) {\r\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\r\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\treturnMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\r\n\t\t\t\tif ( currentModel ) {\r\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.changeActiveTag( 'up' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdownMergeTags: function( e ) {\r\n\t\t\tif ( this.open ) {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tthis.changeActiveTag( 'down' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tchangeActiveTag: function( dir ) {\r\n\t\t\tif ( 'down' == dir ) {\r\n\t\t\t\tvar inc = 1;\r\n\t\t\t} else {\r\n\t\t\t\tvar inc = -1\r\n\t\t\t}\r\n\t\t\t// First, check to see if a field is currently active.\r\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\r\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\r\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\r\n\t\t\t\tcurrentModel.set( 'active', false );\r\n\r\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\r\n\t\t\t\tif ( nextModel ) {\r\n\t\t\t\t\tnextModel.set( 'active', true );\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\r\n\t\t\t\tconsole.log( 'system' );\r\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\r\n\t\t\t\tconsole.log( 'userinfo' );\r\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\r\n\t\t\t\t// Make sure that we have fields\r\n\t\t\t\tif ( 0 < this.fields.models.length ) {\r\n\t\t\t\t\t// Set our first field to active.\r\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// Set our first system model to active.\r\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateCurrentElement: function( element ) {\r\n\t\t\tthis.currentElement = element;\r\n\t\t},\r\n\r\n\t\tupdateCurrentSetting: function( settingModel ) {\r\n\t\t\tthis.settingModel = settingModel;\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.tagSectionCollection;\r\n\t\t},\r\n\r\n\t\tgetSectionModel: function( id ) {\r\n\t\t\treturn this.tagSectionCollection.get( id );\r\n\t\t},\r\n\r\n\t\tupdateOpen: function( open ) {\r\n\t\t\tthis.open = open;\r\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\r\n\t\t\t\tmodel.set( 'active', false );\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\t// When a field is published, update the merge tag with the newly assigned ID (as opposed to the tmpID).\r\n        updateID: function( fieldModel ) {\r\n\r\n\t\t\t// Get the formatted merge tag for comparison.\r\n\t\t\tvar targetTag = this.getFieldKeyFormat( fieldModel.get( 'key' ) );\r\n\r\n\t\t\t// Search the field tags for the matching merge tag to be updated.\r\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).find( function( fieldMergeTag ){\r\n                return targetTag == fieldMergeTag.get( 'tag' );\r\n            });\r\n\r\n\t\t\t// If no matching tag is found, return early.\r\n\t\t\tif( 'undefined' == typeof oldTag ) return;\r\n\r\n\t\t\t// Update the merge tag with the \"published\" field ID.\r\n\t\t\toldTag.set( 'id', fieldModel.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\tupdateKey: function( fieldModel ) {\r\n\t\t\tvar newKey = fieldModel.get( 'key' );\r\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\r\n\t\t\tif ( 'undefined' != typeof oldTag ) {\r\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\r\n\t\t\t}\r\n\r\n\t\t},\r\n\r\n\t\tgetFieldKeyFormat: function( key ) {\r\n\t\t\treturn '{field:' + key + '}';\r\n\t\t},\r\n\r\n\t\tgetFieldKeyFormatCalc: function( key ) {\r\n\t\t\treturn '{field:' + key + ':calc}';\r\n\t\t},\r\n\r\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\r\n            var oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\r\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\r\n\t\t\tvar settingName = settingModel.get( 'name' );\r\n\t\t\tvar oldVal = dataModel.get( settingName );\r\n            if(settingName == 'calculations' && 'undefined' != typeof(dataModel.get('calculations'))) {\r\n                var calcModel = dataModel.get( 'calculations' );\r\n                calcModel.each( function( model ) {\r\n                    var oldCalcKey = oldKey.slice( 0, (oldKey.length - 1) ) + ':calc}';\r\n                    var newCalcKey = newKey.slice( 0, (newKey.length - 1 ) ) + ':calc}';\r\n                    oldVal = model.get( 'eq' );\r\n                    if ( 'string' == typeof( oldVal ) ) {\r\n                        var re = new RegExp( oldCalcKey, 'g' );\r\n                        var newVal = oldVal.replace( re, newCalcKey );\r\n                        re = new RegExp( oldKey, 'g' );\r\n                        // TODO: We won't need this second replace when we no longer\r\n                        // have to append :calc to merge tags.\r\n                        newVal = newVal.replace( re, newKey );\r\n                        model.set( 'eq', newVal );\r\n                    }\r\n                } );\r\n                return false;\r\n            }\r\n\t\t\tif ( 'string' == typeof oldVal ) {\r\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\r\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\r\n\t\t\t\tdataModel.set( settingName, newVal );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/mergeTagLookupCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\r\n    var collection = Backbone.Collection.extend( {\r\n        model: mergeTagModel\r\n    } );\r\n    return collection;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTag',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        tagName: 'li',\r\n        template: '#tmpl-nf-merge-tag-box-tag',\r\n\r\n        events: {\r\n            \"click\": \"insertTag\"\r\n        },\r\n\r\n        insertTag: function() {\r\n            nfRadio.channel( 'mergeTags' ).request( 'insert:tag', this.model.get( 'tag' ) );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagList',[ 'views/app/drawer/mergeTag' ], function( mergeTagView ) {\r\n    var view = Marionette.CollectionView.extend({\r\n        tagName: 'ul',\r\n        childView: mergeTagView,\r\n\r\n        initialize: function() {\r\n            nfRadio.channel( 'merge-tags' ).reply( 'update:taglist', this.sectionFilter, this );\r\n            nfRadio.channel( 'merge-tags' ).reply( 'filtersearch', this.searchFilter, this );\r\n        },\r\n\r\n        filter: function( child, index, collection ){\r\n            return 'fields' == child.get( 'section' );\r\n        },\r\n\r\n        sectionFilter: function( section ){\r\n            this.filter = function( child, index, collection ){\r\n                return section == child.get( 'section' );\r\n            }\r\n            this.render();\r\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\r\n        },\r\n\r\n        searchFilter: function( term ){\r\n            this.filter = function( child, index, collection ){\r\n                var label = child.get( 'label' ).toLowerCase().indexOf( term.toLowerCase().replace( ':', '' ) ) >= 0;\r\n                var tag   = child.get( 'tag' ).toLowerCase().indexOf( term.toLowerCase() ) >= 0;\r\n                return label || tag;\r\n            }\r\n            this.render();\r\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\r\n\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagGroup',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        tagName: 'li',\r\n        template: '#tmpl-nf-merge-tag-box-section',\r\n        events: {\r\n            \"click\": \"onClick\"\r\n        },\r\n\r\n        initialize: function () {\r\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'after:filtersearch', this.removeActive );\r\n        },\r\n\r\n        onClick: function(){\r\n          this.updateTags();\r\n          this.setActive();\r\n        },\r\n\r\n        updateTags: function() {\r\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', this.model.get( 'id' ) );\r\n        },\r\n\r\n        setActive: function(){\r\n            this.$el.addClass( 'active' );\r\n            this.$el.siblings().removeClass( 'active' );\r\n        },\r\n\r\n        removeActive: function(){\r\n            this.$el.removeClass( 'active' );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagGroupList',[ 'views/app/drawer/mergeTagGroup' ], function( mergeTagGroupView ) {\r\n    var view = Marionette.CollectionView.extend({\r\n        tagName: 'ul',\r\n        childView: mergeTagGroupView,\r\n\r\n        initialize: function(){\r\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'open', this.render, this );\r\n        },\r\n\r\n        // TODO: Update filter when a new tag is added. ie Calculations.\r\n        filter: function( child, index, collection ){\r\n            return 0 < child.get( 'tags' ).length;\r\n        },\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagFilter',[], function() {\r\n    var view = Marionette.ItemView.extend({\r\n        template: '#tmpl-nf-merge-tag-box-filter',\r\n        events: {\r\n            \"keyup input\": \"updateFilter\",\r\n        },\r\n        updateFilter: function( event ) {\r\n\r\n            if( /* ENTER */ 13 == event.keyCode ){ // Copied from Keyup Callback.\r\n                // Get top listed merge tag.\r\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\r\n\r\n                // COPIED FROM BELOW\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                return;\r\n            }\r\n            var value = this.$el.find( 'input' ).val();\r\n            nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\r\n        }\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/drawer/mergeTagBox',[], function() {\r\n    var view = Marionette.LayoutView.extend({\r\n        el: '#merge-tags-box',\r\n        template: \"#tmpl-nf-merge-tag-box\",\r\n\r\n        regions: {\r\n            filter:   '.merge-tag-filter',\r\n            sections: '.merge-tag-sections',\r\n            tags:     '.merge-tag-list'\r\n        },\r\n    });\r\n\r\n    return view;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage Merge Tag Box\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1\r\n */\r\n\r\ndefine( 'controllers/app/mergeTagBox',[\r\n    'models/app/mergeTagModel',\r\n    'models/app/mergeTagLookupCollection',\r\n    'views/app/drawer/mergeTag',\r\n    'views/app/drawer/mergeTagList',\r\n    'views/app/drawer/mergeTagGroup',\r\n    'views/app/drawer/mergeTagGroupList',\r\n    'views/app/drawer/mergeTagFilter',\r\n    'views/app/drawer/mergeTagBox'\r\n], function(\r\n    MergeTagModel,\r\n    MergeTagLookupCollection,\r\n    MergeTagView,\r\n    MergeTagListView,\r\n    MergeTagGroupView,\r\n    MergeTagGroupListView,\r\n    MergeTagFilterView,\r\n    MergeTagBoxLayout\r\n) {\r\n    var controller = Marionette.Object.extend( {\r\n\r\n        caret: 0, // Track the caret position of the current setting's input.\r\n        old: '', // THe old merge tag that will be replaced.\r\n\r\n        initialize: function(){\r\n\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', function(){\r\n                jQuery( '.merge-tags' ).off( 'click' );\r\n                jQuery( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            });\r\n\r\n            this.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterAppStart );\r\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\r\n\r\n            var that = this;\r\n            nfRadio.channel( 'mergeTags' ).reply( 'set:caret', function( position ){\r\n               that.caret = position;\r\n            });\r\n            nfRadio.channel( 'mergeTags' ).reply( 'get:caret', function(){\r\n                return that.caret;\r\n            });\r\n\r\n            var that = this;\r\n            nfRadio.channel( 'mergeTags' ).reply( 'set:old', function( value ){\r\n                that.old = value;\r\n            });\r\n            nfRadio.channel( 'mergeTags' ).reply( 'get:old', function(){\r\n                return that.old;\r\n            });\r\n\r\n            nfRadio.channel( 'mergeTags' ).reply( 'insert:tag', this.insertTag.bind( this ) );\r\n\r\n            /** OPTION REPEATER */\r\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'add:option', function( model ){\r\n                var selector = '#' + model.cid + ' .has-merge-tags input.setting';\r\n                jQuery( selector ).on( 'focus', function( event ){\r\n                   that.focusCallback( event, selector, 'option-repeater' );\r\n                });\r\n                jQuery( selector ).on( 'keyup', function( event ){\r\n                    that.keyupCallback( event, selector, 'option-repeater' );\r\n                });\r\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).off( 'click' );\r\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\r\n                jQuery( '.nf-list-options .merge-tags' ).off( 'click' );\r\n                jQuery( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            } );\r\n\r\n            /* CALCULATIONS */\r\n            this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', this.renderSetting );\r\n            // this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', function( settingModel, dataModel, view ){\r\n            //     view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            // } );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\r\n                jQuery( '.nf-list-options.calculations .merge-tags' ).off( 'click' );\r\n                jQuery( '.nf-list-options.calculations .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            } );\r\n\r\n            /* SUMMERNOTE */\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'focus', function( e, selector ) {\r\n                that.focusCallback( false, selector, 'rte' );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keydown', function( e, selector ){\r\n                jQuery( selector ).closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keyup', function( e, selector ){\r\n                that.keyupCallback( e, selector, 'rte' );\r\n            } );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\r\n                jQuery( '.note-editor .merge-tags' ).off( 'click' );\r\n                jQuery( '.note-editor .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n            } );\r\n\r\n            jQuery( document ).on( 'keyup', function( event ){\r\n                if( 27 == event.keyCode ){\r\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\r\n                    // Copied from KeyupCallback.\r\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                    jQuery( '#merge-tags-box' ).removeClass();\r\n                    jQuery( '.merge-tag-focus' ).blur();\r\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                }\r\n            });\r\n\r\n            /**\r\n             * Listen to the Field Changes (add, delete, update) and update the Merge Tags.\r\n             */\r\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'add:field',    this.afterAppStart );\r\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'delete:field', this.afterAppStart );\r\n            this.listenTo( Backbone.Radio.channel( 'fieldSetting-key' ), 'update:setting', this.afterAppStart );\r\n\r\n            /** ... and Calc updates. */\r\n            this.listenTo( Backbone.Radio.channel( 'calcs' ), 'update:calc', this.afterAppStart );\r\n\r\n            this.listenTo( Backbone.Radio.channel( 'app' ), 'change:currentDomain', this.afterAppStart );\r\n        },\r\n\r\n        afterAppStart: function() {\r\n\r\n            var currentDomain = Backbone.Radio.channel( 'app' ).request( 'get:currentDomain' );\r\n\r\n            var mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\r\n            var mergeTags = [];\r\n            mergeTagCollection.each( function( section ){\r\n\r\n                section.get( 'tags' ).each( function( tag ){\r\n\r\n                    if( 'fields' == currentDomain.get( 'id' ) && '{submission:sequence}' == tag.get( 'tag' ) ) return;\r\n\r\n                    mergeTags.push({\r\n                        label: tag.get( 'label' ),\r\n                        tag:   tag.get( 'tag' ),\r\n                        section: section.get( 'id' )\r\n                    });\r\n                });\r\n            });\r\n            var layout = new MergeTagBoxLayout();\r\n            layout.render();\r\n            var tagCollection = new MergeTagLookupCollection( mergeTags );\r\n            var mergeTagListView = new MergeTagListView({\r\n                collection: tagCollection\r\n            });\r\n            var mergeTagGroupListView = new MergeTagGroupListView({\r\n                collection: mergeTagCollection\r\n            });\r\n\r\n            layout.getRegion('tags').show(mergeTagListView);\r\n            layout.getRegion('sections').show(mergeTagGroupListView);\r\n            layout.getRegion('filter').show(new MergeTagFilterView);\r\n        },\r\n\r\n        beforeRenderSetting: function( settingModel, dataModel ){\r\n            if( 'undefined' == typeof settingModel.get( 'use_merge_tags' ) ) return;\r\n            if( ! settingModel.get( 'use_merge_tags' ) ) return;\r\n            var name = settingModel.get( 'name' );\r\n            this.listenTo( nfRadio.channel( 'setting-' + name ), 'render:setting', this.renderSetting );\r\n        },\r\n\r\n        renderSetting: function( settingModel, dataModel, view ){\r\n\r\n            view.$el.find( '.merge-tags' ).off( 'click' );\r\n            view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\r\n\r\n            if( 0 == jQuery( '#merge-tags-box' ).length ) this.afterAppStart();\r\n\r\n            // Track Scrolling.\r\n            jQuery( '#nf-drawer' ).on( 'scroll', function(){\r\n               // COPIED AND MODIFIED FROM FOCUS\r\n                if( 0 == jQuery( '.merge-tag-focus' ).length ) return;\r\n\r\n                var rteEditor = jQuery( '.merge-tag-focus' ).closest( '.nf-setting' ).find( '.note-editor' );\r\n                if( 0 != rteEditor.length ){\r\n                    var posY = rteEditor.offset().top - jQuery(window).scrollTop();\r\n                    var height = rteEditor.outerHeight();\r\n                } else {\r\n                    var posY = jQuery('.merge-tag-focus').offset().top - jQuery(window).scrollTop();\r\n                    var height = jQuery('.merge-tag-focus').outerHeight();\r\n                }\r\n                jQuery( '#merge-tags-box' ).css( 'top', posY + height );\r\n\r\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\r\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\r\n\r\n                var repeaterRow = jQuery( '.merge-tag-focus' ).closest( '.nf-list-options-tbody' );\r\n                if( 0 != repeaterRow.length ){\r\n                    var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\r\n                    jQuery( '#merge-tags-box' ).css( 'left', left );\r\n                } else {\r\n                    var posX = jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\r\n                    jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                    jQuery( '#merge-tags-box' ).css( 'width', jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).width() );\r\n                }\r\n            });\r\n\r\n            // On input focus, move the Merge Tag Box into position.\r\n            jQuery( view.el ).find( '.setting' ).on( 'focus', this.focusCallback );\r\n\r\n            // TODO: Maybe move to view events.\r\n            // On input keyup, maybe show Merge Tag Box.\r\n            jQuery( view.el ).find( '.setting' ).on( 'keyup', this.keyupCallback );\r\n        },\r\n\r\n        // TODO: Maybe move to view class.\r\n        beforeDrawerClose: function(){\r\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n            // jQuery( 'body' ).append( jQuery( '#merge-tags-box' ) );\r\n        },\r\n\r\n        insertTag: function( tag ) {\r\n\r\n            var $input = jQuery( '.merge-tag-focus' );\r\n\r\n            if( 0 != $input.closest( '.nf-setting' ).first().find( '.note-editable' ).length ){\r\n                $input = $input.closest( '.nf-setting' ).first().find( '.note-editable' );\r\n            }\r\n\r\n            if( 1 < $input.length ){ $input = $input.first(); }\r\n\r\n            if( $input.hasClass( 'note-editable' ) ){\r\n                var str = $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code' );\r\n            } else {\r\n                var str = $input.val();\r\n            }\r\n\r\n            var find = nfRadio.channel( 'mergeTags' ).request( 'get:old' );\r\n            var replace = tag;\r\n            var caretPos = nfRadio.channel( 'mergeTags' ).request( 'get:caret' );\r\n\r\n            var patt = /{([a-zA-Z0-9]|:|_||-})*/g;\r\n\r\n            // Loop through matches to find insert/replace index range.\r\n            // Reference: http://codepen.io/kjohnson/pen/36c3a782644dfff40fe3c1f05f8739d9?editors=0012\r\n            while (match = patt.exec(str)) {\r\n                if (find != match[0]) continue; // This isn't the match you are looking for...\r\n                var string = str.slice(0, match.index) + replace + str.slice(patt.lastIndex); // Fancy replace for the specifc match, using the index/position.\r\n\r\n                if( $input.hasClass( 'note-editable' ) ){\r\n                    $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code', string );\r\n\r\n                    // Reposition the caret. http://stackoverflow.com/a/6249440 TODO: Determine the appropriate childNode.\r\n                    var el = $input;\r\n                    var childNode = null; // Default to first childNode.\r\n                    _.each( el[0].childNodes, function( node, index ){\r\n                        if( childNode ) return;\r\n                        if( ! node.nodeValue && ! node.innerHTML ) return;\r\n                        if( node.nodeValue ) {\r\n                            var position = node.nodeValue.indexOf(replace) + find.length;\r\n                        } else if( node.innerHTML ){\r\n                            var position = node.innerHTML.indexOf(replace) + find.length;\r\n                        }\r\n                        if( caretPos == position ) childNode = el[0].childNodes[index];\r\n                    });\r\n                    if( ! childNode ) childNode = el[0].childNodes[0];\r\n                    var offset = caretPos - find.length + replace.length;\r\n                    var range = document.createRange();\r\n                    var sel = window.getSelection();\r\n                    if( 0 != childNode.childNodes.length ) {\r\n                        try{\r\n                           range.setStart(childNode.childNodes[0], offset); \r\n                        } catch( err ) {\r\n                            console.log( 'error' );\r\n                        }\r\n                        \r\n                    } else {\r\n                        try {\r\n                            range.setStart(childNode, offset);\r\n                        } catch( err ) {\r\n                            console.log( 'error' );\r\n                        }\r\n                        \r\n                    }\r\n                    range.collapse(true);\r\n                    sel.removeAllRanges();\r\n                    sel.addRange(range);\r\n\r\n\r\n                } else {\r\n                    $input.val(string); // Update input value with parsed string.\r\n                    $input.change(); // Trigger a change event after inserting the merge tag so that it saves to the model.\r\n                    $input.caret(caretPos - find.length + replace.length); // Update Carept Position.\r\n                }\r\n\r\n            }\r\n\r\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n            $input.removeClass( 'merge-tag-focus' );\r\n            $input.closest( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n        },\r\n\r\n        mergeTagsButtonClick: function( e ){\r\n\r\n            var $this = jQuery( this );\r\n\r\n            if( $this.siblings().hasClass( 'merge-tag-focus' ) ){\r\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                return;\r\n            }\r\n\r\n            if( 0 !== $this.closest( '.nf-setting, .nf-table-row' ).find( '.note-tools' ).length ){\r\n                var $inputSetting = $this.closest( '.note-editor' ).siblings( '.setting' ).first();\r\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\r\n            } else {\r\n                var $inputSetting = $this.siblings( '.setting' ).first();\r\n                var text = $inputSetting.val() || '';\r\n                $inputSetting.val( text + '{' ).change();\r\n                nfRadio.channel('mergeTags').request('set:caret', text.length + 1 );\r\n            }\r\n\r\n            if( $this.parent().hasClass( 'note-tools' ) ){\r\n                // $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\r\n            }\r\n\r\n            nfRadio.channel('mergeTags').request('set:old', '{' );\r\n\r\n            $inputSetting.addClass( 'merge-tag-focus' );\r\n\r\n            // Disable browser autocomplete.\r\n            var autocomplete = $this.attr( 'autocomplete' );\r\n            $this.attr( 'autocomplete', 'off' );\r\n            $this.data( 'autocomplete', autocomplete );\r\n\r\n            var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\r\n            if( 0 != $overlayElement.find( '.note-editor' ).length ){\r\n                $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\r\n            } else {\r\n                $overlayElement.addClass('merge-tag-focus-overlay');\r\n            }\r\n\r\n            jQuery( '#merge-tags-box' ).css( 'display', 'block' );\r\n            nfRadio.channel( 'drawer' ).request( 'prevent:close' );\r\n\r\n            jQuery( '.merge-tag-focus-overlay' ).off( 'click' );\r\n            jQuery( '.merge-tag-focus-overlay' ).on( 'click', function( e ) {\r\n                if ( jQuery( e.target ).hasClass( 'note-editor' ) ) {\r\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\r\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                    jQuery( '#merge-tags-box' ).removeClass();\r\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                }\r\n            } );\r\n\r\n            setTimeout(function(){\r\n                jQuery( '#merge-tags-box' ).find( '.merge-tag-filter' ).find( 'input' ).focus();\r\n            }, 500 );\r\n        },\r\n\r\n        focusCallback: function( e, target, type ){\r\n\r\n            var type = type || 'setting';\r\n            var $this = ( 'undefined' == typeof target ) ? jQuery( this ) : jQuery( target );\r\n\r\n            jQuery( '.merge-tag-focus' ).each(function(index, el){\r\n                if( this == el ) return;\r\n                el.removeClass( 'merge-tag-focus' );\r\n            });\r\n\r\n            if( 'rte' == type ) {\r\n                var posY = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().top - jQuery(window).scrollTop();\r\n                var height = $this.closest( '.nf-setting' ).find( '.note-editor' ).outerHeight();\r\n            } else {\r\n                var posY = $this.offset().top - jQuery(window).scrollTop();\r\n                var height = $this.outerHeight();\r\n            }\r\n            jQuery( '#merge-tags-box' ).css( 'top', posY + height );\r\n\r\n            var repeaterRow = $this.closest( '.nf-list-options-tbody' );\r\n            if( 0 != repeaterRow.length ) {\r\n                var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', left );\r\n            } else if( 'rte' == type ) {\r\n                var posX = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-setting' ).find( '.note-editor' ).width() );\r\n            }\r\n            else\r\n            {\r\n                var posX = jQuery( this ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\r\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\r\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-settings' ).width() );\r\n            }\r\n\r\n            var dataID = jQuery( this ).data( 'id' );\r\n            if( dataID && 'eq' != dataID ) return;\r\n\r\n            // var offset = jQuery( view.el ).find( '.setting' ).parent().outerHeight();\r\n            // jQuery( view.el ).find( '.setting' ).parent().append( jQuery( '#merge-tags-box' ) );\r\n            // jQuery( '#merge-tags-box' ).css( 'top', offset );\r\n        },\r\n\r\n        keyupCallback: function( event, target, type ){\r\n\r\n            var type = type || 'setting';\r\n\r\n            if( /* ENTER */ 13 == event.keyCode ){\r\n\r\n                // Get top listed merge tag.\r\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\r\n\r\n                // COPIED FROM BELOW\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n\r\n                return;\r\n            }\r\n\r\n            // Get the value.\r\n            // var value = jQuery( summernote ).summernote( 'code' );\r\n            // Update the value.\r\n            // jQuery( summernote ).closest( '.nf-setting' ).find( '.note-editable' ).html( value );\r\n\r\n            if( 'undefined' != typeof target ) {\r\n                var $this = jQuery(target);\r\n            } else {\r\n                var $this = jQuery( this );\r\n            }\r\n\r\n            // TODO: Disable Browser Autocomplete\r\n            // $this.attr()\r\n\r\n\r\n            var dataID = jQuery( this ).data( 'id' );\r\n            if( dataID && 'eq' != dataID ) return;\r\n\r\n            // Store the current caret position.\r\n            if( 'rte' == type ){\r\n                var range = $this.summernote('createRange');\r\n                if( range ) {\r\n                    var caretPos = range.so; // or .eo?\r\n                } else {\r\n                    var caretPos = 0;\r\n                }\r\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\r\n            } else {\r\n                var caretPos = $this.caret();\r\n            }\r\n            nfRadio.channel( 'mergeTags' ).request( 'set:caret', caretPos );\r\n\r\n            // Find merge tags.\r\n            if( 'rte' == type ) {\r\n                var mergetags = $this.summernote( 'code' ).match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\r\n            } else {\r\n                var mergetags = $this.val().match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\r\n            }\r\n\r\n            // Filter out closed merge tags.\r\n            mergetags = _.filter(mergetags, function(mergetag) {\r\n                return -1 == mergetag.indexOf( '}' ); // Filter out \"closed\" merge tags.\r\n            });\r\n\r\n            // If an open merge tag is found, show the Merge Tag Box, else hide.\r\n            if( 0 !== mergetags.length ) {\r\n\r\n                nfRadio.channel( 'mergeTags' ).request( 'set:old', mergetags[0] );\r\n\r\n                jQuery('#merge-tags-box').css( 'display', 'block' );\r\n                nfRadio.channel( 'drawer' ).request( 'prevent:close' );\r\n                $this.addClass('merge-tag-focus');\r\n\r\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\r\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\r\n\r\n                // Disable browser autocomplete.\r\n                var autocomplete = $this.attr( 'autocomplete' );\r\n                $this.attr( 'autocomplete', 'off' );\r\n                $this.data( 'autocomplete', autocomplete );\r\n\r\n                var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\r\n                if( 0 != $overlayElement.find( '.note-editor' ).length ){\r\n                    $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\r\n                } else {\r\n                    $overlayElement.addClass('merge-tag-focus-overlay');\r\n                }\r\n\r\n                $overlayElement.off( 'click' );\r\n                $overlayElement.on( 'click', function( event ){\r\n                    var elementClasses = jQuery( event.target ).attr( 'class' ) || [];\r\n                    if( -1 !== elementClasses.indexOf( 'merge-tag-focus-overlay' ) ){\r\n                        nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\r\n                        jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                        nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                        jQuery( '#merge-tags-box' ).removeClass();\r\n                        jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                        jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n                    }\r\n                });\r\n\r\n                var value = mergetags[0].replace( '{', '' );\r\n                nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\r\n            } else {\r\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\r\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\r\n                jQuery( '#merge-tags-box' ).removeClass();\r\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\r\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\r\n            }\r\n        }\r\n\r\n    } );\r\n\r\n    return controller;\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/itemSettingFill',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\r\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Modify the user's browser history when they click on a domain\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/confirmPublish',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\r\n\t\t},\r\n\r\n\t\tconfirmPublish: function() {\r\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t\t\t// Check to see if we need to add a submit button.\r\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\r\n\t\t\t}\r\n\t\t\tformModel.set( 'show_publish_options', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to settings that utilise the Rich Text Editor\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App - Settings Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/rte',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\r\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\r\n\r\n\t\t\t// When an RTE setting is shown, re-render RTE.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\r\n\r\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\r\n\r\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\r\n\r\n\t\t\t// Instantiates the variable that holds the media library frame.\r\n\t\t\tthis.meta_image_frame;\r\n\r\n\t\t\tjQuery.summernote.options.icons = {\r\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\r\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\r\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\r\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\r\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\r\n\t\t        'indent': 'dashicons dashicons-editor-indent',\r\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\r\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\r\n\t\t        'bold': 'dashicons dashicons-editor-bold',\r\n\t\t        'caret': 'dashicons dashicons-arrow-down',\r\n\t\t        // 'circle': 'dashicons fa-circle',\r\n\t\t        'close': 'dashicons dashicons-dismiss',\r\n\t\t        'code': 'dashicons dashicons-editor-code',\r\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\r\n\t\t        // 'font': 'dashicons fa-font',\r\n\t\t        // 'frame': 'dashicons fa-frame',\r\n\t\t        'italic': 'dashicons dashicons-editor-italic',\r\n\t\t        'link': 'dashicons dashicons-admin-links',\r\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\r\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\r\n\t\t        // 'menuCheck': 'dashicons fa-check',\r\n\t\t        'minus': 'dashicons dashicons-minus',\r\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\r\n\t\t        // 'pencil': 'dashicons fa-pencil',\r\n\t\t        // 'picture': 'dashicons fa-picture-o',\r\n\t\t        // 'question': 'dashicons fa-question',\r\n\t\t        'redo': 'dashicons dashicons-redo',\r\n\t\t        'square': 'dashicons fa-square',\r\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\r\n\t\t        // 'subscript': 'dashicons fa-subscript',\r\n\t\t        // 'superscript': 'dashicons fa-superscript',\r\n\t\t        'table': 'dashicons dashicons-editor-table',\r\n\t\t        // 'textHeight': 'dashicons fa-text-height',\r\n\t\t        // 'trash': 'dashicons fa-trash',\r\n\t\t        'underline': 'dashicons dashicons-editor-underline',\r\n\t\t        'undo': 'dashicons dashicons-undo',\r\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\r\n\t\t        // 'video': 'dashicons fa-youtube-play'\r\n\t\t      }\r\n\r\n\t\t      this.currentContext = {};\r\n\t\t},\r\n\r\n\t\tinitSettingModel: function( settingModel ) {\r\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\r\n\t\t},\r\n\r\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\r\n\t\t\t/*\r\n\t\t\t * Custom Button for links\r\n\t\t\t */\r\n\t\t\tvar that = this;\r\n\t\t\t// var linkButton = this.linkButton();\r\n\t\t\tvar linkButton = function( context ) {\r\n\t\t\t\treturn that.linkButton( context );\r\n\t\t\t}\r\n\t\t\tvar mediaButton = function( context ) {\r\n\t\t\t\treturn that.mediaButton( context );\r\n\t\t\t}\r\n\t\t\tvar mergeTags = this.mergeTags();\r\n\r\n\t\t\tvar toolbar = [\r\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\r\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\r\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\r\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\r\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\r\n\t\t\t    [ 'table', [ 'table' ] ],\r\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\r\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\r\n\t\t\t];\r\n\r\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\r\n\t\t\t\ttoolbar: toolbar,\r\n\t\t\t\tbuttons: {\r\n\t\t\t\t\tlinkButton: linkButton,\r\n\t\t\t\t\tmergeTags: mergeTags,\r\n\t\t\t\t\tmediaButton: mediaButton\r\n\t\t\t\t},\r\n\t\t\t\theight: 150,   //set editable area's height\r\n\t\t\t\tcodemirror: { // codemirror options\r\n\t\t\t\t    theme: 'monokai',\r\n\t\t\t\t    lineNumbers: true,\r\n\t\t\t\t    callbacks: {\r\n\t\t\t\t    \tonBlur: function( editor ) {\r\n\t\t\t\t    \t\tvar value = editor.getValue();\r\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\r\n\t\t\t\t    \t}\r\n\t\t\t\t    }\r\n\t\t\t\t},\r\n\t\t\t\tprettifyHtml: true,\r\n\t\t\t\tcallbacks: {\r\n\t\t\t\t\tonBlur: function( e, context ) {\r\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\r\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\r\n                        nfRadio.channel( 'summernote' ).trigger( 'blur', settingModel, dataModel, value );\r\n\t\t\t\t\t},\r\n                    onFocus: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'focus', e, this, context );\r\n                    },\r\n                    onKeydown: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'keydown', e, this, context );\r\n                    },\r\n                    onKeyup: function( e, context ) {\r\n                        nfRadio.channel( 'summernote' ).trigger( 'keyup', e, this, context );\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\r\n\t\t\tvar name = settingModel.get( 'name' );\r\n\t\t\tvar before = dataModel.get( name );\r\n\t\t\tvar after = value;\r\n\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\r\n\r\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\r\n\t\t},\r\n\r\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\r\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\r\n\t\t\tlinkMenu.replaceWith(function () {\r\n\t\t\t    return jQuery( '<div/>', {\r\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\r\n\t\t\t        html: this.innerHTML\r\n\t\t\t    } );\r\n\t\t\t} );\r\n\t\t},\r\n\r\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\r\n\t\t},\r\n\r\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\r\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\r\n\t\t},\r\n\r\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\r\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\r\n\t\t},\r\n\r\n\t\tlinkButton: function( context ) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\r\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\r\n\t\t\treturn ui.buttonGroup([\r\n\t\t\t\tui.button({\r\n\t            className: 'dropdown-toggle link-button',\r\n\t            contents: linkButton({}),\r\n\t            tooltip: 'Insert Link',\r\n\t            click: function( e ) {\r\n\t            \tthat.clickLinkButton( e, context );\r\n\t            },\r\n\t            data: {\r\n\t              toggle: 'dropdown'\r\n\t            }\r\n\t          }),\r\n\t\t\t\tui.dropdown([\r\n\t            ui.buttonGroup({\r\n\t              children: [\r\n\t                ui.button({\r\n\t                  contents: linkDropdown({}),\r\n\t                  tooltip: ''\r\n\t                }),\r\n\t              ]\r\n\t            })\r\n\t          ])\r\n\t\t\t]).render();\r\n\t\t},\r\n\r\n\t\tmergeTags: function( context ) {\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\r\n\t\t\treturn ui.button({\r\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\r\n\t\t\t\tcontents: mergeTagsButton({}),\r\n\t\t\t\ttooltip: 'Merge Tags'\r\n\t\t\t}).render();\r\n\t\t},\r\n\r\n\t\tmediaButton: function( context ) {\r\n\t\t\tvar that = this;\r\n\t\t\tvar ui = jQuery.summernote.ui;\r\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\r\n\t\t\treturn ui.button({\r\n\t            className: 'dropdown-toggle',\r\n\t            contents: mediaButton({}),\r\n\t            tooltip: 'Insert Media',\r\n\t            click: function( e ) {\r\n\t            \tthat.openMediaManager( e, context );\r\n\t            }\r\n\t          }).render();\r\n\t\t},\r\n\r\n\t\topenMediaManager: function( e, context ) {\r\n\t\t\tcontext.invoke( 'editor.createRange' );\r\n\t\t\tcontext.invoke( 'editor.saveRange' );\r\n\t\t\tthis.currentContext = context;\r\n\t\t\t\r\n\t\t\t// If the frame already exists, re-open it.\r\n\t\t\tif ( this.meta_image_frame ) {\r\n\t\t\t\tthis.meta_image_frame.open();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Sets up the media library frame\r\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\r\n\t\t\t\ttitle: 'Select a file',\r\n\t\t\t\tbutton: { text:  'insert' }\r\n\t\t\t});\r\n\r\n\t\t\tvar that = this;\r\n\r\n\t\t\t// Runs when an image is selected.\r\n\t\t\tthis.meta_image_frame.on('select', function(){\r\n\r\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\r\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\r\n\t\t\t\tthat.insertMedia( media_attachment, context );\r\n\t\t\t});\r\n\r\n\t\t\t// Opens the media library frame.\r\n\t\t\tthis.meta_image_frame.open();\r\n\t\t},\r\n\r\n\t\tclickLinkButton: function ( e, context ) {\r\n\t\t\tvar range = context.invoke( 'editor.createRange' );\r\n\t\t\tcontext.invoke( 'editor.saveRange' );\r\n\t\t\tvar text = range.toString()\r\n\t\t\tthis.currentContext = context;\r\n\r\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\r\n\t\t\t\treturn false;\r\n\t\t\t});\r\n\r\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\r\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\r\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\r\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\r\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\r\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\r\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\r\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\r\n\t\t\t\tvar text = textEl.val();\r\n\t\t\t\tvar url = urlEl.val();\r\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\r\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\r\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\ttextEl.val( '' );\r\n\t\t\turlEl.val( '' );\r\n\t\t\tisNewWindowEl.prop( 'checked', false );\r\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\r\n\t\t},\r\n\r\n\t\tinsertMedia: function( media, context ) {\r\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\r\n\t\t\tif ( 'image' == media.type ) {\r\n\t\t\t\tthis.currentContext.invoke( 'editor.insertImage', media.url );\r\n\t\t\t} else {\r\n\t\t\t\tthis.currentContext.invoke( 'editor.createLink', {\r\n\t\t\t\t\ttext: media.title || media.filename,\r\n\t\t\t\t\turl: media.url\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingFieldSelect',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n\r\n        initialize: function() {\r\n\r\n            // Bind field key listener to field-select setting type.\r\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\r\n\r\n            // Add setting change listener only in drawers with a field-select setting.\r\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\r\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\r\n            });\r\n\r\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\r\n\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\r\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\r\n        },\r\n\r\n        trackKeyChanges: function( settingModel ) {\r\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\r\n\r\n            // Update selected field if the selected field's key changes.\r\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\r\n        },\r\n\r\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\r\n\r\n            var oldKey = keyModel._previousAttributes[ 'key' ];\r\n            var newKey = keyModel.get( 'key' );\r\n\r\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\r\n\r\n                dataModel.set( settingModel.get( 'name' ), newKey );\r\n            }\r\n        },\r\n\r\n        beforeRender: function( settingModel, dataModel ) {\r\n\r\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n            var fieldTypes = settingModel.get( 'field_types' );\r\n\r\n            var options = [\r\n                {\r\n                    label: '--',\r\n                    value: 0\r\n                }\r\n            ];\r\n            _.each( fieldCollection.models, function( field ){\r\n\r\n                if( dataModel.cid == field.cid ) return;\r\n\r\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\r\n\r\n                var fieldFilter = settingModel.get( 'field_filter' );\r\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\r\n                    var bail = false;\r\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\r\n                        console.log( value + \":\" + field.get( setting )  );\r\n                        if( value != field.get( setting ) ) bail = true;\r\n                    } );\r\n                    if( bail ) return;\r\n                }\r\n\r\n                var value = field.get( 'key' );\r\n                switch ( settingModel.get( 'field_value_format' ) ) {\r\n                    case 'key':\r\n                        value = field.get( 'key' );\r\n                        break;\r\n                    case 'merge_tag':\r\n                    default:\r\n                        value = '{field:' + field.get( 'key' ) + '}';\r\n                }\r\n\r\n                options.push({\r\n                    label: field.get( 'label' ),\r\n                    value: value\r\n                });\r\n            });\r\n\r\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\r\n                _.each( fieldTypes, function( fieldType ){\r\n\r\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\r\n\r\n                    options.push({\r\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\r\n                        value: 'addField:' + fieldType,\r\n                    });\r\n                } );\r\n            }\r\n\r\n            settingModel.set( 'options', options );\r\n        },\r\n\r\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\r\n\r\n            if( 'field-select' != model.get( 'type' ) ) return;\r\n\r\n            var name = model.get( 'name' );\r\n            var value = dataModel.get( name );\r\n\r\n            if( ! value ) return;\r\n\r\n            var rubble = value.split( ':' );\r\n\r\n            if( 'addField' != rubble[0] ) return;\r\n\r\n            this.openDrawer = 'addField';\r\n            this.filterDrawer = rubble[1];\r\n\r\n            dataModel.set( name, '' );\r\n\r\n            this.switchDomain = true;\r\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\r\n        },\r\n\r\n        SwitchToFieldsDomain: function() {\r\n            if( this.switchDomain ) {\r\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\r\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\r\n                this.switchDomain = null;\r\n            }\r\n        },\r\n\r\n        autoOpenDrawer: function() {\r\n            if( this.openDrawer ) {\r\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\r\n                this.openDrawer = null;\r\n            }\r\n        },\r\n\r\n        filterDrawerContents: function() {\r\n            if( this.filterDrawer ) {\r\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\r\n                this.filterDrawer = null;\r\n            }\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\r\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\r\n *\r\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\r\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Action Settings\r\n * @copyright (c) 2016 WP Ninjas\r\n * @author Kyle B. Johnson\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\r\n    return Marionette.Object.extend( {\r\n\r\n        /**\r\n         * A reference list of Field List setting models.\r\n         */\r\n        fieldListSettings: [],\r\n\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\r\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\r\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\r\n        },\r\n\r\n        /**\r\n         * Build a reference list of Field List setting models for later reference.\r\n         *\r\n         * @param settingModel\r\n         */\r\n        registerFieldListSettings: function( settingModel ){\r\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\r\n        },\r\n\r\n        /**\r\n         * Field List settings contain field keys in the setting names.\r\n         * When a field key changes, so too must the Field List setting name.\r\n         *\r\n         * @param fieldModel\r\n         */\r\n        updateFieldListSettingKeys: function( fieldModel ){\r\n\r\n            // We are only interested in field key changes.\r\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\r\n\r\n            var oldKey = fieldModel._previousAttributes.key;\r\n            var newKey = fieldModel.changed.key;\r\n\r\n            /*\r\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\r\n             *\r\n             * Each setting of each action model must be checked against each registered Field List setting.\r\n             */\r\n            var that = this;\r\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\r\n                _.each( actionModel.attributes, function( value, setting ) {\r\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\r\n                    _.each( that.fieldListSettings, function( prefix ) {\r\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\r\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\r\n                        actionModel.set( prefix + '-' + newKey, oldValue );\r\n                        actionModel.set( prefix + '-' + oldKey, 0 );\r\n                        lastChanged = oldKey;\r\n                    });\r\n                });\r\n            });\r\n        },\r\n\r\n        /**\r\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\r\n         *\r\n         * @param settingModel\r\n         * @returns {*}\r\n         */\r\n        getSettingChildView: function( settingModel ) {\r\n\r\n            /**\r\n             * Dynamically build field-list settings as needed for the view.\r\n             */\r\n\r\n            // Filter fields based on the field_types setting property.\r\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\r\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\r\n            });\r\n\r\n            // Map fields into setting definitions.\r\n            var settings = _.map( fields, function( field ) {\r\n                return {\r\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\r\n                    type: 'toggle',\r\n                    label: field.get( 'label' ),\r\n                    width: 'full'\r\n                };\r\n            });\r\n\r\n            settingModel.set( 'settings', new settingCollection( settings ) );\r\n\r\n            // return the child view.\r\n            return fieldsetView;\r\n        },\r\n\r\n    });\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n *\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingHTML',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\r\n        },\r\n\r\n        init: function( settingModel, dataModel ) {\r\n\r\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\r\n\r\n            // Listen to a setting change inside of the dataModel.\r\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\r\n        },\r\n\r\n        update: function( dataModel, changedSettingValue ) {\r\n\r\n            // Mirror the default value setting value.\r\n            dataModel.set( this.get( 'name' ), changedSettingValue );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/settingColor',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // We don't want to re-render this setting type when the data changes.\r\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\r\n            // We want to close any color pickers before we close our styling tab or drawer.\r\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\r\n\r\n            // The first time settingModel and the dataModel meet.\r\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\r\n        },\r\n\r\n        initColorPicker: function( settingModel, dataModel, view ) {\r\n\r\n            var name = settingModel.get( 'name' );\r\n            var el = jQuery( view.el ).find( 'input' );\r\n\r\n            jQuery( el ).wpColorPicker( {\r\n                change: function( event, ui ){\r\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\r\n                }\r\n            } );\r\n        },\r\n\r\n        setRenderFalse: function() {\r\n            return false;\r\n        },\r\n\r\n        closeColorPickers: function( settingModel, dataModel, view ) {\r\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for the app to start.\r\n *\r\n * If the form is a new form, then highlight the Add New submenu item.\r\n * Otherwise, append an Edit Form submenu for context.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/changeMenu',[], function() {\r\n    var controller = Marionette.Object.extend({\r\n\r\n        editFormText: '',\r\n\r\n        initialize: function () {\r\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\r\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\r\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\r\n        },\r\n\r\n        changeMenu: function () {\r\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\r\n            if ( this.isNewForm( form.id ) ) {\r\n                this.highlightAddNew();\r\n            } else {\r\n                this.appendEditForm();\r\n            }\r\n        },\r\n\r\n        isNewForm: function( form_id ) {\r\n            return isNaN( form_id );\r\n        },\r\n\r\n        highlightAddNew: function() {\r\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\r\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\r\n        },\r\n\r\n        /**\r\n         * Append 'Edit Form'\r\n         * When editing a form, add an 'Edit Form' submenu item to\r\n         *   the WordPress Admin Dashboard menu, specifically under\r\n         *   the Ninja Forms Menu Item and after the 'Add New' item.\r\n         */\r\n        appendEditForm: function() {\r\n            // Singleton check. Only add this menu item one time.\r\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length > 0 ) return;\r\n\r\n            var editFormLinkText, editFormLink, editFormListItem;\r\n\r\n            // Create the 'Edit Form' submenu item.\r\n            editFormLinkText = document.createTextNode(this.editFormText);\r\n            editFormLink = document.createElement(\"a\");\r\n            editFormLink.appendChild(editFormLinkText);\r\n\r\n            editFormListItem = document.createElement(\"li\");\r\n            editFormListItem.appendChild(editFormLink);\r\n            editFormListItem.classList.add(\"current\");\r\n\r\n            // Remove the `current` class from any existing list items.\r\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\r\n\r\n            // Insert the 'Edit Form' item after the 'Add New' item;\r\n            jQuery( 'a[href=\"admin.php?page=ninja-forms#new-form\"]' ).parent().after( editFormListItem );\r\n        },\r\n\r\n        formPublish: function( response ) {\r\n            if ( 'publish' !== response.action ) return false;\r\n            this.changeMenu();\r\n        }\r\n    });\r\n\r\n    return controller;\r\n});\r\n\n","/**\r\n * When we click on a domain link, close the mobile menu.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/mobile',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for clicks on our app menu.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\r\n\t\t},\r\n\r\n\t\tcloseMobileMenu: function() {\r\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\r\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Add a jBox notice to the screen.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/notices',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\r\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\r\n\t\t\tthis.notices = {};\r\n\t\t},\r\n\r\n\t\taddNotice: function( key, msg, options ) {\r\n\r\n\t\t\tvar appDefaults = {\r\n\t\t\t\tcontent: msg,\r\n\t\t\t\tcolor: 'green',\r\n\t\t\t\tzIndex:12000,\r\n\t\t\t\tconstructOnInit: true,\r\n\t\t\t\tstack: true,\r\n\t\t\t\tanimation: {\r\n\t\t\t\t\topen: 'flip',\r\n\t\t\t\t\tclose: 'flip'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar mobileDefaults = {\r\n\t\t\t\tposition: {\r\n\t\t\t\t\tx: 'center',\r\n\t\t\t\t\ty: 'top'\r\n\t\t\t\t},\r\n\t\t\t\tanimation: {\r\n\t\t\t\t\topen:'slide:top',\r\n\t\t\t\t\tclose:'slide:left'\r\n\t\t\t\t},\r\n\t\t\t\tautoClose: 2000,\r\n\t\t\t\toffset: {\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 55\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tvar desktopDefaults = {\r\n\t\t\t\tattributes: {\r\n\t\t\t\t\tx: 'left',\r\n\t\t\t\t\ty: 'bottom'\r\n\t\t\t\t},\r\n\t\t\t\tautoClose: 4000\r\n\t\t\t};\r\n\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tvar defaults = mobileDefaults;\t\r\n\t\t\t} else {\r\n\t\t\t\tvar defaults = desktopDefaults;\r\n\t\t\t}\r\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\r\n\r\n\t\t\tvar options = jQuery.extend( defaults, options );\r\n\t\t\t// console.log( options );\r\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\r\n\t\t},\r\n\r\n\t\tcloseNotice: function( key ) {\r\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\r\n\t\t\t\tthis.notices[ key ].close();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\topenNotice: function( key ) {\r\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\r\n\t\t\t\tthis.notices[ key ].open();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/unloadCheck',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\r\n\t\t},\r\n\r\n\t\tmaybePrompt: function( model ) {\r\n\t\t\t// If our app is clean, don't show a warning.\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\r\n\t\t\t\treturn 'You have unsaved changes.';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\r\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\r\n * for custom display of form fields. i.e. layout rows.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formContentFilters',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Init our formContent view filter array.\r\n\t\t\t */\r\n\t\t\tthis.viewFilters = [];\r\n\t\t\tthis.saveFilters = [];\r\n\t\t\tthis.loadFilters = [];\r\n\r\n\t\t\t/*\r\n\t\t     * Listen for requests to add formContent filters.\r\n\t\t\t */\r\n\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our formContent filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\r\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * -- DEPRECATED RADIO REPLIES --\r\n\t\t\t * \r\n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\r\n\t\t\t * Listen for requests to add new fieldContent filters.\r\n\t\t\t * \r\n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\r\n\t\t\t */\r\n\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our fieldContent filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\r\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\r\n\t\t\r\n\t\t\t/*\r\n\t\t\t * -- END DEPRECATED --\r\n\t\t\t */\r\n\t\t},\r\n\r\n\t\taddViewFilter: function( callback, priority ) {\r\n\t\t\tthis.viewFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetViewFilters: function() {\r\n\t\t\treturn this.viewFilters;\r\n\t\t},\r\n\r\n\t\taddSaveFilter: function( callback, priority ) {\r\n\t\t\tthis.saveFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetSaveFilters: function() {\r\n\t\t\treturn this.saveFilters;\r\n\t\t},\r\n\r\n\t\taddLoadFilter: function( callback, priority ) {\r\n\t\t\tthis.loadFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetLoadFilters: function() {\r\n\t\t\treturn this.loadFilters;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles filters for our main content gutter views.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Init our gutter view filter array.\r\n\t\t\t */\r\n\t\t\tthis.leftFilters = [];\r\n\t\t\tthis.rightFilters = [];\r\n\t\t\t/*\r\n\t\t     * Listen for requests to add gutter filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Listen for requests to get our content gutter filters.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\r\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\r\n\t\t},\r\n\r\n\t\taddLeftFilter: function( callback, priority ) {\r\n\t\t\tthis.leftFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\taddRightFilter: function( callback, priority ) {\r\n\t\t\tthis.rightFilters[ priority ] = callback;\r\n\t\t},\r\n\r\n\t\tgetLeftFilters: function() {\r\n\t\t\treturn this.leftFilters;\r\n\t\t},\r\n\r\n\t\tgetRightFilters: function() {\r\n\t\t\treturn this.rightFilters;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\r\n\t\t},\r\n\r\n\t\tcloneCollectionDeep: function( collection ) {\r\n\t\t\tvar models = [];\r\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\r\n\t\t\t_.each( collection.models, function( model ) {\r\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\t\t\t\tmodels.push( newModel );\r\n\t\t\t} );\r\n\t\t\t// Create a new instance of our collection\r\n\t\t\treturn new collection.constructor( models, collection.options );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Tracks which keys have been pressed.\r\n * Currently only used by fields to see if they should duplicate or delete on click.\r\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/trackKeyDown',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tkeys: [],\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tvar that = this;\r\n\t\t\t/*\r\n\t\t\t * Track keydowns and store the keys pressed.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\r\n\t\t\t\tthat.keyDown( e, that );\r\n\t\t\t} );\r\n\r\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\r\n\t\t\t\tthat.keyUp( e, that );\r\n\t\t\t} );\r\n\r\n\t\t\t/*\r\n\t\t\t * Get the keys currently being pressed, if any\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\r\n\t\t},\r\n\r\n\t\tkeyDown: function( e, context ) {\r\n\t\t\t/*\r\n\t\t\t * Add our keycode to our keys array.\r\n\t\t\t */\r\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, context ) {\r\n\t\t\t/*\r\n\t\t\t * Remove our keycode from our keys array.\r\n\t\t\t */\r\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\r\n\t\t\t\tdelete context.keys[ e.keyCode ];\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetKeyDown: function() {\r\n\t\t\treturn this.keys;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Initialize the perfectscroll jQuery plugin\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/perfectScroll',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tmovedPos: false,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * When we init the main view, init our perfectscroll\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\r\n\r\n\t\t\t/*\r\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\r\n\t\t},\r\n\r\n\t\tinitPerfectScroll: function( view ) {\r\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\r\n\t\t\t\t\tsuppressScrollX: true\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\r\n\t\t},\r\n\r\n\t\tmoveRail: function() {\r\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\r\n\r\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\r\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tresetRail: function() {\r\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model that represents our type settings groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tdisplay: false\r\n\t\t},\r\n\r\n\t\tinitialize: function( options ) {\r\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\r\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection of our type settings groups.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: settingGroupModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Returns a new setting group collection.\r\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App - Edit Settings Drawer\r\n * @copyright (c) 2016 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for a new setting group collection\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a new instance of the setting group collection.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @return backbone.collection\r\n\t\t */\r\n\t\tgetNewSettingGroupCollection: function() {\r\n\t\t\treturn SettingGroupCollection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.0.30\r\n */\r\ndefine( 'controllers/app/settingMedia',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // When the media button is clicked, open the media manager.\r\n            this.listenTo( nfRadio.channel( 'setting-type-media' ), 'click:extra', this.clickExtra );\r\n        },\r\n\r\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\r\n            var textEl = jQuery( e.target ).parent().find( '.setting' );\r\n\r\n            if ( jQuery( e.target ).hasClass( 'open-media-manager' ) ) {\r\n                // If the frame already exists, re-open it.\r\n                if ( this.meta_image_frame ) {\r\n                    this.meta_image_frame.open();\r\n                    return;\r\n                }\r\n\r\n                // Sets up the media library frame\r\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\r\n                    title: 'Select a file',\r\n                    button: { text:  'insert' }\r\n                });\r\n\r\n                var that = this;\r\n\r\n                // Runs when an image is selected.\r\n                this.meta_image_frame.on('select', function(){\r\n                    // Grabs the attachment selection and creates a JSON representation of the model.\r\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\r\n                    textEl.val( media_attachment.url ).change();\r\n                });\r\n\r\n                // Opens the media library frame.\r\n                this.meta_image_frame.open();\r\n            }\r\n        },\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Model for our field type\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\r\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field type models. \r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: typeModel,\r\n\t\ttype: false,\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\t_.each( options, function( option, key ) {\r\n\t\t\t\tthis[ key ] = option;\r\n\t\t\t}, this );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Model that represents our field type section on the add new field drawer.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/typeSectionModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tclasses: ''\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our field models.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: typeSectionModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\r\n *\r\n * 1) Create our settings sections config\r\n * 2) Loops over our preloaded data and adds that to our field type collection\r\n *\r\n * Also responds to requests for data about field types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/types',[\r\n\t\t'models/app/typeCollection',\r\n\t\t'models/fields/typeSectionCollection'\r\n\t],\r\n\tfunction(\r\n\t\tTypeCollection,\r\n\t\tSectionCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Config for our settings sections\r\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\r\n\r\n\t\t\t// Create our field type collection\r\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\r\n\r\n\t\t\t// Listen to clicks on field types\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\r\n\t\t},\r\n\r\n\t\tregisterSection: function( typeModel ) {\r\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\r\n\r\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetFieldType: function( id ) {\r\n        \treturn this.collection.get( id );\r\n        },\r\n\r\n        /**\r\n         * Return the entire field type collection\r\n         *\r\n         * @since  3.0\r\n         * @param  string \t\t\t\tid \t[description]\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetTypeCollection: function( id ) {\r\n        \treturn this.collection;\r\n        },\r\n\r\n        /**\r\n         * Add a field type to our fields sortable when the field type button is clicked.\r\n         *\r\n         * @since 3.0\r\n         * @param Object e event\r\n         * @return void\r\n         */\r\n        addField: function( e ) {\r\n\t\t\tvar type = jQuery( e.target ).data( 'id' );\r\n\r\n\t\t\tif( e.shiftKey ){\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\r\n\t\t\t\ttype: type,\r\n\r\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\r\n\t\t\t});\r\n\r\n\t\t\tconsole.log( fieldModel );\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: fieldModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\r\n\r\n\t\t\t// Re-Draw the Field Collection\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\r\n        },\r\n\r\n        /**\r\n         * Return our field type settings sections\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection field type settings sections\r\n         */\r\n        getTypeSections: function() {\r\n            return this.sections;\r\n        },\r\n\r\n        /**\r\n         * Return our saved fields\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection\r\n         */\r\n        getSavedFields: function() {\r\n        \tthis.sections.get( 'saved' );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Handles the logic for our field type draggables.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our field type draggables and run the appropriate function.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging:\r\n\t\t * get our drawer element\r\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\r\n\t\t * get our main element\r\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\r\n\t\t * set our dragging helper clone\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return {[type]}         [description]\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t},\r\n\r\n\t\tgetCurrentDraggableHelperClone: function() {\r\n\t\t\treturn this.draggableHelperClone;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the dragging of our field staging area\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the start and stop of our field staging dragging\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user starts dragging the staging area, we have to:\r\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\r\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\r\n\t\t * replace our helper with the stacked \"x fields\" template.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t context jQuery UI Draggable\r\n\t\t * @param  Object\t ui      jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\r\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\r\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t context jQuery UI Draggable\r\n\t\t * @param  Object\t ui      jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles most things related to our staging area:\r\n * 1) Creates a collection\r\n * 2) Listens for requests to CRUD items from the collection\r\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Create our staged fields collection\r\n\t\t\tthis.collection = new stagingCollection();\r\n\t\t\t// Respond to requests related to our staging area.\r\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\r\n\t\t\t// Listen to our remove staged field click event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\r\n\t\t\t// Listen to our event that fires just before a drawer is closed.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\r\n\t\t},\r\n\r\n\t\tgetStagingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our staging area\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param string type Type of field we're adding\r\n\t\t * @return tmpID\r\n\t\t */\r\n\t\taddStagedField: function( type, silent ) {\r\n\t\t\tvar silent = silent || false;\r\n\t\t\t// Get our type model from the string.\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\r\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\r\n\t\t\t// Object that will be added to our staging collection.\r\n\t\t\tvar data = {\r\n\t\t\t\tid: tmpID,\r\n\t\t\t\t// i.e. firstname, textbox, etc.\r\n\t\t\t\tslug: fieldType.get( 'type' ),\r\n\t\t\t\t// i.e. First Name, Textbox, etc.\r\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\r\n\t\t\t\t// i.e. calendar, envelope, etc.\r\n\t\t\t\ticon: fieldType.get( 'icon' )\r\n\t\t\t}\r\n\t\t\t// \r\n\t\t\tvar model = this.collection.add( data );\r\n\r\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\r\n\r\n\t\t\treturn tmpID;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove a field from staging\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \t\t\te     \tEvent\r\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveStagedField: function( e, model ) {\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tbeforeCloseDrawer: function() {\r\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\r\n\t\t\t\t// Get our field collection.\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n\t\t\t\tvar fields = [];\r\n\t\t\t\t// Loop through our staging collection\r\n\t\t\t\t_.each( this.collection.models, function( model ) {\r\n\t\t\t\t\t// Get a tmp ID for our new field.\r\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t\t\t// Create an object that can be added as a model.\r\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\r\n\t\t\t\t\t// Add our new field.\r\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\r\n\t\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\t\tvar label = {\r\n\t\t\t\t\t\tobject: 'Field',\r\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\t\t\tchange: 'Added',\r\n\t\t\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t\t\t};\r\n\t\t\t\t\tvar data = {\r\n\t\t\t\t\t\tcollection: fieldCollection\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\t\t} );\r\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\r\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t\t// Empty the staging collection\r\n\t\t\t\tthis.collection.reset();\r\n\t\t\t}\r\n\t\t\t// Sort our fields.\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sort our staging area by the 'order' attribute.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsortStagedFields: function() {\r\n\t\t\t// Get our staged fields sortable.\r\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\r\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\r\n\t\t\t// Loop through our models\r\n\t\t\t_.each( this.collection.models, function( field ) {\r\n\t\t\t\t// Search our order array for this field.\r\n\t\t\t\tvar search = field.get( 'id' );\r\n\t\t\t\tvar pos = order.indexOf( search );\r\n\t\t\t\t// Update our staged field model with the new order.\r\n\t\t\t\tfield.set( 'order', pos );\r\n\t\t\t} );\r\n\t\t\t// Sort our staging collection.\r\n\t\t\tthis.collection.sort();\r\n\t\t},\r\n\r\n\t\tclearStagedFields: function() {\r\n\t\t\tthis.collection.reset();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles actions related to our staged fields sortable.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our field type draggables\r\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\r\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\r\n\t\t\t// Listen to our sortable events\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI item\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveStagedFields: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an active class to our sortable when a field type item is dragged\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t */\r\n\t\taddActiveClass: function() {\r\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove the active class from our sortable when the field type item is dropped.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveActiveClass: function() {\r\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \te  event\r\n\t\t * @param  Object \tui jQuery UI Element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toverStagedFields: function( e, ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\r\n\t\t\t\tthis.currentHelper = ui.helper \r\n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\r\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toutStagedFields: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\r\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\r\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\r\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\t\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\r\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartStagedFields: function( ui ) {\r\n\t\t\tjQuery( ui.item ).show();\r\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\r\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopStagedFields: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Filters our field type collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our change filter event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Filter our field types in the add new field drawer\r\n\t\t * \r\n\t\t * Takes a search string and finds any field types that match either the name or alias.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string\t search \tstring being searched for\r\n\t\t * @param  object \t e      \tKeyup event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tfilterFieldTypes: function( search, e ) {\r\n\t\t\t// Make sure that we aren't dealing with an empty string.\r\n\t\t\tif ( '' != jQuery.trim( search ) ) {\r\n        \t\tvar filtered = [];\r\n        \t\t/**\r\n        \t\t * Call the function that actually filters our collection,\r\n        \t\t * and then loop through our collection, adding each model to our filtered array.\r\n        \t\t */\r\n        \t\t_.each( this.filterCollection( search ), function( model ) {\r\n        \t\t\tfiltered.push( model.get( 'id' ) );\r\n        \t\t} );\r\n\r\n        \t\t// Create a new Field Type Section collection with the filtered array.\r\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\r\n\t\t\t\t{ \r\n\t\t\t\t\tid: 'filtered',\r\n\t\t\t\t\tnicename: 'Filtered Fields',\r\n\t\t\t\t\tfieldTypes: filtered\r\n\t\t\t\t}\r\n\t\t\t\t] );\r\n\r\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\r\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\r\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\r\n        \t\t\tif ( 0 < filtered.length ) {\r\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\r\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n        \t\t\t}\r\n        \t\t}\r\n        \t} else {\r\n        \t\t// Clear our filter if the search text is empty.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Search our field type collection for the search string.\r\n         * \r\n         * @since  3.0\r\n         * @param  string\t search \tstring being searched for\r\n         * @return backbone.collection\r\n         */\r\n        filterCollection: function( search ) {\r\n        \tsearch = search.toLowerCase();\r\n        \t// Get our list of field types\r\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\r\n        \t/*\r\n        \t * Backbone collections have a 'filter' method that loops through every model,\r\n        \t * waiting for you to return true or false. If you return true, the model is kept.\r\n        \t * If you return false, it's removed from the filtered result.\r\n        \t */\r\n\t\t\tvar filtered = collection.filter( function( model ) {\r\n\t\t\t\tvar found = false;\r\n\t\t\t\t\r\n\t\t\t\t// If we match either the ID or nicename, return true.\r\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\r\n\t\t\t\t */\r\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\r\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\r\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we match any of the aliases, return true.\r\n\t\t\t\tif ( model.get( 'alias' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\r\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn found;\r\n\t\t\t} );\r\n\t\t\t// Return our filtered collection.\r\n\t\t\treturn filtered;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles all the actions/functions related to our main field sortable.\r\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/sortable',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\r\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Handles all the events fired by our sortable:\r\n\t\t\t * receive - dropped from type button or staging\r\n\t\t\t * over - dragging within or over the sortable\r\n\t\t\t * out - leaving the sortable\r\n\t\t\t * stop - stopped sorting/dragging\r\n\t\t\t * start - started sorting/dragging\r\n\t\t\t * update - stopped sorting/dragging and order has changed\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\r\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add the active class to our sortable so that its border is blue.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\taddActiveClass: function() {\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Remove the active class from our sortable\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tremoveActiveClass: function() {\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Fires when we drop a field type button or staging onto our sortable\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\treceiveFieldsSortable: function( ui ) {\r\n\t\t\t/*\r\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\r\n\t\t\t */ \r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\r\n\t\t\t\t// Get our type string\r\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\r\n\t\t\t\t// Add a field (returns the tmp ID )\r\n\t\t\t\tvar tmpID = this.addField( type, false );\r\n\t\t\t\t/*\r\n\t\t\t\t * Update our helper id to the tmpID.\r\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\r\n\t\t\t\t */ \r\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\r\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t\t// Trigger a drop field type event.\r\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\r\n\t\t\t\t// Grab our staged fields.\r\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\r\n\t\t\t\t// Get our current field order.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\t\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\r\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\r\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\r\n\t\t\t\t} else { // Sortable is empty\r\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\r\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// Get the index of our droped element.\r\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\r\n\r\n\t\t\t\t// Loop through each staged fields model and insert a field.\r\n\t\t\t\tvar tmpIDs = [];\r\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\r\n\t\t\t\t\t// Add our field.\r\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\r\n\t\t\t\t\t// Add this newly created field to our order array.\r\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\r\n\t\t\t\t} );\r\n\r\n\t\t\t\t// Remove our dropped element from our order array.\r\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\r\n\t\t\t\torder.splice( insertedAt, 1 );\r\n\t\t\t\t// Sort our fields\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\r\n\t\t\t\t// Clear our staging\r\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\r\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\r\n\t\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field.\r\n\t\t * Builds the object necessary to add a field to the field model collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \ttype   field type\r\n\t\t * @param  boolean \tsilent add silently\r\n\t\t * @return string \ttmpID\r\n\t\t */\r\n\t\taddField: function( type, silent ) {\r\n\t\t\t// Default to false\r\n\t\t\tsilent = silent || false;\r\n\t\t\t// Get our field type model\r\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \r\n\t\t\t// Get our tmp ID\r\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\r\n\t\t\t// Add our field\r\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Field',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\r\n\t\t\treturn tmpID;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toverfieldsSortable: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\r\n\t\t\t\t// String type\r\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\r\n\t\t\t\t// Get our field type model.\r\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\t\t\t\t// Get our field type nicename.\r\n\t\t\t\tvar label = fieldType.get( 'nicename' );\r\n\t\t\t\t// Get our sortable element.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\t// Get our fieldwidth.\r\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\r\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\r\n\t\t\t\tthis.currentHelper = ui.helper;\r\n\t\t\t\t// Update our helper label.\r\n\t\t\t\tjQuery( ui.helper ).html( label );\r\n\t\t\t\t// Remove the field type draggable classes and add sortable classes.\r\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-field-wrap' ).css( { 'width': fieldWidth, 'height': '50px' } );\t\t\t\t\t\t\r\n\t\t\t\t// Add our hover class if our sortable has been initialized.\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\r\n\t\t * This returns the item to its pre-over state.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\toutFieldsSortable: function( ui ) {\r\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\r\n\t\t\t\t/*\r\n\t\t\t\t * Get our helper clone.\r\n\t\t\t\t * This will let us access the previous label and classes of our helper.\r\n\t\t\t\t */ \r\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\r\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\r\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\r\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\r\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\r\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\r\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging in the sortable:\r\n\t\t * remove our opacity setting\r\n\t\t * remove our ui helper\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopFieldsSortable: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t\tjQuery( ui.helper ).remove();\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging in the sortable:\r\n\t\t * add an opacity setting of 0.5\r\n\t\t * show our item (jQuery hides the original item by default)\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartFieldsSortable: function( ui ) {\r\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\r\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \r\n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Sort our fields when we change the order.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object \tui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateFieldsSortable: function( ui, sortable ) {\r\n\t\t\t\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\r\n\r\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\r\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \r\n\r\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\r\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\r\n\r\n\t\t\t\t// Add our change event to the change tracker.\r\n\t\t\t\tvar data = { fields: [] };\r\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\r\n\t\t\t\t\tvar newPos = field.get( 'order' );\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata.fields.push( {\r\n\t\t\t\t\t\tmodel: field,\r\n\t\t\t\t\t\tattr: 'order',\r\n\t\t\t\t\t\tbefore: oldPos,\r\n\t\t\t\t\t\tafter: newPos\r\n\t\t\t\t\t} );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tvar label = {\r\n\t\t\t\t\tobject: 'Field',\r\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\r\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\r\n\t\t\t\t\tdashicon: 'sort'\r\n\t\t\t\t};\r\n\r\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles interactions with our field collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tadding: false,\r\n\t\tremoving: false,\r\n\t\t\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our field collection from our localized form data\r\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\r\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\r\n\t\t\tthis.collection.removedIDs = {};\r\n\r\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\r\n\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\r\n\r\n\t\t\t/*\r\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\r\n\t\t\t * we should run animations in our fields collection.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\r\n\t\t},\r\n\r\n\t\tgetFieldCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tredrawFieldCollection: function() {\r\n\t\t\tthis.collection.trigger( 'reset', this.collection );\r\n\t\t},\r\n\r\n\t\tgetField: function( id ) {\r\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * First we check to see if a key matches what we were sent.\r\n\t\t\t\t */\t\t\t\t\r\n\t\t\t\treturn this.collection.findWhere( { key: id } );\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\r\n\t\t\t\t */\r\n\t\t\t\treturn this.collection.get( id );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \t\t\tfield data to insert\r\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\r\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\r\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\r\n\t\t */\r\n\t\taddField: function( data, silent, renderTrigger, action ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\r\n\r\n\t\t\tsilent = silent || false;\r\n\t\t\taction = action || '';\r\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\r\n\r\n\t\t\tif ( false === data instanceof Backbone.Model ) {\r\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\r\n\t\t\t\t\tdata.id = this.getTmpFieldID();\r\n\t\t\t\t}\r\n\t\t\t\tvar model = new fieldModel( data );\r\n\t\t\t} else {\r\n\t\t\t\tvar model = data;\r\n\t\t\t}\r\n\r\n\t\t\t// console.log( model );\r\n\r\n\t\t\t/*\r\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\r\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\r\n\t\t\t * \r\n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\r\n\t\t\t */\r\n\r\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\r\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\r\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\r\n\t\t\t}\r\n\r\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\r\n\t\t\t\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\r\n\t\t\tif ( renderTrigger ) {\r\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\r\n\t\t\t}\r\n\t\t\tif( 'duplicate' == action ){\r\n                nfRadio.channel( 'fields' ).trigger( 'render:duplicateField', newModel, action );\r\n\t\t\t}\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\r\n\t\t\t\r\n\t\t\treturn model;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update a field setting by ID\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  int \t\tid    field id\r\n\t\t * @param  string \tname  setting name\r\n\t\t * @param  mixed \tvalue setting value\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateFieldSetting: function( id, name, value ) {\r\n\t\t\tvar fieldModel = this.collection.get( id );\r\n\t\t\tfieldModel.set( name, value );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Get our fields sortable EL\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\r\n\t\t * @return void\r\n\t\t */\r\n\t\tsortFields: function( order, ui, updateDB ) {\r\n\t\t\tif ( null == updateDB ) {\r\n\t\t\t\tupdateDB = true;\r\n\t\t\t}\r\n\t\t\t// Get our sortable element\r\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\r\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\r\n\t\t\t\t// JS ternerary for setting our order\r\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\r\n\r\n\t\t\t\t// Loop through all of our fields and update their order value\r\n\t\t\t\t_.each( this.collection.models, function( field ) {\r\n\t\t\t\t\t// Get our current position.\r\n\t\t\t\t\tvar oldPos = field.get( 'order' );\r\n\t\t\t\t\tvar id = field.get( 'id' );\r\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\r\n\t\t\t\t\t\tvar search = 'field-' + id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar search = id;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// Get the index of our field inside our order array\r\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\r\n\t\t\t\t\tfield.set( 'order', newPos );\r\n\t\t\t\t} );\r\n\t\t\t\tthis.collection.sort();\r\n\r\n\t\t\t\tif ( updateDB ) {\r\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\t\t\t// Update our preview\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a field from our collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteField: function( model ) {\r\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\r\n\t\t\tthis.removing = true;\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\t\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a new tmp id for our fields.\r\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return string\r\n\t\t */\r\n\t\tgetTmpFieldID: function() {\r\n\t\t\tvar tmpNum = this.collection.tmpNum;\r\n\t\t\tthis.collection.tmpNum++;\r\n\t\t\treturn 'tmp-' + tmpNum;\r\n\t\t},\r\n\r\n\t\tgetAdding: function() {\r\n\t\t\treturn this.adding;\r\n\t\t},\r\n\r\n\t\tsetAdding: function( val ) {\r\n\t\t\tthis.adding = val;\r\n\t\t},\r\n\r\n\t\tgetRemoving: function() {\r\n\t\t\treturn this.removing;\r\n\t\t},\r\n\r\n\t\tsetRemoving: function( val ) {\r\n\t\t\tthis.removing = val;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our repeater option.\r\n * \r\n * @package Ninja App builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/optionRepeaterModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\terrors: {},\r\n            max_options: 0,\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// When we add errors to the option row, run a function.\r\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the errors on our model, check to see if we should add or remove \r\n\t\t * the error from the setting that this option is a part of.\r\n\t\t *\r\n\t\t * Adding an error to the setting model simply disables the drawer and other\r\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeErrors: function( model ) {\r\n\t\t\t/*\r\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\r\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\r\n\t\t\t */\r\n\r\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Loop through our collection to see if we have any other errors.\r\n\t\t\t\t */\r\n\t\t\t\tvar errorsFound = false;\r\n\t\t\t\t_.each( model.collection.models, function( opt ) {\r\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\r\n\t\t\t\t\t\terrorsFound = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\tif ( ! errorsFound ) {\r\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\r\n\t\t\t\t */\r\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\r\n\t\t\t}\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Model that represents our list options.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: listOptionModel,\r\n\t\tcomparator: 'order',\r\n\r\n\t\tinitialize: function( models, options ) {\r\n\t\t\t// Listen to the 'sort' event\r\n\t\t\tthis.on( 'sort', this.changeCollection, this );\r\n\t\t\t// Listen to the 'add' event\r\n\t\t\tthis.on( 'add', this.addOption, this );\r\n\t\t\tthis.settingModel = options.settingModel;\r\n\t\t},\r\n\r\n\t\tchangeCollection: function() {\r\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'sort:options', this );\r\n\t\t},\r\n\r\n\t\taddOption: function( model, collection ) {\r\n\t\t\tmodel.set( 'settingModel', this.settingModel );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\tclassName: 'nf-error',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error',\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\trenderErrors: function() {\r\n\t\t\t\t    if ( 'undefined' != typeof that.errors ) {\r\n    \t\t\t\t\treturn that.errors[ Object.keys( errors )[0] ];\r\n \t\t\t\t\t} else {\r\n \t\t\t\t\t\treturn '';\r\n \t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\tclassName: 'nf-table-row',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-default-row',\r\n\t\tid: function() {\r\n\t\t\treturn this.model.cid;\r\n\t\t},\r\n\r\n\t\tregions: {\r\n\t\t\terror: '.nf-option-error'\r\n\t\t},\r\n\r\n\t\tinitialize: function( data ) {\r\n\t\t\tthis.settingModel = data.settingModel;\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tthis.collection = data.collection;\r\n\t\t\tthis.columns = data.columns;\r\n\t\t\tthis.parentView = data.parentView;\r\n\t\t\tthis.model.on( 'change:errors', this.renderErrors, this );\r\n\r\n\t\t\t// Removed because the re-render was breaking tag insertion for merge tags.\r\n\t\t\t// this.model.on( 'change', this.render, this );\r\n\r\n\t\t\tif ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\r\n\t\t\t\tthis.template = '#' + this.settingModel.get( 'tmpl_row' );\r\n\t\t\t}\r\n\r\n\t\t\tthis.hasErrors = false;\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\t\r\n\t\t\tthis.model.off( 'change', this.render );\r\n\t\t\tthis.model.off( 'change:errors', this.renderErrors );\r\n\t\t},\r\n\r\n\t\tonBeforeRender: function() {\r\n\t\t\t/*\r\n\t\t\t * We want to escape any HTML being output for our label.\r\n\t\t\t */\r\n\t\t\tif ( this.model.get( 'label' ) ) {\r\n\t\t\t\tvar label = this.model.get( 'label' );\r\n\t\t\t\tthis.model.set( 'label', _.escape( label ), { silent: true } );\r\n\t\t\t}\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\t/*\r\n\t\t\t * We want to unescape any HTML being output for our label.\r\n\t\t\t */\r\n\t\t\tif ( this.model.get( 'label' ) ) {\r\n\t\t\t\tvar label = this.model.get( 'label' );\r\n\t\t\t\tthis.model.set( 'label', _.unescape( label ), { silent: true } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tif ( this.model.get( 'new' ) ) {\r\n\t\t\t\tjQuery( this.el ).find( 'input:first' ).focus();\r\n\t\t\t\tthis.model.set( 'new', false );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'change .setting': 'changeOption',\r\n\t\t\t'click .nf-delete': 'deleteOption',\r\n\t\t\t'keyup': 'keyupOption'\r\n\t\t},\r\n\r\n\t\tchangeOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\r\n\t\t},\r\n\r\n\t\tdeleteOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\tkeyupOption: function( e ) {\r\n\t\t\tthis.maybeAddOption( e );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\r\n\t\t},\r\n\r\n\t\tmaybeAddOption: function( e ) {\r\n\t\t\tif ( 13 == e.keyCode && 'calculations' != this.settingModel.get( 'name' ) ) {\r\n\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\r\n\t\t\t\tjQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\trenderErrors: function() {\r\n\t\t\t\r\n\t\t\t// if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\r\n\t\t\t// \treturn false;\r\n\t\t\t// }\r\n\r\n\t\t\t/*\r\n\t\t\t * We don't want to redraw the entire row, which would remove focus from the eq textarea,\r\n\t\t\t * so we add and remove error classes manually.\r\n\t\t\t */\r\n\t\t\tif ( 0 == Object.keys( this.model.get( 'errors' ) ) ) {\r\n                if ( this.hasErrors ) {\r\n\t\t\t\t    this.error.empty();\r\n\t\t\t\t    jQuery( this.el ).removeClass( 'nf-error' );\r\n                }\r\n\t\t\t} else {\r\n\t\t\t\tthis.hasErrors = true;\r\n\t\t\t\tthis.error.show( new ErrorView( { model: this.model } ) );\r\n\t\t\t\tjQuery( this.el ).addClass( 'nf-error' );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t\t\treturn {\r\n\t\t\t\tgetColumns: function() {\r\n\t\t\t\t\treturn that.columns;\r\n\t\t\t\t},\r\n\t\t\t\trenderFieldSelect: function( dataID, value ){\r\n\t\t\t\t\tvar initialOption, select, emptyContainer, label;\r\n\r\n\t\t\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\r\n                    initialOption = document.createElement( 'option' );\r\n                    initialOption.value = '';\r\n                    initialOption.label = '--';\r\n\r\n\t\t\t\t\tselect = document.createElement( 'select' );\r\n\t\t\t\t\tselect.classList.add( 'setting' );\r\n\t\t\t\t\tselect.setAttribute( 'data-id', dataID );\r\n                    select.appendChild( initialOption );\r\n\r\n\t\t\t\t\tfields.each( function( field ){\r\n\t\t\t\t\t\tvar option = document.createElement( 'option' );\r\n\t\t\t\t\t\toption.selected = ( value == field.get( 'key' ) );\r\n\t\t\t\t\t\toption.value = field.get( 'key' );\r\n\t\t\t\t\t\toption.label = field.get( 'label' );\r\n\t\t\t\t\t\tselect.appendChild( option );\r\n\t\t\t\t\t});\r\n\r\n                    label = document.createElement( 'label' );\r\n                    label.classList.add( 'nf-select' );\r\n                    label.appendChild( select );\r\n\r\n\t\t\t\t\t// Select Lists need an empty '<div></div>' for styling purposes.\r\n\t\t\t\t\temptyContainer = document.createElement( 'div' );\r\n\t\t\t\t\tlabel.appendChild( emptyContainer );\r\n\r\n\t\t\t\t\t// The template requires a string.\r\n\t\t\t\t\treturn label.innerHTML;\r\n\t\t\t\t},\r\n\t\t\t\trenderOptions: function( column, value ) {\r\n\r\n\t\t\t\t\tif( 'undefined' == typeof that.options.columns[ column ] ) return;\r\n\r\n\t\t\t\t\tvar select = document.createElement( 'select' );\r\n\r\n\t\t\t\t\tvar html = '';\r\n\t\t\t\t\t_.each( that.options.columns[ column ].options, function( option ){\r\n\t\t\t\t\t\tvar optionNode = document.createElement( 'option' );\r\n                        optionNode.selected = ( value == option.value );\r\n                        optionNode.value = option.value;\r\n                        optionNode.label = option.label;\r\n                        select.appendChild( optionNode );\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// The template only needs the options.\r\n\t\t\t\t\treturn select.innerHTML;\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'tr',\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\r\n\tvar view = Marionette.CompositeView.extend( {\r\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-wrap',\r\n\t\tchildView: listOptionView,\r\n\t\temptyView: listEmptyView,\r\n\t\treorderOnSort: false,\r\n\r\n\t\tinitialize: function( data ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * Our options are stored in our database as objects, not collections.\r\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n\t\t\t */ \r\n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\r\n\r\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\r\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\r\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\r\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\r\n\t\t\t}\r\n\r\n\t\t\tthis.collection = optionCollection;\r\n\t\t\tthis.dataModel = data.dataModel;\r\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\r\n\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor ( var name in deps ) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.on( 'change:' + name, this.render, this );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'added:option', this.maybeHideNew );\r\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'removed:option', this.maybeHideNew );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tvar deps = this.model.get( 'deps' );\r\n\t\t\tif ( deps ) {\r\n\t\t\t\tfor (var name in deps) {\r\n\t\t\t\t    if ( deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t    \tthis.dataModel.off( 'change:' + name, this.render );\r\n\t\t\t\t    }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\r\n\t\t\t// this.$el = this.$el.children();\r\n\t\t\t// this.$el.unwrap();\r\n\t\t\t// this.setElement( this.$el );\r\n\t\t\r\n\t\t\tvar that = this;\r\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\r\n\t\t\t\thandle: '.handle',\r\n\t\t\t\thelper: 'clone',\r\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\r\n\t\t\t\tforcePlaceholderSize: true,\r\n\t\t\t\topacity: 0.95,\r\n\t\t\t\ttolerance: 'pointer',\r\n\r\n\t\t\t\tstart: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tstop: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tupdate: function( e, ui ) {\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n            that.maybeHideNew( that.collection );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\r\n\t\t\r\n\t\t},\r\n\r\n\t\tonAttach: function() {\r\n            \r\n\t\t\tvar importLink = jQuery( this.el ).find( '.nf-open-import-tooltip' );\r\n\t\t\tvar jBox = jQuery( importLink ).jBox( 'Tooltip', {\r\n                title: '<h3>Please enter your options below:</h3>',\r\n                content: jQuery( this.el ).find( '.nf-import-options' ),\r\n                trigger: 'click',\r\n                closeOnClick: 'body',\r\n                closeButton: 'box',\r\n                offset: { x: 20, y: 0 },\r\n                addClass: 'import-options',\r\n\r\n                onOpen: function() {\r\n                \tvar that = this;\r\n                \tsetTimeout( function() { jQuery( that.content ).find( 'textarea' ).focus(); }, 200 );\r\n                }\r\n            } );\r\n\r\n\t\t\tjQuery( this.el ).find( '.nf-import' ).on( 'click', { view: this, jBox: jBox }, this.clickImport );\r\n\r\n\t\t\t/*\r\n\t\t\t * Send out a radio message.\r\n\t\t\t */\r\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderHeaders: function() {\r\n\t    \t\t\tvar columns, beforeColumns, afterColumns;\r\n\r\n\t    \t\t\tbeforeColumns = document.createElement( 'div' );\r\n\r\n\t    \t\t\tcolumns = document.createElement( 'span' );\r\n\t    \t\t\tcolumns.appendChild( beforeColumns );\r\n\r\n\t    \t\t\t_.each( this.columns, function( col ) {\r\n\t    \t\t\t\tvar headerText, headerContainer;\r\n\r\n\t    \t\t\t\t// Use a fragment to support HTML in the col.header property, ie Dashicons.\r\n                        headerText = document.createRange().createContextualFragment( col.header );\r\n\t    \t\t\t\theaderContainer = document.createElement( 'div' );\r\n\t    \t\t\t\theaderContainer.appendChild( headerText );\r\n\r\n\t    \t\t\t\tcolumns.appendChild( headerContainer );\r\n\t    \t\t\t} );\r\n\r\n                    afterColumns = document.createElement( 'div' );\r\n                    columns.appendChild( afterColumns );\r\n\r\n\t\t\t\t\treturn columns.innerHTML;\r\n\t\t\t\t},\r\n\r\n\t    \t\trenderSetting: function() {\r\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\r\n\t\t\t\t\treturn setting( this );\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderClasses: function() {\r\n\t\t\t\t\tvar classes = '';\r\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\r\n\t\t\t\t\t\tclasses += this.width;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tclasses += ' one-half';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\tclasses += ' nf-error';\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn classes;\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderVisible: function() {\r\n\t\t\t\t\tif ( this.deps ) {\r\n\t\t\t\t\t\tfor (var name in this.deps) {\r\n\t\t\t\t\t\t    if ( this.deps.hasOwnProperty( name ) ) {\r\n\t\t\t\t\t\t        if ( that.dataModel.get( name ) !== this.deps[ name ] ) {\r\n\t\t\t\t\t\t        \treturn 'style=\"display:none;\"';\r\n\t\t\t\t\t\t        }\r\n\t\t\t\t\t\t    }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t    \t\t\treturn '';\r\n\t    \t\t},\r\n\r\n\t\t\t\trenderError: function() {\r\n\t\t\t\t\tif ( this.error ) {\r\n\t\t\t\t\t\treturn this.error;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn '';\r\n\t\t\t\t},\r\n\r\n\t\t\t\trenderFieldsetClasses: function() {\r\n\t\t\t\t\treturn that.model.get( 'name' );\r\n\t\t\t\t},\r\n\r\n\t\t\t\tcurrencySymbol: function() {\r\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tattachHtml: function( collectionView, childView ) {\r\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\r\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'click .nf-add-new': 'clickAddOption',\r\n\t\t\t'click .extra': 'clickExtra'\r\n\t\t},\r\n        \r\n        maybeHideNew: function( collection ) {\r\n\t\t\tif( 'undefined' == typeof collection.settingModel ) return false;\r\n            var limit = collection.settingModel.get( 'max_options' );\r\n            if( 0 !== limit && collection.models.length >= ( limit ) ) {\r\n                jQuery(this.el).find('.nf-add-new').addClass('disabled');\r\n            } else {\r\n                jQuery(this.el).find('.nf-add-new').removeClass('disabled');\r\n            }\r\n        },\r\n\r\n\t\tclickAddOption: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\r\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\r\n\t\t},\r\n\r\n\t\tclickExtra: function( e ) {\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\r\n\t\t},\r\n\r\n\t\tclickImport: function( e ) {\r\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\r\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\r\n\t\t\t/*\r\n\t\t\t * Return early if we have no strings.\r\n\t\t\t */\r\n\t\t\tif ( 0 == value.length ) {\r\n\t\t\t\te.data.jBox.close();\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Split our value based on new lines.\r\n\t\t\t */\r\n\r\n\t\t\tvar lines = value.split(/\\n/);\r\n\t\t\tif ( _.isArray( lines ) ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * Loop over \r\n\t\t\t\t */\r\n\t\t\t\t_.each( lines, function( line ) {\r\n\t\t\t\t\tvar row = line.split( ',' );\r\n\t\t\t\t\tvar label = row[0];\r\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( label, { separator: '-' } );\r\n\t\t\t\t\tvar calc = row[2] || '';\r\n\r\n\t\t\t\t\tlabel = label.trimLeft().trimRight();\r\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\r\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * Add our row to the collection\r\n\t\t\t\t\t */\r\n\t\t\t\t\tvar model = e.data.view.collection.add( { label: row[0], value: value, calc: calc } );\r\n\t\t\t\t\t// Add our field addition to our change log.\r\n\t\t\t\t\tvar label = {\r\n\t\t\t\t\t\tobject: 'field',\r\n\t\t\t\t\t\tlabel: row[0],\r\n\t\t\t\t\t\tchange: 'Option Added',\r\n\t\t\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\r\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\r\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\r\n\t\t\t\t}, this );\r\n\t\t\t\t/*\r\n\t\t\t\t * Set our state to unclean so that the user can publish.\r\n\t\t\t\t */\r\n\t\t\t} else {\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Error Handling Here\r\n\t\t\t\t */\r\n\t\t\t}\r\n\t\t\ttextarea.val( '' );\r\n\t\t\te.data.jBox.close();\r\n\t\t},\r\n\t} );\r\n\r\n\treturn view;\r\n} );\r\n\n","/**\r\n * Handles tasks associated with our option-repeater.\r\n * \r\n * Return our repeater child view.\r\n *\r\n * Also listens for changes to the options settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests for the childView for list type fields.\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\r\n\t\t\t\r\n\t\t\t// Listen for changes to our list options.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\r\n\r\n\t\t\t// Respond to requests related to our list options sortable.\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\r\n\t\t\r\n\t\t\t/**\r\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update an option value in our model.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t\t\te          event\r\n\t\t * @param  backbone.model \tmodel      option model\r\n\t\t * @param  backbone.model \tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\r\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\r\n\t\t\tif ( 'selected' == name ) {\r\n\t\t\t\tif ( jQuery( e.target ).attr( 'checked' ) ) {\r\n\t\t\t\t\tvar value = 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvar value = 0;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tvar value = jQuery( e.target ).val();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tvar before = model.get( name );\r\n\t\t\t\r\n\t\t\tmodel.set( name, value );\r\n\t\t\t// Trigger an update on our dataModel\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\r\n\t\t\tvar after = value;\r\n\t\t\t\r\n\t\t\tvar changes = {\r\n\t\t\t\tattr: name,\r\n\t\t\t\tbefore: before,\r\n\t\t\t\tafter: after\r\n\t\t\t}\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\r\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an option to our list\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\taddOption: function( collection, dataModel ) {\r\n\t\t\tvar modelData = {\r\n\t\t\t\torder: collection.length,\r\n\t\t\t\tnew: true,\r\n\t\t\t\toptions: {}\r\n\t\t\t};\r\n            var limit = collection.settingModel.get( 'max_options' );\r\n            if( 0 !== limit && collection.models.length >= limit ) {\r\n                return;\r\n            }\r\n\t\t\t_.each( collection.settingModel.get( 'columns' ), function( col, key ) {\r\n\t\t\t\tmodelData[ key ] = col.default;\r\n\r\n\t\t\t\tif( 'undefined' != typeof col.options ){\r\n\t\t\t\t\tmodelData.options[ key ] = col.options;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\tvar model = new listOptionModel( modelData );\r\n\t\t\tcollection.add( model );\r\n\r\n\t\t\t// Add our field addition to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'add:option', model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'added:option', collection );\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete an option from our list\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param backbone.model \t\tmodel       list option model\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteOption: function( model, collection, dataModel ) {\r\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\r\n\r\n\t\t\t// Add our field deletion to our change log.\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\r\n\t\t\t\tdashicon: 'dismiss'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: collection\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\r\n\t\t\t\r\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\r\n\t\t\tvar results = changeCollection.where( { model: model } );\r\n\r\n\t\t\t_.each( results, function( changeModel ) {\r\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\r\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\r\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\r\n\t\t\t\t\t\t\tdataModel.model = newModel;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\t\t\t\tchangeModel.set( 'model', newModel );\r\n\t\t\t\tchangeModel.set( 'disabled', true );\r\n\t\t\t} );\r\n\r\n\t\t\tcollection.remove( model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'removed:option', collection );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\r\n\t\t\tthis.triggerDataModel( model, dataModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\r\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param backbone.collection \tcollection \tlist option collection\r\n\t\t * @param backbone.model \t\tdataModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\ttriggerDataModel: function( model, dataModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return our list composite view to the setting collection view.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \tsettings model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tgetSettingChildView: function( model ) {\r\n\t\t\treturn listCompositeView;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\r\n\t\t * @param  backbone.view \tsetting  \tSetting view\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\r\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\r\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: setting.collection,\r\n\t\t\t\tobjModels: []\r\n\t\t\t};\r\n\r\n\t\t\t_.each( newOrder, function( cid, index ) {\r\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\r\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\r\n\t\t\t\toptionModel.set( 'order', index );\r\n\t\t\t\tvar newPos = index;\r\n\r\n\t\t\t\tdata.objModels.push( {\r\n\t\t\t\t\tmodel: optionModel,\r\n\t\t\t\t\tattr: 'order',\r\n\t\t\t\t\tbefore: oldPos,\r\n\t\t\t\t\tafter: newPos\r\n\t\t\t\t} );\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\tsetting.collection.sort( { silent: true } );\r\n\t\t\t\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\r\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\r\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\r\n\t\t\t\tdashicon: 'sort'\r\n\t\t\t};\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\r\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\r\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\r\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop sorting our list options, reset our item opacity.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Object ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstopOptionSortable: function( ui ) {\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Objects ui jQuery UI element\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartOptionSortable: function( ui ) {\r\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\r\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Convert settings from an array/object to a collection/model\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  Backbone.Model dataModel\r\n\t\t * @param  Backbone.Model settingModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tconvertSettings: function( dataModel, settingModel ) {\r\n\t\t\t/*\r\n\t\t\t * Our options are stored in our database as objects, not collections.\r\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n\t\t\t */ \r\n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\r\n\r\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\r\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\r\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\r\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from a field currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - Edit Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our fields.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our fields collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n            _.each( fieldCollection.models, function( field ) {\r\n\t\t\t\tfield.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\r\n\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\t\t\t\r\n\t\t\t// Responds to requests for our collection.\r\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t},\r\n\r\n\t\tgetSettingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual Credit Card Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\r\n        },\r\n\r\n        dropCreditCardField: function( fieldModel ) {\r\n\r\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\r\n\r\n                var order = fieldModel.get( 'order' );\r\n\r\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\r\n\r\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\r\n\r\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\r\n                    var newField = {\r\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\r\n                        type: type,\r\n                        label: fieldType.get( 'nicename' ),\r\n                        order: order\r\n                    };\r\n\r\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\r\n                });\r\n            }\r\n\r\n        },\r\n\r\n        stageCreditCardField: function( model ) {\r\n\r\n            if( 'creditcard' == model.get( 'slug' ) ) {\r\n\r\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\r\n\r\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\r\n                    nfRadio.channel('fields').request('add:stagedField', type );\r\n                });\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual List Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\r\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\r\n            \r\n            /*\r\n             * When we init our model, convert our options from an array of objects to a collection of models.\r\n             */\r\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\r\n        },\r\n\r\n        updateOptionLabel: function( e, model, dataModel, settingModel, optionView ) {\r\n\r\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\r\n\r\n            if( model.get( 'manual_value' ) ) return;\r\n\r\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\r\n\r\n            model.set( 'value', value );\r\n            model.trigger( 'change', model );\r\n\r\n            // Set focus on value input\r\n            jQuery( optionView.el ).find( '[data-id=\"value\"]' ).focus().select();\r\n        },\r\n\r\n        updateOptionValue: function( e, model, dataModel, settingModel, optionView ) {\r\n\r\n            var findWhere = _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } );\r\n            if( 'undefined' == typeof findWhere ) return;\r\n            if( 'list' != findWhere.parentType ) return;\r\n\r\n            model.set( 'manual_value', true );\r\n            \r\n            // Set focus on calc input\r\n            jQuery( optionView.el ).find( '[data-id=\"calc\"]' ).focus().select();\r\n        },\r\n\r\n        convertOptions: function( fieldModel ) {\r\n            /*\r\n             * Our options are stored in our database as objects, not collections.\r\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\r\n             */ \r\n            var options = fieldModel.get( 'options' );\r\n\r\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\r\n\r\n            if ( false == options instanceof Backbone.Collection ) {\r\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\r\n                options.add( fieldModel.get( 'options' ) );\r\n                fieldModel.set( 'options', options, { silent: true } );\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel to add the individual Credit Card Fields.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldPassword',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.addField );\r\n        },\r\n\r\n        addField: function( model ) {\r\n\r\n            if( 'password' == model.get( 'type' ) ) {\r\n\r\n                var order = model.get( 'order' );\r\n\r\n                var confirm = this.insertField( 'passwordconfirm', order + 1 );\r\n\r\n                confirm.set( 'confirm_field', model.get( 'key' ) );\r\n            }\r\n        },\r\n\r\n        insertField: function( type, order ) {\r\n            var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\r\n\r\n            var newField = {\r\n                id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\r\n                type: type,\r\n                label: fieldType.get( 'nicename' ),\r\n                order: order\r\n            };\r\n\r\n            return nfRadio.channel('fields').request('add', newField );\r\n        }\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldQuantity',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\r\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\r\n\t\t\t\tsettingModel.set( 'options', productFields );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetProductFields: function( settingModel ) {\r\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\r\n\t\t\t// Update our dataModel with all of our product fields.\r\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields.models, function( field ) {\r\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\r\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\treturn productFields;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldShipping',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\r\n\t\t},\r\n\r\n\t\taddMask: function( settingModel, dataModel, view ) {\r\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\r\n\t\t\t\tjQuery( this ).autoNumeric({\r\n\t\t\t\t\taSign: '$', // TODO: Use form setting\r\n\t\t\t\t\taSep: thousandsSeparator,\r\n\t\t\t\t\taDec: decimalPoint\r\n\t\t\t\t});\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * When we add a new field, update its key.\r\n *\r\n * When we change the key, update any refs to the key.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/key',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// When we add a field, update its key.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\r\n\r\n\t\t\t// When we edit a label, update our key.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\r\n\r\n\t\t\t// When we edit a key, check for places that key might be used.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\r\n\r\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a key to our new field model.\r\n\t\t *\r\n\t\t * @since 3.0\r\n\t\t * @param backbone.model model new field model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tnewFieldKey: function( model ) {\r\n\t\t\tvar d = new Date();\r\n\t\t\tvar n = d.valueOf();\r\n\t\t\tvar key = this.slugify( model.get( 'type' ) + '_' + n );\r\n\r\n\t\t\tmodel.set( 'key', key, { silent: true } );\r\n\r\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\r\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tupdateLabel: function( model ) {\r\n\r\n\t\t\t/*\r\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\r\n\t\t\t */\r\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\r\n\t\t\t\t/*\r\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\r\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\r\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\r\n\t\t\t\t *\r\n\t\t\t\t */\r\n\t\t\t\tdelete model.changed.label;\r\n\t\t\t\tvar d = new Date();\r\n\t\t\t\tvar n = d.valueOf();\r\n\t\t\t\tvar key = this.slugify( model.get( 'label' ) + '_' + n );\r\n\t\t\t\tmodel.set( 'key', key );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a field key is updated, find any merge tags using the key and update them.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model model field model\r\n\t\t * @return void\r\n\t\t */\r\n\t\tupdateKey: function( dataModel ) {\r\n\t\t\tvar key = dataModel.get( 'key' );\r\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\r\n\t\t\tthis.setError( key, dataModel );\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, settingModel, dataModel ) {\r\n\t\t\tdataModel.set( 'manual_key', true );\r\n\t\t\tthis.settingModel = settingModel;\r\n\t\t\tvar key = jQuery( e.target ).val();\r\n\t\t\tthis.setError( key, dataModel );\r\n\t\t},\r\n\r\n\t\tsetError: function( key, dataModel ) {\r\n\t\t\tvar error = false;\r\n\t\t\tif ( '' == jQuery.trim( key ) ) {\r\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\r\n\t\t\t} else if ( key != key.toLowerCase() ) {\r\n\t\t\t\terror = 'Field keys must be lowercase.';\r\n\t\t\t} else if ( key != key.replace( ' ', '_' ) ) {\r\n\t\t\t\terror = 'Field keys must cannot use spaces. Separate with \"_\" instead.';\r\n\t\t\t} else if ( '_' == key.slice( -1 ) ) {\r\n\t\t\t\terror = 'Field keys cannot end with a \"_\"';\r\n\t\t\t} else if ( key != this.slugify( key ) ) {\r\n\t\t\t\terror = 'Invalid Format.';\r\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\r\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\r\n\t\t\t}\r\n\r\n\t\t\tif ( error ) {\r\n\t\t\t\tthis.settingModel.set( 'error', error );\r\n\t\t\t} else {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\r\n\t\t\t\tthis.settingModel.set( 'error', false );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tkeyExists: function( key, dataModel ) {\r\n\t\t\tvar newKey = this.slugify( key );\r\n\t\t\tif ( 0 != newKey.length ) {\r\n\t\t\t\tkey = newKey;\r\n\t\t\t}\r\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\tvar x = 1;\r\n\t\t\tvar testKey = key;\r\n\t\t\t_.each( fieldCollection.models, function( field ) {\r\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\r\n\t\t\t\t\ttestKey = key + '_' + x;\r\n\t\t\t\t\tx++;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\tkey = testKey;\r\n\r\n\t\t\treturn key;\r\n\t\t},\r\n\r\n\t\tslugify: function( string ){\r\n\t\t\treturn jQuery.slugify( string, { separator: '_' } )\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Creates notices for our fields domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/notices',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\r\n\t\t},\r\n\r\n\t\taddStagedField: function( model ) {\r\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles mobile-specific JS for our fields domain.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/mobile',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for the start of our sorting.\r\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\r\n\t\t\t// Listen for when we start sorting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\r\n\t\t\t// Listen for when we stop sorting.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\r\n\t\t},\r\n\r\n\t\tinitWiggle: function( view ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\r\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartWiggle: function( ui ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\r\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstopWiggle: function( ui ) {\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\r\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/savedFields',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tignoreAttributes: [\r\n\t\t\t'editActive',\r\n\t\t\t'order',\r\n\t\t\t'saved',\r\n\t\t\t'jBox'\r\n\t\t],\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\r\n\t\t\t// Listen to clicks on our add saved field button.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\r\n\t\t},\r\n\r\n\t\tupdateField: function( dataModel ) {\r\n\t\t\tif ( dataModel.get( 'saved' ) ) {\r\n\t\t\t\t\r\n\t\t\t\tvar modified = false;\r\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t_.each( changedAttributes, function( changed ) {\r\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\r\n\t\t\t\t\t\tmodified = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t\t\r\n\t\t\t\tif ( modified ) {\r\n\t\t\t\t\tdataModel.set( 'saved', false );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tclickAddSavedField: function( e, dataModel ) {\r\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\r\n\r\n\t\t\tvar fieldData = modelClone.attributes;\r\n\t\t\tfieldData.saved = true;\r\n\r\n\t\t\tdelete fieldData.jBox;\r\n\t\t\tdelete fieldData.editActive;\r\n\t\t\tdelete fieldData.created_at;\r\n\t\t\tdelete fieldData.order;\r\n\t\t\tdelete fieldData.id;\r\n\t\t\tdelete fieldData.formID;\r\n\t\t\tdelete fieldData.parent_id;\r\n\t\t\t\r\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\r\n\t\t\tvar newType = _.clone( type.attributes );\r\n\r\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\r\n\t\t\tconsole.log( nicename );\r\n\t\t\tnewType.nicename = nicename;\r\n\t\t\tfieldData.label = nicename;\r\n\t\t\tfieldData.nicename = nicename;\r\n\t\t\tdataModel.set( 'addSavedLoading', true );\r\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\r\n\r\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\r\n\t\t\t\tresponse = JSON.parse( response );\r\n\t\t\t\tnewType.id = response.data.id;\r\n\t\t\t\tnewType.nicename = nicename;\r\n\t\t\t\tnewType.settingDefaults = fieldData;\r\n\r\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\r\n\t\t\t\tvar newModel = typeCollection.add( newType );\r\n\r\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\r\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\r\n\r\n\t\t\t\t// dataModel.set( 'type', response.data.id );\r\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\r\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\r\n\t\t\t\tdataModel.get( 'jBox' ).close();\r\n\t\t\t\t// dataModel.set( 'saved', true );\r\n\r\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a datepicker setting, add our datepicker.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\r\n\t\t},\r\n\r\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\r\n\t\t\tvar dateObject = pikadayResponsive( jQuery( view.el ).find( '.setting' )[0] );\t\t\t\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a product_assignment setting, add our products to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\t\t\t// console.log( 'render!' );\r\n\t\t},\r\n\r\n\t\tgetProductFields: function( settingModel ) {\r\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\r\n\t\t\t// Update our dataModel with all of our product fields.\r\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields.models, function( field ) {\r\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\r\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\treturn productFields;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\r\n *\r\n * Loops over our preloaded data and adds that to our action type collection\r\n *\r\n * Also responds to requests for data about action types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\r\n\t\t\t/*\r\n\t\t\t * Instantiate \"installed\" actions collection.\r\n\t\t\t */\r\n\t\t\tthis.installedActions = new TypeCollection(\r\n\t\t\t\t_.filter( actionTypeData, function( type ) {\r\n\t\t\t\t\treturn type.section == 'installed';\r\n\t\t\t\t\t} \r\n\t\t\t\t),\r\n\t\t\t\t{\r\n\t\t\t\t\tslug: 'installed',\r\n\t\t\t\t\tnicename: nfi18n.installed\r\n\t\t\t\t} \r\n\t\t\t);\r\n\r\n\t\t\tthis.availableActions = new TypeCollection(\r\n\t\t\t\t_.filter( actionTypeData, function( type ) {\r\n\t\t\t\t\treturn type.section == 'available';\r\n\t\t\t\t\t} \r\n\t\t\t\t),\r\n\t\t\t\t{\r\n\t\t\t\t\tslug: 'available',\r\n\t\t\t\t\tnicename: nfi18n.available\r\n\t\t\t\t}\r\n\t\t\t);\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetType: function( id ) {\r\n\t\t\t// Search our installed actions first\r\n\t\t\tvar type = this.installedActions.get( id );\r\n\t\t\tif ( ! type ) {\r\n\t\t\t\ttype = this.availableActions.get( id );\r\n\t\t\t}\r\n        \treturn type;\r\n        },\r\n\r\n        /**\r\n         * Return the installed action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetInstalledActions: function() {\r\n        \treturn this.installedActions;\r\n        },\r\n\r\n        /**\r\n         * Return the available action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetAvailableActions: function() {\r\n        \treturn this.availableActions;\r\n        },\r\n\r\n        /**\r\n         * Add a field type to our staging area when the field type button is clicked.\r\n         *\r\n         * @since 3.0\r\n         * @param Object e event\r\n         * @return void\r\n         */\r\n        addStagedField: function( e ) {\r\n        \tvar type = jQuery( e.target ).data( 'id' );\r\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\r\n        },\r\n\r\n        /**\r\n         * Return our field type settings sections\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection field type settings sections\r\n         */\r\n        getTypeSections: function() {\r\n            return this.fieldTypeSections;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Model that represents our form action.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/actionModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Action',\r\n\t\t\tobjectDomain: 'actions',\r\n\t\t\teditActive: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.on( 'change', this.changeSetting, this );\r\n\r\n\t\t\t// Get our parent field type.\r\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\r\n\r\n\t\t\tif( 'undefined' == typeof actionType ) return;\r\n\r\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\r\n\t\t\tvar that = this;\r\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\r\n\t\t\t\tif ( ! that.get( key ) ) {\r\n\t\t\t\t\tthat.set( key, val, { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Trigger an init event on three channels:\r\n\t\t\t * \r\n\t\t\t * actions\r\n\t\t\t * action-type\r\n\t\t\t *\r\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\r\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options ) {\r\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\r\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\r\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our action models. \r\n * This is the actual action data created by the user.\r\n *\r\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: actionModel,\r\n\t\tcomparator: 'order',\r\n\t\ttmpNum: 1,\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.on( 'add', this.addAction, this );\r\n\t\t\tthis.on( 'remove', this.removeAction, this );\r\n\t\t\tthis.newIDs = [];\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we add a field, push the id onto our new action property.\r\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\taddAction: function( model ) {\r\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we remove a field, push the id onto our removed action property.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param void\r\n\t\t */\r\n\t\tremoveAction: function( model ) {\r\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\r\n\t\t}\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Handles interactions with our actions collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our action collection from our localized form data\r\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\r\n\t\t\tthis.collection.tmpNum = 1;\r\n\r\n\t\t\tif ( 0 != this.collection.models.length ) {\r\n\t\t\t\tvar that = this;\r\n\t\t\t\t_.each( this.collection.models, function( action ) {\r\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\r\n\t\t\t\t\t\tthat.collection.tmpNum++;\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\r\n\t\t\tthis.collection.removedIDs = {};\r\n\r\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\r\n\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\r\n\t\t},\r\n\r\n\t\tgetCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t},\r\n\r\n\t\tgetAction: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \taction data to insert\r\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\r\n\t\t */\r\n\t\taddAction: function( data, silent ) {\r\n\t\t\tsilent = silent || false;\r\n\r\n\t\t\tif ( false === data instanceof Backbone.Model ) {\r\n\t\t\t\tvar model = new actionModel( data );\r\n\t\t\t} else {\r\n\t\t\t\tvar model = data;\r\n\t\t\t}\r\n\r\n\t\t\tthis.collection.add( model, { silent: silent } );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\r\n\t\t\treturn model;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Delete a action from our collection.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\r\n\t\t * @return void\r\n\t\t */\r\n\t\tdeleteAction: function( model ) {\r\n\t\t\tthis.collection.remove( model );\r\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\r\n\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Return a new tmp id for our actions.\r\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return string\r\n\t\t */\r\n\t\tgetTmpID: function() {\r\n\t\t\tvar tmpNum = this.collection.tmpNum;\r\n\t\t\tthis.collection.tmpNum++;\r\n\t\t\treturn 'tmp-' + tmpNum;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\r\n\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from a action currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - Edit Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our actions.\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our actions collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\r\n            _.each( actionCollection.models, function( action ) {\r\n\t\t\t\taction.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage Actions - Action Settings Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/emailFromSetting',[], function( ) {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'actionSetting-from_address' ), 'update:setting', this.updateFromAddress );\r\n        },\r\n\r\n        updateFromAddress: function( dataModel, settingModel ) {\r\n            if( 'undefined' == typeof settingModel ) return;\r\n\r\n            var value = dataModel.get( 'from_address' ).trim();\r\n\r\n            if( '{wp:admin_email}' == value ) {\r\n                return settingModel.set( 'warning', false );\r\n            }\r\n\r\n            if( value && ( ! this.isValidEmail( value ) ) || nfAdmin.home_url_host != value.replace(/.*@/, \"\") ){\r\n                return settingModel.set( 'warning', nfi18n.errorInvalidEmailFromAddress );\r\n            }\r\n\r\n            return settingModel.set( 'warning', false );\r\n        },\r\n\r\n        isValidEmail: function(email) {\r\n            return /^.+@.+\\..+$/.test(email);\r\n        }\r\n    });\r\n    return controller;\r\n} );\n","/**\r\n * Handles clicks and dragging for our action types.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields - New Field Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\r\n\r\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\r\n\t\t * \r\n\t\t * @since 3.0\r\n\t\t * @param Object \tdata \taction data to insert\r\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\r\n\t\t */\r\n\t\taddAction: function( type ) {\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\r\n\t\t\t\ttype: type.get( 'id' ),\r\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\r\n\t\t\t}\r\n\r\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\r\n\r\n\t\t\tvar label = {\r\n\t\t\t\tobject: 'Action',\r\n\t\t\t\tlabel: newModel.get( 'label' ),\r\n\t\t\t\tchange: 'Added',\r\n\t\t\t\tdashicon: 'plus-alt'\r\n\t\t\t};\r\n\r\n\t\t\tvar data = {\r\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the logic for our action type draggables.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/typeDrag',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our action type draggables and run the appropriate function.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we start dragging:\r\n\t\t * get our drawer element\r\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\r\n\t\t * get our main element\r\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\r\n\t\t * set our dragging helper clone\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return void\r\n\t\t */\r\n\t\tstartDrag: function( context, ui ) {\r\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\r\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\r\n\r\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\r\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\r\n\t\t * @return {[type]}         [description]\r\n\t\t */\r\n\t\tstopDrag: function( context, ui ) {\r\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\r\n\t\t},\r\n\r\n\t\tgetCurrentDraggableHelperClone: function() {\r\n\t\t\treturn this.draggableHelperClone;\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles the logic for our action type droppable.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/droppable',[], function( ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * Respond to requests for our helper clone.\r\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\r\n\t\t\t */ \r\n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\r\n\t\t},\r\n\r\n\t\tdropActionType: function( e, ui ) {\r\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\r\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\r\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Model for our action type\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/typeModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Collection that holds our action type models. \r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\r\n\tvar collection = Backbone.Collection.extend( {\r\n\t\tmodel: actionTypeModel\r\n\t} );\r\n\treturn collection;\r\n} );\n","/**\r\n * Filters our action type collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen to our change filter event.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Filter our action types in the add new action drawer\r\n\t\t * \r\n\t\t * Takes a search string and finds any action types that match either the name or alias.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string\t search \tstring being searched for\r\n\t\t * @param  object \t e      \tKeyup event\r\n\t\t * @return void\r\n\t\t */\r\n\t\tfilterActionTypes: function( search, e ) {\r\n\r\n\t\t\t// Make sure that we aren't dealing with an empty string.\r\n\t\t\tif ( '' != jQuery.trim( search ) ) {\r\n\r\n        \t\tvar filteredInstalled = [];\r\n        \t\t/**\r\n        \t\t * Call the function that actually filters our collection,\r\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\r\n        \t\t */\r\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\r\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\r\n        \t\t\tfilteredInstalled.push( model );\r\n        \t\t} );\r\n\r\n        \t\tvar filteredAvailable = [];\r\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\r\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\r\n        \t\t\tfilteredAvailable.push( model );\r\n        \t\t} );\r\n\r\n        \t\t// Create a new Action Type Section collection with the filtered array.\r\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\r\n        \t\tnewInstalled.slug = 'installed';\r\n        \t\tnewInstalled.nicename = 'Installed';\r\n\r\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\r\n        \t\tnewAvailable.slug = 'available';\r\n        \t\tnewAvailable.nicename = 'Available';\r\n\r\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\r\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\r\n        \t\tif ( e.addObject ) {\r\n        \t\t\tif ( 0 < newInstalled.length ) {\r\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\r\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\r\n        \t\t\t}\r\n        \t\t}\r\n        \t} else {\r\n        \t\t// Clear our filter if the search text is empty.\r\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\r\n        \t}\r\n        },\r\n\r\n        /**\r\n         * Search our action type collection for the search string.\r\n         * \r\n         * @since  3.0\r\n         * @param  string\t search \tstring being searched for\r\n         * @return backbone.collection\r\n         */\r\n        filterCollection: function( search, collection ) {\r\n        \tsearch = search.toLowerCase();\r\n        \t/*\r\n        \t * Backbone collections have a 'filter' method that loops through every model,\r\n        \t * waiting for you to return true or false. If you return true, the model is kept.\r\n        \t * If you return false, it's removed from the filtered result.\r\n        \t */\r\n\t\t\tvar filtered = collection.filter( function( model ) {\r\n\t\t\t\tvar found = false;\r\n\t\t\t\t\r\n\t\t\t\t// If we match either the ID or nicename, return true.\r\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\r\n\t\t\t\t */\r\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\r\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\r\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\r\n\t\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If we match any of the aliases, return true.\r\n\t\t\t\tif ( model.get( 'alias' ) ) {\r\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\r\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\r\n\t\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} );\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn found;\r\n\t\t\t} );\r\n\r\n\t\t\t// Return our filtered collection.\r\n\t\t\treturn filtered;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * @package Ninja Forms builder\r\n * @subpackage Actions - New Action Drawer\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/actions/newsletterList',[], function( ) {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\r\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\r\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\r\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\r\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\r\n        },\r\n\r\n        defaultFields: function( settingModel, dataModel ) {\r\n            this.maybeRenderFields( dataModel, settingModel );\r\n            this.maybeRenderGroups( dataModel, settingModel );\r\n        },\r\n\r\n        registerFieldsListener: function ( model ) {\r\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\r\n        },\r\n\r\n        registerGroupsListener: function ( model ) {\r\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\r\n        },\r\n\r\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\r\n\r\n            var data = {\r\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\r\n                security: nfAdmin.ajaxNonce\r\n            };\r\n\r\n            var that = this;\r\n            jQuery( e.srcElement ).addClass( 'spin' );\r\n            jQuery.post( ajaxurl, data, function( response ){\r\n                var response = JSON.parse( response );\r\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\r\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\r\n            }).always( function() {\r\n                jQuery( e.srcElement ).removeClass( 'spin' );\r\n            });\r\n        },\r\n\r\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\r\n            settingModel.set( 'options', lists );\r\n            settingView.render();\r\n        },\r\n\r\n        maybeRenderFields: function( dataModel, settingModel ) {\r\n\r\n            if( 'undefined' == typeof settingModel ) return;\r\n\r\n            var selectedList = dataModel.get( 'newsletter_list' );\r\n            var lists = settingModel.get( 'options' );\r\n            _.each( lists, function( list ) {\r\n                if ( selectedList == list.value ) {\r\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\r\n                }\r\n            } );\r\n\r\n            dataModel.set( 'newsletter_list_fields', 0 );\r\n        },\r\n\r\n        maybeRenderGroups: function( dataModel, settingModel ) {\r\n            if( 'undefined' == typeof settingModel ) return;\r\n\r\n            var selectedList = dataModel.get( 'newsletter_list' );\r\n            var lists = settingModel.get( 'options' );\r\n            _.each( lists, function( list ) {\r\n                if ( selectedList == list.value ) {\r\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\r\n                }\r\n            } );\r\n\r\n            dataModel.set( 'newsletter_list_fields', 0 );\r\n        },\r\n\r\n        updateFieldMapping: function( fields ) {\r\n           var settings = this.get( 'settings' );\r\n            settings.reset();\r\n            _.each( fields, function( field ){\r\n\r\n                settings.add({\r\n                    name: field.value,\r\n                    type: 'textbox',\r\n                    label: field.label,\r\n                    width: 'full',\r\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\r\n                });\r\n            });\r\n            this.set( 'settings', settings );\r\n        },\r\n\r\n        updateInterestGroups: function( groups ) {\r\n            var settings = this.get( 'settings' );\r\n            settings.reset();\r\n            _.each( groups, function( group ){\r\n\r\n                settings.add({\r\n                    name: group.value,\r\n                    type: 'toggle',\r\n                    label: group.label,\r\n                    width: 'full',\r\n                });\r\n            });\r\n            this.set( 'settings', settings );\r\n        },\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\r\n\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a collect payment setting, add our number fields and total fields to the data model.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1.7\r\n */\r\ndefine( 'controllers/actions/collectPaymentFields',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n\t\t},\r\n\r\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\t\t\tif ( 'field' != settingModel.get( 'total_type' ) ) return false;\r\n\r\n\t\t\tvar fields = this.getFields( settingModel );\r\n\r\n\t\t\t/*\r\n\t\t\t * If the field in the payment total isn't in our field list, add it.\r\n\t\t\t *\r\n\t\t\t * Remove the merge tag stuff to get the field key.\r\n\t\t\t */\r\n\t\t\t\r\n\t\t\tvar field_key = dataModel.get( 'payment_total' );\r\n\t\t\tfield_key = field_key.replace( '{field:', '' );\r\n\t\t\tfield_key = field_key.replace( '}', '' );\r\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', field_key );\r\n\r\n\t\t\tif ( 'undefined' != typeof fieldModel ) {\r\n\t\t\t\tif ( 'undefined' == typeof _.findWhere( fields, { value: dataModel.get( 'payment_total' ) } ) ) {\r\n\t\t\t\t\tfields.push( { label: fieldModel.get( 'label' ), value: '{field:' + fieldModel.get( 'key' ) + '}' } );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Update our fields options.\r\n\t\t\t */\r\n\t\t\tsettingModel.set( 'options', fields );\r\n\t\t\t\r\n\t\t},\r\n\r\n\t\tgetFields: function( settingModel ) {\r\n\t\t\tvar returnFields = [ settingModel.get( 'default_options' ) ];\r\n\t\t\t// Update our dataModel with all of our product fields.\r\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t_.each( fields.models, function( field ) {\r\n\t\t\t\tif ( 'number' == field.get( 'type' ) || 'total' == field.get( 'type' ) || 'checkbox' == field.get( 'type' ) ) {\r\n\t\t\t\t\treturnFields.push( { label: field.get( 'label' ), value: '{field:' + field.get( 'key' ) + '}' } );\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\treturnFields = _.sortBy( returnFields, function( field ) { return field.label } );\r\n\r\n\t\t\treturn returnFields;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we're rendering a collect payment setting, add our calculations to the data model.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1.7\r\n */\r\ndefine( 'controllers/actions/collectPaymentCalculations',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // Listen for messages that are fired before a setting view is rendered.\r\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n        },\r\n\r\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\r\n            if ( 'calc' == settingModel.get( 'total_type' ) ) {\r\n                var calcModels = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n                var calcs = this.getCalcs( calcModels, settingModel );\r\n\r\n                settingModel.set( 'options', calcs );\r\n            }\r\n        },\r\n\r\n        getCalcs: function( calcModels, settingModel ) {\r\n            var returnCalcs = [ settingModel.get( 'default_options' ) ];\r\n\r\n            // Update our dataModel with all of our product fields.\r\n            var calcs = calcModels.get( 'settings' ).get( 'calculations' );\r\n\r\n            _.each( calcs.models, function( calc ) {\r\n                returnCalcs.push( { label: calc.get( 'name' ), value: '{calc:' + calc.get( 'name' ) + '}' } );\r\n            } );\r\n\r\n            returnCalcs = _.sortBy( returnCalcs, function( calc ) { return calc.label } );\r\n\r\n            return returnCalcs;\r\n        }\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * Listens to our app channel for settings views being rendered.\r\n *\r\n * If we haven't set a total_type, then set the total_type to fixed.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1.7\r\n */\r\ndefine( 'controllers/actions/collectPaymentFixed',[], function() {\r\n    var controller = Marionette.Object.extend( {\r\n        initialize: function() {\r\n            // Listen for messages that are fired before a setting view is rendered.\r\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\r\n        },\r\n\r\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\r\n\r\n            if ( 'payment_total_type' != settingModel.get( 'name' ) || _.isEmpty( dataModel.get( 'payment_total' ) ) ) return false;\r\n\r\n            /*\r\n             * If we don't have a payment total type and we have a payment total, set our total type to the appropriate total type.\r\n             */\r\n            if ( ( 'undefined' == dataModel.get( 'payment_total_type' ) || _.isEmpty( dataModel.get( 'payment_total_type' ) ) ) ) {\r\n                /*\r\n                 * If payment_total is a field merge tag, set payment_total_type to \"field\"\r\n                 */\r\n\r\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) ) {\r\n                    dataModel.set( 'payment_total_type', 'field' );\r\n                } else if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\r\n                    dataModel.set( 'payment_total_type', 'calc' );\r\n                } else {\r\n                    dataModel.set( 'payment_total_type', 'fixed' );\r\n                }   \r\n            }\r\n        },\r\n\r\n    });\r\n\r\n    return controller;\r\n} );\n","/**\r\n * When we init a collect payment action, listen for calc changes\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2017 WP Ninjas\r\n * @since 3.1.7\r\n */\r\ndefine( 'controllers/actions/collectPayment',[], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * When we init a collect payment action model, register a listener for calc changes.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'actions-collectpayment' ), 'init:actionModel', this.initCollectPayment );\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Before we render our total field, we may want to update its value.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.maybeClearTotal );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When a collect payment action is init'd, register a listener for calc changes and update our data appropriately.\r\n\t\t * @since  3.1.7\r\n\t\t * @param  {backbone.model} actionModel \r\n\t\t * @return {void}\r\n\t\t */\r\n\t\tinitCollectPayment: function( actionModel )  {\r\n\t\t\tactionModel.listenTo( nfRadio.channel( 'calcs' ), 'update:calcName', this.maybeUpdateTotal );\r\n        },\r\n\r\n\t\t//TODO: Add in an error that will not allow drawer to close until total type and total value is selected.\r\n\t\tmaybeError: function(){},\r\n\r\n\t\tmaybeUpdateTotal: function( optionModel, oldName ) {\r\n\t\t\t/*\r\n\t\t\t * We have changed a calculation. Make sure that 'calc' is our payment total type.\r\n\t\t\t */\r\n\t\t\tif ( 'calculation' != this.get( 'payment_total_type' ) ) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\t * Check our payment_total setting for the old merge tag and replace it with the new one.\r\n\t\t\t */\r\n\t\t\tvar newVal = this.get( 'payment_total' ).replace( '{calc:' + oldName + '}', '{calc:' + optionModel.get( 'name' ) + '}' );\r\n\t\t\tthis.set( 'payment_total', newVal );\r\n\t\t},\r\n\r\n\t\tmaybeClearTotal: function( settingModel, dataModel, view ) {\r\n            /*\r\n             * If our payment_total is a merge tag, clear it when we select the \"fixed\" option.\r\n             */\r\n            if ( 'fixed' == dataModel.get( 'payment_total_type' ) ) {\r\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) || -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\r\n                    dataModel.set( 'payment_total', '' );\r\n                }\r\n            }\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\r\n *\r\n * Loops over our preloaded data and adds that to our form setting type collection\r\n *\r\n * Also responds to requests for data about form setting types\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/types',[\r\n\t\t'models/app/typeCollection'\r\n\t],\r\n\tfunction(\r\n\t\tTypeCollection\r\n\t) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Create our field type collection\r\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\r\n\r\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Return a field type by id\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tid \tfield type\r\n\t\t * @return backbone.model    \tfield type model\r\n\t\t */\r\n\t\tgetType: function( id ) {\r\n\t\t\treturn this.collection.get( id );\r\n        },\r\n\r\n        /**\r\n         * Return the installed action type collection\r\n         *\r\n         * @since  3.0\r\n         * @return backbone.collection    \tfield type collection\r\n         */\r\n\t\tgetCollection: function() {\r\n        \treturn this.collection;\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Model that represents our form settings.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Form Settings\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'models/advanced/settingsModel',[], function() {\r\n\tvar model = Backbone.Model.extend( {\r\n\t\tdefaults: {\r\n\t\t\tobjectType: 'Form Setting',\r\n\t\t\teditActive: false\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// Listen for model attribute changes\r\n\t\t\tthis.bind( 'change', this.changeSetting, this );\r\n\t\t\t/*\r\n\t\t\t * Check to see if we have any setting defaults to set.\r\n\t\t\t */\r\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\r\n\t\t\t_.each( formSettings.models, function( settingModel ) {\r\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\r\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\r\n\t\t\t\t}\r\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\r\n\t\t\t}, this );\r\n\r\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * When we change the model attributes, fire an event saying we've changed something.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n\t\tchangeSetting: function( model, options) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\r\n\t\t},\r\n\r\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\r\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\r\n\t\t}\r\n\t} );\r\n\t\r\n\treturn model;\r\n} );\n","/**\r\n * Handles interactions with our form settings collection.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Load our action collection from our localized form data\r\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\r\n\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\r\n\t\t},\r\n\r\n\t\tgetSettings: function() {\r\n\t\t\treturn this.model;\r\n\t\t},\r\n\r\n\t\tupdateSetting: function( name, value, silent ) {\r\n\t\t\tsilent = silent || false;\r\n\t\t\tthis.model.set( name, value, { silent: silent } );\r\n\t\t},\r\n\r\n\t\tgetSetting: function( name ) {\r\n\t\t\treturn this.model.get( name );\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Fetches settings models so that we can get setting information\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\r\n\t\t\t\t\t\r\n\t\t\t// Responds to requests for settings models.\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\r\n\r\n\t\t\t// Responds to requests for our setting collection\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\r\n\t\t},\r\n\r\n\t\tgetSettingModel: function( name ) {\r\n\t\t\treturn this.collection.findWhere( { name: name } );\r\n\t\t},\r\n\r\n\t\tgetSettingCollection: function() {\r\n\t\t\treturn this.collection;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Handles adding and removing the active class from form settings currently being edited.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/editActive',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Respond to requests to remove the active class from all our fields.\r\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\r\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\r\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Loops through our fields collection and sets editActive to false.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return void\r\n\t\t */\r\n        clearEditActive: function() {\r\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\r\n            _.each( collection.models, function( field ) {\r\n\t\t\t\tfield.set( 'editActive', false );\r\n            } );\r\n        }\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Listens for clicks on our form settings sections.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\r\n\t\t},\r\n\r\n\t\tclickEdit: function( e, typeModel ) {\r\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\r\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\r\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\r\n\t\t\tif ( ! preventClose ) {\r\n\t\t\t\ttypeModel.set( 'editActive', true );\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","/**\r\n * Makes sure that calculations don't reference calculations with a lower order.\r\n *\r\n * For example, our first caclulation can't reference the second, but the second can reference the first.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Advanced\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'controllers/advanced/calculations',[], function() {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t/*\r\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\r\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\r\n\t\t\t/*\r\n\t\t\t * Same thing for when our calculation option is updated\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\r\n\t\t\t/*\r\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\r\n\t\t\t * references.\r\n\t\t\t */\r\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\r\n\t\t},\r\n\r\n\t\tkeyUp: function( e, optionModel ) {\r\n\t\t\t// Get our current value\r\n\t\t\tvar value = jQuery( e.target ).val();\r\n\t\t\t// Check to see if we're editing a name or eq\r\n            var id = jQuery( e.target ).data( 'id' );\r\n\t\t\tif( 'name' == id ) { // We are editing the name field\r\n\t\t\t\t// Check to see if our name already exists.\r\n\t\t\t\tthis.checkName( value, optionModel );\r\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\r\n\t\t\t} else if( 'eq' == id ) { // We're editing the eq\r\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\r\n\t\t\t\tthis.checkEQ( value, optionModel );\r\n\t\t\t} else if( 'dec' == id ) { // We're editing the dec\r\n                // Check to see that we have a non-negative integer\r\n                this.checkDec( value, optionModel );\r\n            }\r\n\t\t},\r\n\r\n\t\tupdateCalc: function( optionModel ) {\r\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\r\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\r\n\t\t\tthis.checkDec( optionModel.get( 'dec' ), optionModel );\r\n\r\n\t\t\tBackbone.Radio.channel( 'calcs' ).trigger( 'update:calc', optionModel );\r\n\t\t},\r\n\r\n\t\tsortCalc: function( optionModel, setting ) {\r\n\t\t\tthis.checkAllCalcs( setting.collection );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check to see if a calc name exists.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\tname        calc name to check\r\n\t\t * @param  backbone.model \toptionModel \r\n\t\t * @return void\r\n\t\t */\r\n\t\tcheckName: function( name, optionModel, silent ) {\r\n\t\t\tsilent = silent || true;\r\n\t\t\t// Get our current errors, if any.\r\n\t\t\tvar errors = optionModel.get( 'errors' );\r\n\t\t\t// Search our calc collection for our name\r\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\r\n\r\n\t\t\t// If the name that was passed is the same as our current name, return false.\r\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\r\n\t\t\t\tfound = [];\r\n\t\t\t}\r\n\r\n\t\t\t// If our name exists, add an errors to the option model\r\n\t\t\tif ( 0 != found.length ) {\r\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\r\n\t\t\t} else {\r\n\t\t\t\tvar oldName = optionModel.get( 'name' );\r\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\r\n\t\t\t\tnfRadio.channel( 'calcs' ).trigger( 'update:calcName', optionModel, oldName );\r\n\t\t\t\tdelete errors.nameExists;\r\n\t\t\t}\r\n\r\n\t\t\toptionModel.set( 'errors', errors );\r\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\r\n\t\t *\r\n\t\t * @since  3.0\r\n\t\t * @param  string \t\t\teq          our equation\r\n\t\t * @param  backbone.model \toptionModel\r\n\t\t * @return void\r\n\t\t */\r\n\t\tcheckEQ: function( eq, optionModel ) {\r\n\t\t\t// Get any current errors on our optionModel\r\n\t\t\tvar errors = optionModel.get( 'errors' );\r\n\t\t\t/*\r\n\t\t\t * We're looking for two errors:\r\n\t\t\t * - Calculations that are below the current one can't be processed.\r\n\t\t\t * - Calculations can't refer to themselves.\r\n\t\t\t */ \r\n\t\t\tvar errorSelfRef = false;\r\n\t\t\tvar errorFutureCalc = false;\r\n\t\t\t// Regex that searches for {calc:key}\r\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\r\n\t\t\t/*\r\n\t\t\t * Calcs will be an array like:\r\n\t\t\t * ['{calc:test}'], ['{calc:another}']\r\n\t\t\t * \r\n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\r\n\t\t\t */\r\n\t\t\tif ( calcs ) {\r\n\t\t\t\tvar calculations = optionModel.collection;\r\n\t\t\t\t// Maps a function to each item in our calcs array.\r\n\t\t\t\tcalcs = calcs.map( function( calc ) {\r\n\t\t\t\t\t// calc will be {calc:name}\r\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\r\n\t\t\t\t\t// Get our optionModel from our calculations collection.\r\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\r\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\r\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\r\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\r\n\t\t\t\t\t\terrorSelfRef = true;\r\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\r\n\t\t\t\t\t\t// If the calc is after this one, set an error. \r\n\t\t\t\t\t\terrorFutureCalc = true;\r\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\r\n\t\t\t// If we didn't find any self ref errors, remove the key.\r\n\t\t\tif ( ! errorSelfRef ) {\r\n\t\t\t\tdelete errors.selfRef;\r\n\t\t\t}\r\n\r\n\t\t\t// If we didn't find any future calc errors, remove the key.\r\n\t\t\tif ( ! errorFutureCalc ) {\r\n\t\t\t\tdelete errors.futureCalc;\r\n\t\t\t}\r\n\r\n\t\t\t// Set errors and trigger our optionModel change.\r\n\t\t\toptionModel.set( 'errors', errors );\r\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\r\n\r\n\t\t},\r\n\r\n        /**\r\n         * Ceck to see if a dec is an integer value.\r\n         * \r\n         * @since 3.1\r\n         * @param string            dec         our decimal value\r\n         * @param backbone.model    optionModel\r\n         * @return void\r\n         */\r\n        checkDec: function( dec, optionModel ) {\r\n            // If dec isn't defined, bail...\r\n            if( 'undefined' === typeof(dec) ) return false;\r\n\t\t\t// Get our current errors, if any.\r\n\t\t\tvar errors = optionModel.get( 'errors' );\r\n            /**\r\n             * We're looking for one error:\r\n             * - dec is not a non-negative integer.\r\n             */\r\n            var errorNonIntDec = false;\r\n            \r\n            // Get our target value and see if it matches what we got.\r\n            var checked = Math.abs( parseInt( dec.trim() ) );\r\n            if ( dec.trim() !== '' && checked.toString() !== dec.trim() ) {\r\n                errorNonIntDec = true;\r\n                errors.nonIntDec = 'Decimals must be a non-negative integer!';\r\n            }\r\n            \r\n            // If our dec value is a non-negative integer.\r\n            if ( ! errorNonIntDec ) {\r\n                delete errors.nonIntDec;\r\n            }\r\n            \r\n\t\t\t// Set errors and trigger our optionModel change.\r\n\t\t\toptionModel.set( 'errors', errors );\r\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\r\n            \r\n        },\r\n        \r\n\t\tcheckAllCalcs: function( collection ) {\r\n\t\t\tvar that = this;\r\n\t\t\tcollection.models.map( function( opt ) {\r\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\r\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\r\n                that.checkDec( opt.get( 'dec' ), opt );\r\n\t\t\t} );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\r\n\n","/**\r\n * Loads all of our controllers using Require JS.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Fields\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine(\r\n\t'controllers/loadControllers',[\r\n\t\t/*\r\n\t\t * Application controllers\r\n\t\t */\r\n\t\t'controllers/app/remote',\r\n\t\t'controllers/app/drawer',\r\n\t\t'controllers/app/drawerConfig',\r\n\t\t'controllers/app/domainConfig',\r\n\t\t'controllers/app/data',\t\t\r\n\t\t'controllers/app/drawerToggleSettingGroup',\r\n\t\t'controllers/app/updateDB',\r\n\t\t'controllers/app/formData',\r\n\t\t'controllers/app/previewLink',\r\n\t\t'controllers/app/menuButtons',\r\n\t\t'controllers/app/trackChanges',\r\n\t\t'controllers/app/undoChanges',\r\n\t\t'controllers/app/publishResponse',\r\n\t\t'controllers/app/changeDomain',\r\n\t\t'controllers/app/pushstate',\r\n\t\t'controllers/app/hotkeys',\r\n\t\t'controllers/app/cleanState',\r\n\t\t'controllers/app/coreUndo',\r\n\t\t'controllers/app/cloneModelDeep',\r\n\t\t'controllers/app/getSettingChildView',\r\n\t\t'controllers/app/changeSettingDefault',\r\n\t\t'controllers/app/fieldset',\r\n\t\t'controllers/app/toggleSetting',\r\n\t\t'controllers/app/itemControls',\r\n\t\t'controllers/app/mergeTags',\r\n\t\t'controllers/app/mergeTagBox',\r\n\t\t'controllers/app/itemSettingFill',\r\n\t\t'controllers/app/confirmPublish',\r\n\t\t'controllers/app/rte',\r\n\t\t'controllers/app/settingFieldSelect',\r\n\t\t'controllers/app/settingFieldList',\r\n\t\t'controllers/app/settingHTML',\r\n\t\t'controllers/app/settingColor',\r\n\t\t'controllers/app/changeMenu',\r\n\t\t'controllers/app/mobile',\r\n\t\t'controllers/app/notices',\r\n\t\t'controllers/app/unloadCheck',\r\n\t\t'controllers/app/formContentFilters',\r\n\t\t'controllers/app/formContentGutterFilters',\r\n\t\t'controllers/app/cloneCollectionDeep',\r\n\t\t'controllers/app/trackKeyDown',\r\n\t\t'controllers/app/perfectScroll',\r\n\t\t'controllers/app/getNewSettingGroupCollection',\r\n\t\t'controllers/app/settingMedia',\r\n\t\t/*\r\n\t\t * Fields domain controllers\r\n\t\t */\r\n\t\t'controllers/fields/types',\r\n\t\t'controllers/fields/fieldTypeDrag',\r\n\t\t'controllers/fields/stagingDrag',\r\n\t\t'controllers/fields/staging',\r\n\t\t'controllers/fields/stagingSortable',\r\n\t\t'controllers/fields/filterTypes',\r\n\t\t'controllers/fields/sortable',\r\n\t\t'controllers/fields/data',\r\n\t\t'controllers/app/optionRepeater',\r\n\t\t'controllers/fields/editActive',\r\n\t\t'controllers/fields/fieldSettings',\r\n\t\t'controllers/fields/fieldCreditCard',\r\n\t\t'controllers/fields/fieldList',\r\n\t\t'controllers/fields/fieldPassword',\r\n\t\t'controllers/fields/fieldQuantity',\r\n\t\t'controllers/fields/fieldShipping',\r\n\t\t'controllers/fields/key',\r\n\t\t'controllers/fields/notices',\r\n\t\t'controllers/fields/mobile',\r\n\t\t'controllers/fields/savedFields',\r\n\t\t'controllers/fields/fieldDatepicker',\r\n\t\t'controllers/fields/fieldDisplayCalc',\r\n\r\n\t\t/*\r\n\t\t * TODO: Actions domain controllers\r\n\t\t */\r\n\t\t'controllers/actions/types',\r\n\t\t'controllers/actions/data',\r\n\t\t'controllers/actions/actionSettings',\r\n\t\t'controllers/actions/editActive',\r\n\t\t'controllers/actions/emailFromSetting',\r\n\t\t'controllers/actions/addActionTypes',\r\n\t\t'controllers/actions/typeDrag',\r\n\t\t'controllers/actions/droppable',\r\n\t\t'controllers/actions/filterTypes',\r\n\t\t'controllers/actions/newsletterList',\r\n\t\t'controllers/actions/collectPaymentFields',\r\n\t\t'controllers/actions/collectPaymentCalculations',\r\n\t\t'controllers/actions/collectPaymentFixed',\r\n\t\t'controllers/actions/collectPayment',\r\n\r\n\t\t/*\r\n\t\t * TODO: Settings domain controllers\r\n\t\t */\r\n\t\t'controllers/advanced/types',\r\n\t\t'controllers/advanced/data',\r\n\t\t'controllers/advanced/formSettings',\r\n\t\t'controllers/advanced/editActive',\r\n\t\t'controllers/advanced/clickEdit',\r\n\t\t'controllers/advanced/calculations'\r\n\t],\r\n\tfunction(\r\n\t\t/*\r\n\t\t * Application controllers\r\n\t\t */\r\n\t\tRemote,\r\n\t\tDrawer,\r\n\t\tDrawerConfig,\r\n\t\tDomainConfig,\r\n\t\tAppData,\r\n\t\tDrawerToggleSettingGroup,\r\n\t\tUpdateDB,\r\n\t\tFormData,\r\n\t\tPreviewLink,\r\n\t\tAppMenuButtons,\r\n\t\tAppTrackChanges,\r\n\t\tAppUndoChanges,\r\n\t\tAppPublishResponse,\r\n\t\tAppChangeDomain,\r\n\t\tPushstate,\r\n\t\tHotkeys,\r\n\t\tCleanState,\r\n\t\tCoreUndo,\r\n\t\tCloneModelDeep,\r\n\t\tDrawerSettingChildView,\r\n\t\tChangeSettingDefault,\r\n\t\tFieldset,\r\n\t\tToggleSetting,\r\n\t\tItemControls,\r\n\t\tMergeTags,\r\n\t\tMergeTagsBox,\r\n\t\tItemSettingFill,\r\n\t\tConfirmPublish,\r\n\t\tRTE,\r\n\t\tSettingFieldSelect,\r\n\t\tSettingFieldList,\r\n\t\tSettingHTML,\r\n\t\tSettingColor,\r\n\t\tChangeMenu,\r\n\t\tAppMobile,\r\n\t\tAppNotices,\r\n\t\tAppUnloadCheck,\r\n\t\tFormContentFilters,\r\n\t\tFormContentGutterFilters,\r\n\t\tCloneCollectionDeep,\r\n\t\tTrackKeyDown,\r\n\t\tPerfectScroll,\r\n\t\tGetNewSettingGroupCollection,\r\n\t\tSettingMedia,\r\n\t\t/*\r\n\t\t * Fields domain controllers\r\n\t\t */\r\n\t\tFieldTypes,\r\n\t\tFieldTypeDrag,\r\n\t\tFieldStagingDrag,\r\n\t\tStagedFieldsData,\r\n\t\tStagedFieldsSortable,\r\n\t\tDrawerFilterFieldTypes,\r\n\t\tMainContentFieldsSortable,\r\n\t\tFieldData,\r\n\t\tOptionRepeater,\r\n\t\tFieldsEditActive,\r\n\t\tFieldSettings,\r\n\t\tFieldCreditCard,\r\n\t\tFieldList,\r\n\t\tFieldPassword,\r\n\t\tFieldQuantity,\r\n\t\tFieldShipping,\r\n\t\tFieldKey,\r\n\t\tNotices,\r\n\t\tFieldsMobile,\r\n\t\tSavedFields,\r\n\t\tFieldDatepicker,\r\n\t\tFieldDisplayCalc,\r\n\t\t/*\r\n\t\t * TODO: Actions domain controllers\r\n\t\t */\r\n\t\tActionTypes,\r\n\t\tActionData,\r\n\t\tActionSettings,\r\n\t\tActionEditActive,\r\n\t\tActionEmailFromSetting,\r\n\t\tActionAddTypes,\r\n\t\tActionTypeDrag,\r\n\t\tActionDroppable,\r\n\t\tActionFilterTypes,\r\n\t\tActionNewsletterList,\r\n\t\tActionCollectPaymentFields,\r\n\t\tActionCollectPaymentCalculations,\r\n\t\tActionCollectPaymentFixed,\r\n\t\tActionCollectPayment,\r\n\t\t/*\r\n\t\t * TODO: Settings domain controllers\r\n\t\t */\r\n\t\tSettingTypes,\r\n\t\tSettingData,\r\n\t\tFormSettings,\r\n\t\tSettingsEditActive,\r\n\t\tSettingsClickEdit,\r\n\t\tAdvancedCalculations\r\n\t\t\r\n\t) {\r\n\t\tvar controller = Marionette.Object.extend( {\r\n\t\t\tinitialize: function() {\r\n\t\t\t\t/*\r\n\t\t\t\t * Application controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew FormContentFilters();\r\n\t\t\t\tnew FormContentGutterFilters();\r\n\t\t\t\tnew Hotkeys();\r\n\t\t\t\tnew Remote();\r\n\t\t\t\tnew Drawer();\r\n\t\t\t\tnew DrawerConfig();\r\n\t\t\t\tnew DomainConfig();\r\n\t\t\t\tnew DrawerToggleSettingGroup();\r\n\t\t\t\tnew PreviewLink();\r\n\t\t\t\tnew AppMenuButtons();\r\n\t\t\t\tnew AppTrackChanges();\r\n\t\t\t\tnew AppUndoChanges();\r\n\t\t\t\tnew AppPublishResponse();\r\n\t\t\t\tnew AppChangeDomain();\r\n\t\t\t\tnew CleanState();\r\n\t\t\t\tnew CoreUndo();\r\n\t\t\t\tnew CloneModelDeep();\r\n\t\t\t\tnew ItemControls();\r\n\t\t\t\tnew ConfirmPublish();\r\n\t\t\t\tnew RTE();\r\n\t\t\t\tnew SettingFieldSelect();\r\n\t\t\t\tnew SettingFieldList();\r\n\t\t\t\tnew SettingHTML();\r\n\t\t\t\tnew SettingColor();\r\n\t\t\t\tnew SettingMedia();\r\n\t\t\t\tnew ChangeMenu();\r\n\t\t\t\tnew AppMobile();\r\n\t\t\t\tnew AppNotices();\r\n\t\t\t\tnew AppUnloadCheck();\r\n\t\t\t\tnew UpdateDB();\r\n\t\t\t\tnew CloneCollectionDeep();\r\n\t\t\t\tnew TrackKeyDown();\r\n\t\t\t\tnew PerfectScroll();\r\n\t\t\t\tnew GetNewSettingGroupCollection();\r\n\t\t\t\t// new Pushstate();\r\n\t\t\t\t/*\r\n\t\t\t\t * Fields domain controllers\r\n\t\t\t\t * \r\n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\r\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\r\n\t\t\t\t */\r\n\t\t\t\tnew Fieldset();\r\n\t\t\t\tnew OptionRepeater();\r\n\r\n\t\t\t\tnew FieldTypes();\r\n\t\t\t\tnew FieldTypeDrag();\r\n\t\t\t\tnew FieldStagingDrag();\r\n\t\t\t\tnew StagedFieldsData();\r\n\t\t\t\tnew StagedFieldsSortable();\r\n\t\t\t\tnew DrawerFilterFieldTypes();\r\n\t\t\t\tnew MainContentFieldsSortable();\r\n\t\t\t\tnew ChangeSettingDefault();\r\n\t\t\t\tnew ToggleSetting();\r\n\t\t\t\tnew DrawerSettingChildView();\r\n\t\t\t\tnew FieldsEditActive();\r\n\t\t\t\tnew FieldSettings();\r\n\t\t\t\tnew FieldCreditCard();\r\n\t\t\t\tnew FieldList();\r\n\t\t\t\tnew FieldPassword;\r\n\t\t\t\tnew FieldQuantity();\r\n\t\t\t\tnew FieldShipping();\r\n\t\t\t\tnew FieldKey();\r\n\t\t\t\tnew Notices();\r\n\t\t\t\tnew FieldsMobile();\r\n\t\t\t\tnew SavedFields();\r\n\t\t\t\tnew FieldDatepicker();\r\n\t\t\t\tnew FieldDisplayCalc();\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Actions domain controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew ActionNewsletterList();\r\n\t\t\t\tnew ActionCollectPaymentCalculations();\r\n\t\t\t\tnew ActionCollectPayment();\t\t\t\t\r\n\t\t\t\tnew ActionTypes();\r\n\t\t\t\tnew ActionData();\r\n\t\t\t\tnew ActionSettings();\r\n\t\t\t\tnew ActionEditActive();\r\n\t\t\t\tnew ActionEmailFromSetting();\r\n\t\t\t\tnew ActionAddTypes();\r\n\t\t\t\tnew ActionTypeDrag();\r\n\t\t\t\tnew ActionDroppable();\r\n\t\t\t\tnew ActionFilterTypes();\r\n\t\t\t\tnew ActionCollectPaymentFields();\r\n\t\t\t\tnew ActionCollectPaymentFixed();\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * TODO: Settings domain controllers\r\n\t\t\t\t */\r\n\t\t\t\tnew SettingTypes();\r\n\t\t\t\tnew FormSettings();\r\n\t\t\t\tnew AdvancedCalculations();\r\n\t\t\t\tnew SettingData();\r\n\t\t\t\tnew SettingsEditActive();\r\n\t\t\t\tnew SettingsClickEdit();\r\n\t\t\t\t\r\n\t\t\t\t/*\r\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\r\n\t\t\t\t * AppData() was after FormData();\r\n\t\t\t\t */\r\n\t\t\t\tnew AppData();\r\n\t\t\t\tnew FieldData();\r\n\t\t\t\tnew FormData();\r\n\t\t\t\tnew MergeTags();\r\n\t\t\t\tnew MergeTagsBox();\r\n\t\t\t\tnew ItemSettingFill();\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn controller;\r\n} );\r\n\n","define( 'views/fields/fieldItem',['views/app/itemControls'], function( itemControlsView ) {\r\n\tvar view = Marionette.LayoutView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-field',\r\n\t\tdoingShortcut: false,\r\n\r\n\t\tregions: {\r\n\t\t\titemControls: '.nf-item-controls'\r\n\t\t},\r\n\r\n\t\tinitialize: function() {\r\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\r\n\t\t\tthis.model.on( 'change:label', this.render, this );\r\n\t\t\tthis.model.on( 'change:required', this.render, this );\r\n\t\t\tthis.model.on( 'change:id', this.render, this );\r\n\t\t},\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tthis.model.off( 'change:editActive', this.render );\r\n\t\t\tthis.model.off( 'change:label', this.render );\r\n\t\t\tthis.model.off( 'change:required', this.render );\r\n\t\t\tthis.model.off( 'change:id', this.render );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\r\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\r\n\t\t\tjQuery( this.el ).disableSelection();\r\n\r\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\r\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\r\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\r\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\r\n\t\t\t\t\t}\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttemplateHelpers: function () {\r\n\t    \treturn {\r\n\t    \t\trenderClasses: function() {\r\n\t    \t\t\tvar classes = 'nf-field-wrap';\r\n\t    \t\t\tif ( this.editActive ) {\r\n\t    \t\t\t\tclasses += ' active';\r\n\t    \t\t\t}\r\n\t    \t\t\treturn classes;\r\n\t    \t\t},\r\n\t    \t\trenderRequired: function() {\r\n\t    \t\t\tif ( 1 == this.required ) {\r\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\r\n\t    \t\t\t} else {\r\n\t    \t\t\t\treturn '';\r\n\t    \t\t\t}\r\n\t    \t\t},\r\n\t    \t\tgetFieldID: function() {\r\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\r\n\t\t\t\t\t\treturn 'field-' + this.id;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn this.id;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\trenderIcon: function() {\r\n\t    \t\t\tvar type, icon;\r\n\r\n\t\t\t\t\ttype = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\r\n\r\n\t\t\t\t\ticon = document.createElement( 'span' );\r\n\t\t\t\t\ticon.classList.add( 'fa', 'fa-' + type.get( 'icon' ) );\r\n\r\n\t\t\t\t\treturn icon.outerHTML;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t},\r\n\r\n\t\tevents: {\r\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\r\n\t\t\t'mousedown': 'maybeShortcut',\r\n\t\t\t'click': 'maybeClickEdit',\r\n\t\t\t'singletap': 'maybeTapEdit',\r\n\t\t\t'swipeleft': 'swipeLeft',\r\n\t\t\t'swiperight': 'swipeRight',\r\n\t\t\t'tapend': 'tapend'\r\n\t\t},\r\n\r\n\t\tmaybeClickEdit: function( e ) {\r\n\t\t\tif ( this.doingShortcut ) {\r\n\t\t\t\tthis.doingShortcut = false;\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\r\n\t\t\t\tjQuery( ':focus' ).blur();\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmaybeShortcut: function( e ) {\r\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\r\n\t\t\t/*\r\n\t\t\t * If the shift key isn't held down, return.\r\n\t\t\t */\r\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * If we are pressing D, delete this field.\r\n\t\t\t */\r\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\r\n\t\t\t\tthis.doingShortcut = true;\r\n\t\t\t\treturn false;\r\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\r\n\t\t\t\tthis.doingShortcut = true;\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tmaybeTapEdit: function( e ) {\r\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tswipeLeft: function( e, touch ) {\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\r\n\t\t},\r\n\r\n\t\tswipeRight: function( e, touch ) {\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\r\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\r\n\t\t},\r\n\r\n\t\ttapend: function( e, touch ) {\r\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\r\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\r\n\t\t},\r\n\r\n\t\tremove: function(){\r\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\r\n\t\t\t\tthis.$el.hide( 'clip', function(){\r\n\t\t\t\t\tjQuery( this ).remove();\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tthis.$el.remove();\r\n\t\t\t}\r\n\r\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\r\n\t\t},\r\n\r\n\t\tmouseoverItemControl: function( e ) {\r\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\r\n\n","define( 'views/fields/mainContentEmpty',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\r\n\r\n\t\tonBeforeDestroy: function() {\r\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\r\n\t\t},\r\n\r\n\t\tonRender: function() {\r\n\t\t\tthis.$el = this.$el.children();\r\n\t\t\tthis.$el.unwrap();\r\n\t\t\tthis.setElement( this.$el );\r\n\t\t},\r\n\r\n\t\tonShow: function() {\r\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\r\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\r\n\t\t\t}\r\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\r\n\t\t\tjQuery( this.el ).parent().droppable( {\r\n\t\t\t\taccept: function( draggable ) {\r\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\tactiveClass: 'nf-droppable-active',\r\n\t\t\t\thoverClass: 'nf-droppable-hover',\r\n\t\t\t\ttolerance: 'pointer',\r\n\t\t\t\tover: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\t\t\t\tout: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\r\n\t\t\t\t},\r\n\t\t\t\tdrop: function( e, ui ) {\r\n\t\t\t\t\tui.item = ui.draggable;\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\r\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\r\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\r\n\t\t\t\t},\r\n\t\t\t} );\r\n\t\t}\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Renders our form title.\r\n *\r\n * @package Ninja Forms builder\r\n * @subpackage App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/app/formTitle',[], function() {\r\n\tvar view = Marionette.ItemView.extend({\r\n\t\ttagName: 'div',\r\n\t\ttemplate: '#tmpl-nf-header-form-title',\r\n\r\n\t\tinitialize: function() {\r\n\t\t\t// When we change the model (to disable it, for example), re-render.\r\n\t\t\tthis.model.on( 'change:title', this.render, this );\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * These functions are available to templates, and help us to remove logic from template files.\r\n\t\t * \r\n\t\t * @since  3.0\r\n\t\t * @return Object\r\n\t\t */\r\n\t\ttemplateHelpers: function() {\r\n\t\t\tvar that = this;\r\n\t    \treturn {\r\n\t    \t\trenderTitle: function(){\r\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\r\n\t    \t\t\treturn _.escape( formData.get( 'settings' ).get( 'title' ) );\r\n\t\t\t\t},\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn view;\r\n} );\n","/**\r\n * Return views that might be used in extensions.\r\n * These are un-instantiated views.\r\n * \r\n * @package Ninja Forms builder\r\n * @subpackage Main App\r\n * @copyright (c) 2015 WP Ninjas\r\n * @since 3.0\r\n */\r\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\r\n\tvar controller = Marionette.Object.extend( {\r\n\t\tinitialize: function() {\r\n\t\t\t// Reply to requests for our field item view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\r\n\t\t\r\n\t\t\t// Reply to requests for our empty content view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\r\n\t\t\r\n\t\t\t// Reply to requests for our form title view.\r\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\r\n\t\t},\r\n\r\n\t\tgetFieldItem: function( model ) {\r\n\t\t\treturn fieldItemView;\r\n\t\t},\r\n\r\n\t\tgetMainContentEmpty: function() {\r\n\t\t\treturn mainContentEmptyView;\r\n\t\t},\r\n\r\n\t\tgetFormTitle: function() {\r\n\t\t\treturn FormTitleView;\r\n\t\t}\r\n\r\n\t});\r\n\r\n\treturn controller;\r\n} );\n","var nfRadio = Backbone.Radio;\r\n\r\njQuery( document ).ready( function( $ ) {\r\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\r\n\r\n\t\tvar NinjaForms = Marionette.Application.extend( {\r\n\r\n\t\t\tinitialize: function( options ) {\r\n\r\n\t\t\t\tvar that = this;\r\n\t\t\t\tMarionette.Renderer.render = function(template, data){\r\n\t\t\t\t\tvar template = that.template( template );\r\n\t\t\t\t\treturn template( data );\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Trigger an event before we load our controllers.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\r\n\t\t\t\t// Load our controllers.\r\n\t\t\t\tvar loadControllers = new LoadControllers();\r\n\t\t\t\t// Trigger an event after we load our controllers.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\r\n\r\n\t\t\t\t// Trigger an event before we load un-instantiated views\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\r\n\t\t\t\tvar loadViews = new LoadViews();\r\n\t\t\t\t// Trigger an event after we load un-instantiated views.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\r\n\r\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\r\n\t\t\t},\r\n\r\n\t\t\tonStart: function() {\r\n\t\t\t\tvar builderView = new BuilderView();\r\n\t\t\t\t// Trigger our after start event.\r\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\r\n\r\n\t\t\t\t/*\r\n\t\t\t\t * If we're on the new forms builder, open the add fields drawer.\r\n\t\t\t\t */\r\n\t\t\t\tif ( 0 == nfAdmin.formID ) {\r\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\ttemplate: function( template ) {\r\n\t\t\t\treturn _.template( $( template ).html(),  {\r\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\r\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\r\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\r\n\t\t\t\t\tvariable:    'data'\r\n\t\t\t\t} );\r\n\t\t\t}\r\n\t\t} );\r\n\t\r\n\t\tvar ninjaForms = new NinjaForms();\r\n\t\tninjaForms.start();\r\n\t} );\r\n} );\ndefine(\"main\", function(){});\n\n"]}